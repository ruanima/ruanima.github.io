<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逸思杂陈</title>
  <icon>https://www.gravatar.com/avatar/071e91e4d2b41eefac3330385d124f95</icon>
  <subtitle>人类一思考，上帝就发笑。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ponder.work/"/>
  <updated>2020-06-23T08:00:41.782Z</updated>
  <id>http://ponder.work/</id>
  
  <author>
    <name>Jay.Run</name>
    <email>ruan.lj@foxmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>循环import导致的模块被多次import</title>
    <link href="http://ponder.work/2020/06/20/python-import-behavior-and-circular-import/"/>
    <id>http://ponder.work/2020/06/20/python-import-behavior-and-circular-import/</id>
    <published>2020-06-20T01:48:00.000Z</published>
    <updated>2020-06-23T08:00:41.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>循环import是很多Python初学者都会遇到问题，网上有也有很多文章讲解决方法，比如<a href="https://www.jianshu.com/p/a1e91cc53b07" target="_blank" rel="noopener">这篇</a>，不清楚的可以自行查阅，这里就不赘述了。</p><p>那么，为啥老司机也会遇到这个问题呢？这段时间一直在搞把redis复刻一个python版本，在复刻代码时就遇到了这个问题。而且我也使用了延迟import，却没能解决。</p><p>下面我们来详细分析下</p><a id="more"></a><h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><p>先看两段代码</p><p>run.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=<span class="string">'DEBUG'</span>, </span><br><span class="line">    format=<span class="string">'[&#123;asctime&#125; &#123;module&#125;.&#123;funcName:&lt;11&#125;] &#123;message&#125;'</span>, style=<span class="string">'&#123;'</span>)</span><br><span class="line">logging.info(sys.modules[<span class="string">'__main__'</span>])</span><br><span class="line">logging.info(<span class="string">'begin load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">server = Server()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> foo <span class="keyword">import</span> do_someting</span><br><span class="line">    logging.info(<span class="string">'call'</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> hasattr(server, <span class="string">'name'</span>)</span><br><span class="line">    server.name = <span class="string">'aaa'</span></span><br><span class="line">    logging.info(repr(server))</span><br><span class="line">    logging.info(<span class="string">'%s\t%s'</span>, repr(Server), id(Server))</span><br><span class="line">    do_someting()</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'end load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start()</span><br></pre></td></tr></table></figure></p><p>foo.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'begin load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_someting</span><span class="params">()</span>:</span></span><br><span class="line">    logging.info(<span class="string">'begin call'</span>)</span><br><span class="line">    <span class="keyword">import</span> run</span><br><span class="line"></span><br><span class="line">    logging.info(repr(run.server))</span><br><span class="line">    logging.info(<span class="string">'%s\t%s'</span>, (run.Server), id(run.Server))</span><br><span class="line">    <span class="keyword">if</span> hasattr(run.server, <span class="string">'name'</span>):</span><br><span class="line">        logging.info(<span class="string">'found attr name'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">'not found attr name'</span>)</span><br><span class="line">    logging.info(<span class="string">'end call'</span>)</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'end load'</span>)</span><br></pre></td></tr></table></figure></p><p>再看执行<code>python run.py</code>的结果<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">659</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] &lt;<span class="keyword">module</span> <span class="string">'__main__'</span> from <span class="string">'/Volumes/study/Projects/code_snippet/circular_import/run.py'</span>&gt;</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">659</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">begin</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">659</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">end</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> foo.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">begin</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> foo.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">end</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> <span class="built_in">run</span>.start      ] call</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> <span class="built_in">run</span>.start      ] &lt;__main__.<span class="built_in">Server</span> object at <span class="number">0x1064eb940</span>&gt;</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> <span class="built_in">run</span>.start      ] &lt;class <span class="string">'__main__.Server'</span>&gt; <span class="number">140250245614784</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> foo.do_someting] <span class="built_in">begin</span> call</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] &lt;<span class="keyword">module</span> <span class="string">'__main__'</span> from <span class="string">'/Volumes/study/Projects/code_snippet/circular_import/run.py'</span>&gt;</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">begin</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">end</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> foo.do_someting] &lt;<span class="built_in">run</span>.<span class="built_in">Server</span> object at <span class="number">0x1065d8b50</span>&gt;</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> foo.do_someting] &lt;class <span class="string">'run.Server'</span>&gt;  <span class="number">140250247610512</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> foo.do_someting] <span class="keyword">not</span> found attr name</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> foo.do_someting] <span class="built_in">end</span> call</span><br></pre></td></tr></table></figure></p><p>可以发现几个问题</p><ol><li>run.py 被加载了两次</li><li>在run模块中的server实例和Server类，与foo模块中的id一样，也就是不是同一个对象。</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先复习下import机制</p><p>import 语句结合了两个操作；它先搜索指定名称的模块，然后将搜索结果绑定到当前作用域中的名称。 import 语句的搜索操作定义为对 <code>__import__()</code> 函数的调用并带有适当的参数。 <code>__import__()</code> 的返回值会被用于执行 import 语句的名称绑定操作。 </p><p>对 <code>__import__()</code> 的直接调用将仅执行模块搜索以及在找到时的模块创建操作。 不过也可能产生某些副作用，例如导入父包和更新各种缓存 (包括 sys.modules)，只有 import 语句会执行名称绑定操作。</p><p><code>sys.modules</code>是一个字典，缓存了已加载的模型，以模块名称为key，模块对象为value。<br>执行import 语句时，先在<code>sys.modules</code>缓存中查询该模块，如已存在者返回该对象，否则从文件系统中加载该模块。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2020</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> run<span class="selector-class">.start</span>      ] &lt;__main__<span class="selector-class">.Server</span> <span class="selector-tag">object</span> at <span class="number">0</span>x1064eb940&gt;</span><br></pre></td></tr></table></figure><p>从上面的这行输出可以看出，当run作为程序入口时，模块名称变为了<code>__main__</code>, 查看 <code>sys.modules</code>，也只发现了<code>__main__</code>，没有发现<code>run</code>.<br>所以， 当<code>do_someting</code> import <code>run</code> 模块时，肯定是发现没有加载，最终导致加载了两次，Server类id不一致也可以理解了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>所以只要能从<code>sys.modules</code>正确地找到run模块，问题就可以解决。</p><p>具体来说有三种方法</p><h3 id="方法A"><a href="#方法A" class="headerlink" title="方法A"></a>方法A</h3><p>修改foo.py, 把<code>import run</code>改为<code>import __main__ as run</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'begin load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_someting</span><span class="params">()</span>:</span></span><br><span class="line">    logging.info(<span class="string">'begin call'</span>)</span><br><span class="line">    <span class="keyword">import</span> __main__ <span class="keyword">as</span> run</span><br><span class="line"></span><br><span class="line">    logging.info(repr(run.server))</span><br><span class="line">    logging.info(<span class="string">'%s\t%s'</span>, (run.Server), id(run.Server))</span><br><span class="line">    <span class="keyword">if</span> hasattr(run.server, <span class="string">'name'</span>):</span><br><span class="line">        logging.info(<span class="string">'found attr name'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">'not found attr name'</span>)</span><br><span class="line">    logging.info(<span class="string">'end call'</span>)</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'end load'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="方法B"><a href="#方法B" class="headerlink" title="方法B"></a>方法B</h3><p>修改<code>sys.modules</code>，增加key<code>run</code>，指向<code>__main__</code>模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.modules[<span class="string">'run'</span>] = sys.modules[<span class="string">'__main__'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="方法C（推荐）"><a href="#方法C（推荐）" class="headerlink" title="方法C（推荐）"></a>方法C（推荐）</h3><p>启动文件单独使用一个文件，里面不包含其他代码。<br>这时<code>__main__</code>模块变成了bar, 这时run模块的名称就不会改变了，import行为也就正常了</p><p>bar.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> run <span class="keyword">import</span> start</span><br><span class="line"></span><br><span class="line">start()</span><br></pre></td></tr></table></figure></p><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p>上面三种方法，殊途同归，结果都是一样的。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,508</span> run.&lt;module&gt;   ] begin load</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,508</span> run.&lt;module&gt;   ] end load</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.&lt;module&gt;   ] begin load</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.&lt;module&gt;   ] end load</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> run.start      ] call</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> run.start      ] &lt;run.Server object at <span class="number">0</span>x10f542fa0&gt;</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> run.start      ] &lt;class 'run.Server'&gt;  <span class="number">140660950954304</span></span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] begin call</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] &lt;run.Server object at <span class="number">0</span>x10f542fa0&gt;</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] &lt;class 'run.Server'&gt;  <span class="number">140660950954304</span></span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] found attr name</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] end call</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为C是编译型语言，可以理解为模块的导入在编译期就完成了，也就不会出现模块的循环依赖，而且全局对象的内存位置也在编译期就固定了。</p><p>而Python作为解释型语言，模块的导入加载和执行是混在一起的，所有对象都是可以更改的，也就容易出现这种问题。</p><p>切记：</p><p><strong>复杂Python程序的入口文件最好保持单一的文件，不要混入其他对象定义，谨慎使用<code>if __name__ == &#39;__main__&#39;</code>写法。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.python.org/zh-cn/3/reference/import.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/reference/import.html</a></li><li><a href="https://docs.python.org/zh-cn/3/library/sys.html?#sys.modules" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/sys.html?#sys.modules</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;循环import是很多Python初学者都会遇到问题，网上有也有很多文章讲解决方法，比如&lt;a href=&quot;https://www.jianshu.com/p/a1e91cc53b07&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇&lt;/a&gt;，不清楚的可以自行查阅，这里就不赘述了。&lt;/p&gt;
&lt;p&gt;那么，为啥老司机也会遇到这个问题呢？这段时间一直在搞把redis复刻一个python版本，在复刻代码时就遇到了这个问题。而且我也使用了延迟import，却没能解决。&lt;/p&gt;
&lt;p&gt;下面我们来详细分析下&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>简明双标指南</title>
    <link href="http://ponder.work/2020/06/13/%E7%AE%80%E6%98%8E%E5%8F%8C%E6%A0%87%E6%8C%87%E5%8D%97/"/>
    <id>http://ponder.work/2020/06/13/%E7%AE%80%E6%98%8E%E5%8F%8C%E6%A0%87%E6%8C%87%E5%8D%97/</id>
    <published>2020-06-13T14:39:38.000Z</published>
    <updated>2020-06-23T08:00:41.782Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时期有很多事情发生，也颠覆了我们的认知（如I cannot breathe），同时也发现了很多双标事件。</p><p>下面就简单地总结下，如何双标。</p><p>双标的核心是，定性的看问题，不要就事论事具体分析。</p><p>双标的要点之一，选取部分真相进行概括定性。<br>这里的选取非常关键，我们应该选择性地看见我们想看见的东西。假如B捡了地上的一块钱并据为己有，贪小便宜不是君子所为，这人肯定是品行不端。假如A也这么干了，对不起我没有看见。假如A捡了垃圾放垃圾桶了，这时我们就可以说，从一件微不足道的事情上就可以看出A真是道德高尚。</p><p>双标的要点之二，定性之后的上纲上线。<br>由于第一步我们已经定性了A和B，以后再发生事情就很好处理了。假如都做了好事，A就是好人性质的体现，B因为他是坏人肯定是另有目的的，是伪装的。假如都做了坏事，反过来处理就好了。比如，你认定A是好人，B是坏人，假设他们都随地吐痰了。这时就可以说A肯定是不小心的，大善人怎么可能做这种事；可以说B真是狗改不了吃屎，连基本的公德心都没有。假设都做了好事，扶老奶奶过马路，A就是一以贯之的道德楷模，值得学习；B肯定是装的，为了方便自己做坏事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一段时期有很多事情发生，也颠覆了我们的认知（如I cannot breathe），同时也发现了很多双标事件。&lt;/p&gt;
&lt;p&gt;下面就简单地总结下，如何双标。&lt;/p&gt;
&lt;p&gt;双标的核心是，定性的看问题，不要就事论事具体分析。&lt;/p&gt;
&lt;p&gt;双标的要点之一，选取部分真相进行概
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://ponder.work/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://ponder.work/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Python asyncio 简易教程</title>
    <link href="http://ponder.work/2020/05/24/python-asyncio-usage/"/>
    <id>http://ponder.work/2020/05/24/python-asyncio-usage/</id>
    <published>2020-05-24T01:48:00.000Z</published>
    <updated>2020-06-23T08:00:41.782Z</updated>
    
    <content type="html"><![CDATA[<p><code>asyncio</code>是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。</p><p><code>asyncio</code>的编程模型就是一个消息循环。我们从<code>asyncio</code>模块中直接获取一个<code>EventLoop</code>的引用，然后把需要执行的协程扔到<code>EventLoop</code>中执行，就实现了异步IO。</p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">' world'</span>)</span><br><span class="line">    </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(hello_world())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><h2 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h2><p><code>async def</code> 定义的每一个函数, 本质上是一个协程.<br>当await调用一个函数时, 程序就切换到该函数中执行了, 当执行完成时, 程序又回到await调用处继续执行. </p><p>当函数的调用链上碰到系统io相关函数时，程序执行的控制权就会回到eventloop主循环，eventloop就会调度执行别的函数，等到该函数的io就绪时，再从该函数暂停的地方继续执行。</p><p>再搭配上支持非阻塞io的异步库, 这样就实现了高效的异步编程.</p><p>所有异步函数是在同一个线程中执行的, 在该进程内我们还可启用其他线程, 执行其他同步代码. 下图展示了Python中协程、线程、进程的逻辑关系。</p><p><img src="http://image.runjf.com/mweb/2020-05-24-15903277834535.jpg" alt></p><h2 id="如何在event-loop内调用同步代码"><a href="#如何在event-loop内调用同步代码" class="headerlink" title="如何在event loop内调用同步代码"></a>如何在event loop内调用同步代码</h2><p>一旦使用async, 整个线程内都必须使用异步, 否则整个线程都会阻塞。<br>所以，必须另起线程, 将同步操作放在线程中执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line">executor = concurrent.futures.ThreadPoolExecutor(</span><br><span class="line">    max_workers=<span class="number">2</span>,  <span class="comment"># 线程池大小</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_block_things</span><span class="params">(x)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>, time.time())</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    fut = loop.run_in_executor(executor, some_block_things, x)</span><br><span class="line">    num =  <span class="keyword">await</span> asyncio.wait_for(fut, timeout=<span class="number">10</span>)</span><br><span class="line">    print(<span class="string">'num %s'</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait([hello_world(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"Complete in &#123;&#125; seconds"</span>.format(end - start))</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hello world <span class="number">1533904346.37133</span></span><br><span class="line">hello world <span class="number">1533904346.371683</span></span><br><span class="line">hello world <span class="number">1533904346.37199</span></span><br><span class="line">hello world <span class="number">1533904346.372059</span></span><br><span class="line">hello world <span class="number">1533904346.372122</span></span><br><span class="line">hello world <span class="number">1533904346.372176</span></span><br><span class="line">hello world <span class="number">1533904346.372245</span></span><br><span class="line">hello world <span class="number">1533904346.372295</span></span><br><span class="line">num <span class="number">0</span></span><br><span class="line">num <span class="number">3</span></span><br><span class="line">num <span class="number">4</span></span><br><span class="line">num <span class="number">1</span></span><br><span class="line">num <span class="number">5</span></span><br><span class="line">num <span class="number">6</span></span><br><span class="line">num <span class="number">7</span></span><br><span class="line">num <span class="number">2</span></span><br><span class="line">Complete in <span class="number">4.015289068222046</span> seconds</span><br><span class="line">[Finished in <span class="number">4.2</span>s]</span><br></pre></td></tr></table></figure></p><p>因为这里我的线程池大小为2, 所以8个sleep整体耗时4s, 但是’hello world’ 几乎是同一时刻输出的, 这就是asyncio的魅力所在.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>asyncio使用<code>async</code>和<code>await</code>的语法，使得原来回调函数形式的异步代码变为同步代码，更易于理解。<br>使用asyncio可以方便地构建高性能的网络服务, 单进程qps可以轻松地达到2000以上。<br>基于asyncio也出现了一些异步web框架，比如sanic，相比传统框架性能提升较大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;asyncio&lt;/code&gt;是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;asyncio&lt;/code&gt;的编程模型就是一个消息循环。我们从&lt;code&gt;asyncio&lt;/code&gt;模块中直接获取一个&lt;code&gt;EventLoop&lt;/code&gt;的引用，然后把需要执行的协程扔到&lt;code&gt;EventLoop&lt;/code&gt;中执行，就实现了异步IO。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="异步" scheme="http://ponder.work/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>自学的陷阱</title>
    <link href="http://ponder.work/2020/05/17/%E8%87%AA%E5%AD%A6%E7%9A%84%E9%99%B7%E9%98%B1/"/>
    <id>http://ponder.work/2020/05/17/%E8%87%AA%E5%AD%A6%E7%9A%84%E9%99%B7%E9%98%B1/</id>
    <published>2020-05-17T03:17:00.000Z</published>
    <updated>2020-06-23T08:00:41.782Z</updated>
    
    <content type="html"><![CDATA[<p>自己常年都在自学，在自学的路上走了很多弯路，到最后发现很多时候走的都是最艰难的或者是错误的道路，抑或是一直在尝试各种道路，从未选择一条坚持走下去。</p><a id="more"></a><p>举最熟悉的编程来说，它应该是最适合自学的领域了。网络上相关的学习资源也数不胜数，但是为何很多人最后进步很慢或者是干脆“从入门到放弃了”，究其原因大抵是走了错误的道路。</p><p>打开知乎，类似“如何学习编程”的问题数不胜数，也有很多人善意地给了自己的回答。记得我当年也问过类似的问题，有人说先从SICP入手吧，有人说直接LeetCode刷题，有人说学C，有人说学Python。或许一千个人就有一千种答案，但是到底哪个能帮助到你呢？每个人的答案，其实都是他过往经验的总结。</p><p>由于每个人的资质、禀赋、基础（下面统称为资质）并不相同，每个方法也有其适应人群和局限，照搬别人的路子只能是失败。越高资质的人（利根人），对于各种方法的兼容性越好，当然效果是有区别的。低资质的人（钝根人），越发体现方法的重要性。这里的方法就是学习的路径，佛家称之为法门。一切法门都是手段而已，都是为了最终能学到东西。</p><p>譬如爬山，有盘山公路，也有直接的楼梯，也有索道，并无绝对高下之分，只有合适与不合适。<br>体力不同能承受的坡度就不同，超出限度最后只能半途而废，所以得从这些路径上选择自己恰好能接受的那条路。当自学的时候，由于没有老师，我们很容易步入错误的道路，从而落入陷阱。</p><p>那么，如何适合自己的道路呢？首先要了解自己的的优劣势，明确目标，然后了解每条路径的特点（要求、效率、产出等）。<br>具体来说，逐条尝试路径，评估投入产出，做记录，并对比当前的目标（为了欣赏风景，还是锻炼身体），选择相对合适的路径。而且选择不应该是僵化的，应该持续地评估，因为的你会变、路会变、你和路之间还会变。当然不要去尝试所有的路径，一则时间精力有限，二则我们也不是路径测评师。</p><p>有朝一日学有所得，能够为人导师时，记得随人讲法。</p><p>最后，学习使我快乐。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己常年都在自学，在自学的路上走了很多弯路，到最后发现很多时候走的都是最艰难的或者是错误的道路，抑或是一直在尝试各种道路，从未选择一条坚持走下去。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ponder.work/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://ponder.work/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="学习方法" scheme="http://ponder.work/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python2迁移Python3指南</title>
    <link href="http://ponder.work/2020/05/11/python-2to3-guide/"/>
    <id>http://ponder.work/2020/05/11/python-2to3-guide/</id>
    <published>2020-05-11T12:17:00.000Z</published>
    <updated>2020-06-24T06:31:58.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><ul><li>了解Python3和Python2的区别，参考<a href="/2017/08/30/difference-between-python2-and-python3/">Python2和Python3区别</a>，<a href="https://github.com/wjo1212/PythonChinaMeetup2020/blob/master/PythonChinaMeetup-20200510-Python3%E6%96%B0%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D.pdf" target="_blank" rel="noopener">Python3新特性</a></li><li>完备的测试用例</li><li>必要的工具：future，用于自动修改不兼容的语法。six，用于Python版本判断。pylint，语法检查</li><li>做好备份</li><li>测试（至关重要），下面的每一步改动都得确保代码行为没有发生变化。</li></ul><h3 id="future安装"><a href="#future安装" class="headerlink" title="future安装"></a>future安装</h3><p><code>pip install future -U</code></p><a id="more"></a><h3 id="项目大致结构"><a href="#项目大致结构" class="headerlink" title="项目大致结构"></a>项目大致结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── ReadMe.md</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── run.py</span><br><span class="line">├── src</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── conf.py</span><br><span class="line">│   ├── handlers</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── draw.py</span><br><span class="line">│   ├── process</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── decision.py</span><br><span class="line">│   │   ├── preprocess.py</span><br><span class="line">│   │   └── process.py</span><br><span class="line">│   ├── service.py</span><br><span class="line">│   └── workflow.py</span><br><span class="line">├── tests</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── test_preprocess.py</span><br></pre></td></tr></table></figure><h2 id="修改过时的Python2代码"><a href="#修改过时的Python2代码" class="headerlink" title="修改过时的Python2代码"></a>修改过时的Python2代码</h2><p>这一步用于测试的解释器是Python2<br>这一步是避免使用过于古老的Python2语法，将项目代码升级为更现代的Python2代码。</p><p>执行: <code>futurize --stage1 -w src tests</code></p><p>可能涉及的改动<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异常处理</span></span><br><span class="line">-    <span class="keyword">except</span> Exception, err:</span><br><span class="line">+    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典元素判断</span></span><br><span class="line">- <span class="keyword">if</span> lr_space_dict.has_key(str(feature)):</span><br><span class="line">+ <span class="keyword">if</span> str(feature) <span class="keyword">in</span> lr_space_dict:</span><br><span class="line"></span><br><span class="line"><span class="comment"># import方式改变</span></span><br><span class="line">- <span class="keyword">from</span> workflow <span class="keyword">import</span> WorkFlow</span><br><span class="line">+ <span class="keyword">from</span> .workflow <span class="keyword">import</span> WorkFlow</span><br><span class="line"></span><br><span class="line"><span class="comment"># print</span></span><br><span class="line">- <span class="keyword">print</span> <span class="string">'load model %s'</span> % self.name</span><br><span class="line">+ print(<span class="string">'load model %s'</span> % self.name)</span><br></pre></td></tr></table></figure></p><h2 id="代码升级Python3，-并添加Python2支持"><a href="#代码升级Python3，-并添加Python2支持" class="headerlink" title="代码升级Python3， 并添加Python2支持"></a>代码升级Python3， 并添加Python2支持</h2><p>这一步用于测试的解释器是Python2<br>一般在升级过程中，不直接移除Python2支持，否则一旦发现问题难以回滚。<br>也不方便确认，代码改动是否产生了非预期的变化。</p><p>执行：<code>futurize --stage2 -x libfuturize.fixes.fix_unicode_keep_u -w src tests</code></p><p><strong>注意</strong>：由于futurize关于unicode的处理存在一些bug，所以字符编码的我们自己单独处理（见后文）。这里的<code>-x libfuturize.fixes.fix_unicode_keep_u</code>参数，跳过对unicode的自动处理，不将代码中的unicode替换为str。同时，我们要逐一去除文件中自动添加的<code>from builtins import str</code>，避免类似<code>import unicode as str</code>的行为。</p><p>可能涉及的改动:</p><ol><li>迭代器对象相关改动</li><li>内置库重命名相关改动</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map() -&gt; list(map())</span></span><br><span class="line">- year1, month1, day1 = map(int, date_created.split(<span class="string">' '</span>)[<span class="number">0</span>].split(<span class="string">'-'</span>))</span><br><span class="line">+ year1, month1, day1 = list(map(int, date_created.split(<span class="string">' '</span>)[<span class="number">0</span>].split(<span class="string">'-'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict.keys() - list(dict.keys())</span></span><br><span class="line">- <span class="keyword">for</span> city <span class="keyword">in</span> city_dict.keys():</span><br><span class="line">+ <span class="keyword">for</span> city <span class="keyword">in</span> list(city_dict.keys()):</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict.iteritems() -&gt; dict.items()</span></span><br><span class="line">- <span class="keyword">for</span> k, v <span class="keyword">in</span> hawk_info.iteritems():</span><br><span class="line">+ <span class="keyword">for</span> k, v <span class="keyword">in</span> hawk_info.items():</span><br><span class="line"> </span><br><span class="line"><span class="comment"># dict.items() -&gt; list(dict.iteritems())</span></span><br><span class="line">- <span class="keyword">for</span> name, val <span class="keyword">in</span> trans_td_schema.items():</span><br><span class="line">+ <span class="keyword">for</span> name, val <span class="keyword">in</span> list(trans_td_schema.items()):</span><br><span class="line"></span><br><span class="line"><span class="comment"># xrange -&gt; list(range)</span></span><br><span class="line">- <span class="keyword">for</span> index <span class="keyword">in</span> xrange(len(rule_files)):</span><br><span class="line">+ <span class="keyword">for</span> index <span class="keyword">in</span> range(len(rule_files)):</span><br><span class="line"></span><br><span class="line"><span class="comment"># ConfigParser -&gt; configparser</span></span><br><span class="line">- <span class="keyword">import</span> ConfigParser</span><br><span class="line">+ <span class="keyword">from</span> future <span class="keyword">import</span> standard_library</span><br><span class="line">+ standard_library.install_aliases()</span><br><span class="line">+ <span class="keyword">import</span> configparser</span><br></pre></td></tr></table></figure><h2 id="Python文本处理改为unicode"><a href="#Python文本处理改为unicode" class="headerlink" title="Python文本处理改为unicode"></a>Python文本处理改为unicode</h2><p>这一步用于测试的解释器是Python2和Python3</p><p>正确处理字符的原则：</p><ol><li>程序内部均使用unicode，所以大部分业务代码不需要进行编码处理。</li><li>对输入的二进制数据（文本，网络包等），使用对应的字符集进行decode(), 转为unicode</li><li>将内部数据encode后进行传输存储</li></ol><p>也就是：<code>外部数据（字节）-&gt; decode -&gt; unicode -&gt; encode -&gt; 输出数据（字节</code></p><h3 id="启用默认unicode支持"><a href="#启用默认unicode支持" class="headerlink" title="启用默认unicode支持"></a>启用默认unicode支持</h3><p>启用默认unicode支持：<code>futurize --stage1 --unicode-literals src tests -w</code></p><p>涉及的改动:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有文件的头部会增加下面的语句，作用是将源码中的所有字符串视作unicode</span></span><br><span class="line"><span class="comment"># 也就是 "中" 会等效于 u"中"， 不需要`u`作为unicode的前缀 </span></span><br><span class="line">+ <span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br></pre></td></tr></table></figure></p><h3 id="修改编码相关的代码"><a href="#修改编码相关的代码" class="headerlink" title="修改编码相关的代码"></a>修改编码相关的代码</h3><ol><li>str() -&gt; unicode()</li><li>open -&gt; io.open</li><li>去除程序内部多余的encode，decode</li><li>redis, requests等库，增加必要的decode代码</li></ol><p>涉及的改动:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str() -&gt; unicode()</span></span><br><span class="line">- feature = str(feature)</span><br><span class="line">+ feature = unicode(feature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open -&gt; io.open</span></span><br><span class="line">- <span class="keyword">with</span> open(v) <span class="keyword">as</span> f:</span><br><span class="line">+ <span class="keyword">with</span> io.open(v, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis增加必要的decode代码</span></span><br><span class="line">-     <span class="keyword">return</span> self.connection.get(key)</span><br><span class="line">+     res = self.connection.get(key)</span><br><span class="line">+     <span class="keyword">return</span> res.decode(<span class="string">'utf8'</span>) <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></p><h3 id="为Python3添加unicode函数"><a href="#为Python3添加unicode函数" class="headerlink" title="为Python3添加unicode函数"></a>为Python3添加unicode函数</h3><p>为了代码在Python2和Python3都正确运行，必须给Python增加unicode函数。</p><p>如果后面代码不需要Python2支持，则这一步的改动可以去除，并且把所有的unicode调用改完str即可。</p><p>实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> six</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> six.PY2:</span><br><span class="line">    <span class="keyword">from</span> __builtin__ <span class="keyword">import</span> unicode</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">unicode</span><span class="params">(str)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, unicode_or_bytes=<span class="string">''</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(unicode_or_bytes, bytes):</span><br><span class="line">                <span class="keyword">return</span> str.__new__(cls, unicode_or_bytes, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">            <span class="keyword">return</span> str.__new__(cls, unicode_or_bytes)</span><br></pre></td></tr></table></figure></p><h2 id="修复于解释器版本相关的行为"><a href="#修复于解释器版本相关的行为" class="headerlink" title="修复于解释器版本相关的行为"></a>修复于解释器版本相关的行为</h2><p>这一步用于测试的解释器是Python2和Python3</p><h3 id="字典遍历顺序"><a href="#字典遍历顺序" class="headerlink" title="字典遍历顺序"></a>字典遍历顺序</h3><p>python的字典遍历是不保证顺序的，不同版本解释器遍历顺序可能不同。<br>如果你的代码对遍历顺序有依赖，建议固定遍历顺序，可以使用OrderedDict，或者遍历前排序，或者指定遍历的key。</p><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><p>Python2和Python3的四舍五入行为不一样。<br>如果有数值处理相关的代码，建议做如下修复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">python2round</span><span class="params">(number, ndigits=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> sys.version_info[<span class="number">0</span>] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> round(number, ndigits)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    eq = <span class="keyword">lambda</span> a, b: math.isclose(a, b)   <span class="comment"># pylint: disable=all</span></span><br><span class="line">    limit = <span class="number">0.1</span> ** ndigits</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> eq(round(number + limit, ndigits) - round(number, ndigits), limit):</span><br><span class="line">        <span class="keyword">return</span> number + abs(number) / number * <span class="number">0.5</span> * limit</span><br><span class="line">    <span class="keyword">return</span> float(round(number, ndigits))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">python3round</span><span class="params">(number, ndigits=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> sys.version_info[<span class="number">0</span>] &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> ndigits <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> round(number, ndigits)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> round(number)</span><br><span class="line"></span><br><span class="line">    intIt = <span class="literal">True</span> <span class="keyword">if</span> ndigits <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    ndigits = ndigits <span class="keyword">if</span> ndigits <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    f = number</span><br><span class="line">    <span class="keyword">if</span> abs(round(f) - f) == <span class="number">0.5</span>:</span><br><span class="line">        retAmount = <span class="number">2.0</span> * round(f / <span class="number">2.0</span>, ndigits);</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        retAmount = round(f, ndigits)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> intIt:</span><br><span class="line">        <span class="keyword">return</span> int(retAmount)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> retAmount</span><br></pre></td></tr></table></figure><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>至此，Python2到Python3的迁移已然完成，你获得了支持python3和python2的代码。</p><p>值得小酌一杯</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://python-future.org/automatic_conversion.html" target="_blank" rel="noopener">https://python-future.org/automatic_conversion.html</a></li><li><a href="https://github.com/PythonCharmers/python-future" target="_blank" rel="noopener">https://github.com/PythonCharmers/python-future</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前置要求&quot;&gt;&lt;a href=&quot;#前置要求&quot; class=&quot;headerlink&quot; title=&quot;前置要求&quot;&gt;&lt;/a&gt;前置要求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;了解Python3和Python2的区别，参考&lt;a href=&quot;/2017/08/30/difference-between-python2-and-python3/&quot;&gt;Python2和Python3区别&lt;/a&gt;，&lt;a href=&quot;https://github.com/wjo1212/PythonChinaMeetup2020/blob/master/PythonChinaMeetup-20200510-Python3%E6%96%B0%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python3新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;完备的测试用例&lt;/li&gt;
&lt;li&gt;必要的工具：future，用于自动修改不兼容的语法。six，用于Python版本判断。pylint，语法检查&lt;/li&gt;
&lt;li&gt;做好备份&lt;/li&gt;
&lt;li&gt;测试（至关重要），下面的每一步改动都得确保代码行为没有发生变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;future安装&quot;&gt;&lt;a href=&quot;#future安装&quot; class=&quot;headerlink&quot; title=&quot;future安装&quot;&gt;&lt;/a&gt;future安装&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pip install future -U&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="2to3" scheme="http://ponder.work/tags/2to3/"/>
    
  </entry>
  
  <entry>
    <title>《幸福的情绪》读书笔记</title>
    <link href="http://ponder.work/2020/05/05/%E3%80%8A%E5%B9%B8%E7%A6%8F%E7%9A%84%E6%83%85%E7%BB%AA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/05/05/%E3%80%8A%E5%B9%B8%E7%A6%8F%E7%9A%84%E6%83%85%E7%BB%AA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-05T03:17:00.000Z</published>
    <updated>2020-05-08T11:02:17.714Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记, 也是所有旧读书笔记的最后一篇</em></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本书主要讲述的是，我们必须去理解我们的情绪，情绪只是外显的东西，我们需要了解为何在这个时刻会产生这种情绪，它表明了什么。</p><p>借用书中的一句话：<br><strong>情绪或多或少地行使着相同的目的，那就是从一个艰难的世界中逃离。</strong></p><a id="more"></a><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>被冒犯的人通过扭转局面，将冒犯者置于失利的位置，从而保全自己的面子。</p><blockquote><p>阮云：所以弱者常常发怒。</p></blockquote><p>愤怒与否首先取决于它是否符合个人的长期利益。</p><p>愤怒如果无人知晓，那么它也失去了它存在的意义。</p><p>愤怒是对外的，恐惧是对内的。</p><blockquote><p>阮云：愤怒向外传递信息，恐惧让自己提高警惕</p></blockquote><p>恐惧或多或少地与某些自动的，即本能的大脑反应有关。</p><p>情绪更倾向于有明确或者具体的对象，而心境更倾向于不确定的对象。</p><p>大多数人需要学习的窍门是，能够快速地将那些快乐的时刻扩散到我们对整个世界的感觉中去。</p><p>性冲动（libido）利比多</p><blockquote><p>阮云：人之所以诉说就是渴望认同，故而倾听是极为重要的。</p></blockquote><p>阿里斯托芬：旧时有人四手四腿两个脑袋，宙斯因为人类的傲慢而将他们劈成两半，其中一半在地球上流浪，寻找“他的另一半”</p><p>爱共有的结构，那就是一个人的自我与另一个人的自我缠绕融合在一起。</p><p>同情带有明显的行动倾向。</p><p>当悲伤欢笑幸福放在一起时，它们才是最有意义的。</p><p>悲伤涉及的是自我的缺失。</p><p>当我们感到羞愧的时候，我们所意识到的自我以及我们真实存在常常是最为痛苦的。</p><p>羞愧、内疚、窘迫 – 自我评价型的情绪</p><p>窘迫涉及复杂的自我认知，这个自我是身处众人中的自我，它会受到别人期待和判断的影响，而这种影响被自我内化。</p><p>有责任感的人才会懊悔。<br><!--加缪：《局外人》《鼠疫》《堕落》--><br>骄傲和羞愧 – 自我评价型，带有部落特征</p><p>羡慕会使人有持续不断的挫败感，使人低估自己拥有的东西，挫败感超出了能承受的范围时，羡慕 -&gt; 怨恨</p><p>最直接有效的情绪理解方式应该是将注意力集中在我们的个人体验上。</p><p>情绪或多或少地行使着相同的目的，那就是从一个艰难的世界中逃离。</p><p>一个人爱的根本就不是爱人本身，而是一种投射。或是一种满足愿望的幻影，这一投射或幻影可能和真实的血肉之躯根本就没有什么关系。</p><p>为什么我要这么做，我从中能够获得什么</p><blockquote><p>阮云：理解你的情绪</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记, 也是所有旧读书笔记的最后一篇&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本书主要讲述的是，我们必须去理解我们的情绪，情绪只是外显的东西，我们需要了解为何在这个时刻会产生这种情绪，它表明了什么。&lt;/p&gt;
&lt;p&gt;借用书中的一句话：&lt;br&gt;&lt;strong&gt;情绪或多或少地行使着相同的目的，那就是从一个艰难的世界中逃离。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《情商》摘录</title>
    <link href="http://ponder.work/2020/05/05/%E3%80%8A%E6%83%85%E5%95%86%E3%80%8B%E6%91%98%E5%BD%95/"/>
    <id>http://ponder.work/2020/05/05/%E3%80%8A%E6%83%85%E5%95%86%E3%80%8B%E6%91%98%E5%BD%95/</id>
    <published>2020-05-05T01:17:00.000Z</published>
    <updated>2020-05-08T11:02:17.714Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em></p><p>对抑郁的忧虑会使我们的抑郁更加严重</p><p>忧虑是一项认知任务，个体如果把心理资源用于忧虑，就分散了用于处理其他信息的心理资源。<br><a id="more"></a><br>社交 – 情绪同步性</p><p>就事论事 – 维护关系</p><blockquote><p>阮云：单纯地发泄情绪对于关系是没有多大帮助的，你要表达出你的诉求。</p></blockquote><p>暴力行为的入侵性记忆</p><p>创伤有应激障碍引发的大脑变化是可以消除的，可从最直接的情绪印记当中复原，治愈的途径就是再学习。</p><p>创伤复原：获得安全感，记住创伤细节并哀悼由此造成的损失，最有重新恢复正常的生活。</p><p>行为疗法与药物一样有效。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对抑郁的忧虑会使我们的抑郁更加严重&lt;/p&gt;
&lt;p&gt;忧虑是一项认知任务，个体如果把心理资源用于忧虑，就分散了用于处理其他信息的心理资源。&lt;br&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《历史的先声》读书笔记</title>
    <link href="http://ponder.work/2020/05/04/%E3%80%8A%E5%8E%86%E5%8F%B2%E7%9A%84%E5%85%88%E5%A3%B0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/05/04/%E3%80%8A%E5%8E%86%E5%8F%B2%E7%9A%84%E5%85%88%E5%A3%B0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-04T01:17:00.000Z</published>
    <updated>2020-05-08T11:02:17.713Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>记得当时在学校图书馆借了这本书，对幼稚的三观产生了巨大冲击。</p><p>书中所记内容，像是渣男语录集结，而纯情少女们也正吃这套。为何呢？漂亮话总是容易说的，成本也小，当你说骚话撩妹的时候，肯定不会想着如何兑现，先撩到手再说。</p><p>然而承诺就截然不同了，每一个承诺都得考虑其可行性及付出的成本，自然是得审慎，也就没那么吸引人了。</p><p>最终，还是还是白给了渣男的的甜言蜜语。</p><a id="more"></a><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>把一党专政化一下妆，当做民主的代用品，方法虽然巧妙，然而和人民的愿望相去十万八千里。中国人民都在睁着眼睛看：不要拿民主的代用品来欺骗我们啊？  – 《新华日报》1945年1月28日<br><!-- > 阮云：共宣传民主无非是向国民党说：“你该下台了，轮到我了”，至于后面的事情，哪管那么多。--></p><blockquote><p>阮云：政客的话听听就好，但不要往心里去，政客的一切行为都应以动机论来分析</p></blockquote><blockquote><p>阮云：历史，特别是中国近代史，很少能分出个是非曲直，基本上都是屁股决定脑袋的事。</p></blockquote><p>学校受外力干涉，教学内容受党化思想的规范都是有害的事情。  – 《新华日报》1946年2月6日社论</p><blockquote><p>阮云：当时国人并未真正了解民主与自由，或者不想去了解，他们只是为了实现自己的目标而谈民主自由，而这个目标恰恰需要一个响亮的口号而已。</p></blockquote><p>英美民主国家的人民集会，结社，是无论性质、地点、参与者的职业、性别几何，事前均无须请求警察许可，亦无须报告警察。在我国，各种人民团体之成立，无论下级团体或者上级团体，均应先经政府许可。</p><p>除了汉奸和反动派，其他任何人，都有说话的自由。</p><blockquote><p>阮云：汉奸和反动派难度就没有说话自由吗？又是由谁来给这两者盖棺定论呢</p></blockquote><p>即使说错话了也是不要紧的，国事是国家的公事，不是一党一派的私事。 – 毛泽东《在陕甘宁边区参议会的演讲》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;记得当时在学校图书馆借了这本书，对幼稚的三观产生了巨大冲击。&lt;/p&gt;
&lt;p&gt;书中所记内容，像是渣男语录集结，而纯情少女们也正吃这套。为何呢？漂亮话总是容易说的，成本也小，当你说骚话撩妹的时候，肯定不会想着如何兑现，先撩到手再说。&lt;/p&gt;
&lt;p&gt;然而承诺就截然不同了，每一个承诺都得考虑其可行性及付出的成本，自然是得审慎，也就没那么吸引人了。&lt;/p&gt;
&lt;p&gt;最终，还是还是白给了渣男的的甜言蜜语。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《历史深处的忧虑》摘录</title>
    <link href="http://ponder.work/2020/05/02/%E3%80%8A%E5%8E%86%E5%8F%B2%E6%B7%B1%E5%A4%84%E7%9A%84%E5%BF%A7%E8%99%91%E3%80%8B%E6%91%98%E5%BD%95/"/>
    <id>http://ponder.work/2020/05/02/%E3%80%8A%E5%8E%86%E5%8F%B2%E6%B7%B1%E5%A4%84%E7%9A%84%E5%BF%A7%E8%99%91%E3%80%8B%E6%91%98%E5%BD%95/</id>
    <published>2020-05-02T01:17:00.000Z</published>
    <updated>2020-05-08T11:02:17.712Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em></p><p>如果你追求阳光，你就躲不开身后的阴影。</p><a id="more"></a><p>美国青年在刷盘子时不会因为自己屈才而痛感命运不公，怨天怨地</p><p>华裔看不起黑人，常常只是因为黑人比他们穷；讨厌犹太人，只是嫉妒犹太人比他们更有成就感。</p><p>政府的正当权利，是要经过被治理者的同意才产生的。</p><p>必须听那些听不下去的话，“这正是我们必须为自由支付的代价”。</p><p>如果你因为害怕一个不自由的时代，因此就不给他们言论自由的话，那么这个不自由的时代已经开始了。</p><p>秩序？（没有自由的秩序不是真正的秩序）</p><p>安全还是自由，美国每天都在面对新的选择</p><blockquote><p>阮云：自由美利坚，枪击每一天</p></blockquote><p>抢不是一种工具，枪是一种权利。</p><p>权力会导致腐败，绝对的权力导致绝对的腐败。</p><p>一个人的房子就像他的城堡，当他安安静静地等待在里头的时候，他就应该安全得像一个城堡里的王子。</p><p>美国最高法院裁定，根据种族而给予优惠，几乎是与宪法精神不符的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果你追求阳光，你就躲不开身后的阴影。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《Getting Things Done》读书笔记</title>
    <link href="http://ponder.work/2020/05/01/Getting-things-done-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/05/01/Getting-things-done-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-01T13:17:00.000Z</published>
    <updated>2020-05-08T11:02:17.710Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em><br><em>老拖延症企图又又从这本书中获得救赎之道，然而这笔记也拖延了许久。</em></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Getting Things Done（GTD），是一种时间管理的方法，确切地说是事项管理的方法，通过GTD可以将所有事项管理起来，提高效率的同事，降低心智损耗，减少个人焦虑</p><a id="more"></a><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>焦虑是由于缺乏控制力，组织管理，以及缺少准备和行动不足造成的。</p><p>目的：</p><ol><li>收集所有一切需要处理的事，把它们统一置入一个脱离大脑的逻辑系统中</li><li>训练自己在接受任何“输入”的前期就作出分析和计划，以确保在任何时候，都拥有一套可以立即执行的计划</li></ol><p>价值观促使我们首先在清单上积累了大量任务</p><p>静水对石子的反应：依物体的质量和力度作出相应的反应，既不过激也不会置之不理</p><blockquote><p>阮云：物来顺应</p></blockquote><p>学会对那些承诺的事情加以控制</p><p>收集所有那些“经常唤醒你模糊记忆”的事情，然后着手计划如何一一解决掉</p><p>在大脑中不留任何事情</p><p>自下而上的工作方法</p><p>“横向”管理涉及的所有行动</p><p>通常你大脑中盘踞问题的数量与其解决效率成反比</p><p>横向管理：收集（工作篮） - 加工 - 组织管理 - 检视（至少每周一次） - 执行</p><p>确定某一时刻行动的“四标准法”</p><ol><li>情景</li><li>有多少时间</li><li>有多少精力</li><li>重要性</li></ol><p>总体检视工作的“六极四顾法”</p><ul><li>五万英尺+：人生</li><li>四万英尺：3-5年的展望</li><li>三万英尺：1-2年的目标</li><li>二万英尺：责任范围</li><li>一万英尺：当前的项目</li><li>跑道：目前的行动</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;br&gt;&lt;em&gt;老拖延症企图又又从这本书中获得救赎之道，然而这笔记也拖延了许久。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Getting Things Done（GTD），是一种时间管理的方法，确切地说是事项管理的方法，通过GTD可以将所有事项管理起来，提高效率的同事，降低心智损耗，减少个人焦虑&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="拖延症" scheme="http://ponder.work/tags/%E6%8B%96%E5%BB%B6%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>《意志力：受益一生的潜能开发工具》读书笔记</title>
    <link href="http://ponder.work/2020/04/24/%E3%80%8A%E6%84%8F%E5%BF%97%E5%8A%9B%EF%BC%9A%E5%8F%97%E7%9B%8A%E4%B8%80%E7%94%9F%E7%9A%84%E6%BD%9C%E8%83%BD%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/04/24/%E3%80%8A%E6%84%8F%E5%BF%97%E5%8A%9B%EF%BC%9A%E5%8F%97%E7%9B%8A%E4%B8%80%E7%94%9F%E7%9A%84%E6%BD%9C%E8%83%BD%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-24T13:17:00.000Z</published>
    <updated>2020-04-30T09:45:49.005Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em><br><em>老拖延症又企图从这本书中获得救赎之道，然而这笔记也拖延了许久。</em></p><p>意志力训练的关键：专注于目标，合乎道德。</p><p>意志力需要渐渐积累的</p><p>增强意志力的心态：兴趣，充沛的精力，顺其自然，理解（对事情的理性分析与接受），正直，自尊。</p><p>意志力走偏的表现与诊治：</p><ol><li>缺乏激情：规划日程，努力实现一个目标。</li><li>迟疑不决：积极乐观地看待问题，努力看到事情积极面</li></ol><p>教育的关键是：让我们的内心成为我们忠诚的朋友，而不是对立的敌人</p><a id="more"></a><p>不要一味仿效他人，那样只会讲你变成他人的影子，难以有所突破。要想有自己的看法，他就要有意识地计费新想法，开拓新思维，从而找到自己的发展之路。</p><p>不要懈怠目前从事的任何工作。</p><p>如果头脑里同时在考虑许多事情，就不要在此时下决定，因为你不可能同时既钓鱼又打猎。</p><p>意志力训练方法</p><ol><li>视觉训练：a. 以平常的步速走入房间，在房间里转一圈，然后走出房间，并记录下你刚才看到的全部物品。b. 目视前方，凝视其中一个离自己较近的物体，默数六十下以后，闭上眼睛，努力回想物体的轮廓和具体形象。c. 无论遇到谁，都要目光沉稳，态度坦然地看着对方，并让对方的一言一行全部在你的目光之中。</li><li>听觉训练：用心倾听，并记录下自己听到的所有声音，分辨其来源强度。</li><li>每天临睡前，回想一下白天见到的任何人和遇到的任何事，直到你能回忆起更多的人；你想去某个地方的时候看一下地图，闭上眼睛回忆地图上的标识。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;br&gt;&lt;em&gt;老拖延症又企图从这本书中获得救赎之道，然而这笔记也拖延了许久。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;意志力训练的关键：专注于目标，合乎道德。&lt;/p&gt;
&lt;p&gt;意志力需要渐渐积累的&lt;/p&gt;
&lt;p&gt;增强意志力的心态：兴趣，充沛的精力，顺其自然，理解（对事情的理性分析与接受），正直，自尊。&lt;/p&gt;
&lt;p&gt;意志力走偏的表现与诊治：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缺乏激情：规划日程，努力实现一个目标。&lt;/li&gt;
&lt;li&gt;迟疑不决：积极乐观地看待问题，努力看到事情积极面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;教育的关键是：让我们的内心成为我们忠诚的朋友，而不是对立的敌人&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《意志力：关于专注、自控与效率的心理学》读书笔记</title>
    <link href="http://ponder.work/2020/04/23/%E3%80%8A%E6%84%8F%E5%BF%97%E5%8A%9B%EF%BC%9A%E5%85%B3%E4%BA%8E%E4%B8%93%E6%B3%A8%E3%80%81%E8%87%AA%E6%8E%A7%E4%B8%8E%E6%95%88%E7%8E%87%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/04/23/%E3%80%8A%E6%84%8F%E5%BF%97%E5%8A%9B%EF%BC%9A%E5%85%B3%E4%BA%8E%E4%B8%93%E6%B3%A8%E3%80%81%E8%87%AA%E6%8E%A7%E4%B8%8E%E6%95%88%E7%8E%87%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-23T13:17:00.000Z</published>
    <updated>2020-04-23T13:33:40.661Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em><br><em>老拖延症企图从这本书中获得救赎之道，然而这笔记也拖延了许久。总体来说理论是很有道理的。</em></p><p>人们醒着的时候，把大约1/4的时间用来抵制欲望，每天至少4个小时。首先是食欲，其次睡欲，休闲欲，性欲，交往欲。</p><p>平均而言，用意志力抵制欲望，10次当中只有5次是成果的。</p><blockquote><p>阮云：严重高估，我大概有一次成功</p></blockquote><p>邓巴最后下结论，大脑进化得越来越大，并不是为了应付物理环境，而是为了应付社会环境。</p><p>意志力像肌肉一样，过度使用会疲劳，长期锻炼会增强。</p><p>自我损耗：人们对自己思维感受和行为调节能力减弱的过程。</p><a id="more"></a><p>压力真正做的是损耗意志力，而这会减弱情绪控制能力。</p><blockquote><p>阮云：真是感同身受，以前有段时间压力大，常常发无明业火。</p></blockquote><p>你的意志力是有限的，使用就会消耗；你从同一账户提取意志力用于各种不同任务。</p><p>为了保持自制力，吃转化为葡萄糖慢的食物（蔬果鱼肉蛋奶）</p><blockquote><p>阮云：所以穷人普遍缺乏自制力，部分原因是高碳水饮食</p></blockquote><p>互相冲突目标造成：1. 愁得多；2. 做得少； 3. 身心健康变差</p><p>为不太重要的熟人做决定消耗的意志力远少于为自己做决定。</p><p>意志力下降，偏爱做风险小的选择，比如说找借口避免、推迟决策。</p><p>折中是类别特别高级，特别困难的决策，折中能力是意志力耗尽之后第一个衰退的能力</p><blockquote><p>阮云：所以推销员让顾客疲于选择也是一种策略</p></blockquote><p>练习情绪控制不会增强你的意志力；意志力的“力量”不同于意志力的“耐力”</p><p>提升意志力的关键，集中精力改变一个习惯。</p><p>许可效应：做了好事就表现得好像有了做坏事的权利</p><blockquote><p>阮云：做了运动就喝杯奶茶奖励自己</p></blockquote><p>情绪温差：在理性，冷静的“冷温”状态，体会不到充满激情和欲望的“高温”状态有何表现。</p><blockquote><p>阮云：人的感觉中的时间并不是均匀分布的，离你近的时间会变短，最后期限是做加速运动向人而来。</p></blockquote><p>一旦用意志力把刮胡子变为习惯，刮胡子就变成了相对自动的心智过程，再也不用什么意志力。</p><p>棉花糖实验：一直盯着棉花糖的孩子迅速耗尽了意志力，分散注意力的孩子成功坚持下来。</p><p>宗教有利于增强自我控制的两个要素：意志力和行为监控。</p><p>建议无神论者寻找自己的一套神圣价值观。</p><p>零容忍是一条明线：完全戒除，任何时候都没例外，一旦遵守一条明线规则，你“现在自我”会相信“未来自我”也会遵守它。</p><p>高自尊好处：</p><ol><li>提高主动性，很可能因为它增强自信</li><li>它让人感觉良好</li></ol><p>惩罚有3个基本方向：严厉性，及时性，一致性（后两者更为重要）</p><p>费伯入眠法：忽略婴儿哭泣 – 安慰 – 走开 – 重复到入睡</p><p>进化喜欢那种能在饥荒中活下来的人，所以身体一旦有吃不饱的经历就会努力保存所有脂肪。</p><blockquote><p>阮云：所以节食减肥容易反弹</p></blockquote><p>反条件进食（去它的效应）：超过限量后大吃大喝</p><blockquote><p>阮云：破罐子破摔</p></blockquote><p>实施意向（implement intention）: 把行为自动化。实施意向要以“如果”…“那么”…形式出现， 如果x发生了，我一定会做y，利用这个技术把行为自动化，减少消费的努力</p><p>告诉自己“稍后再吃”，在心理上和现在就吃一样</p><p>损耗意志力的是斗争而不是结果</p><p>帕金森定律：有多少时间，工作就能做多久。</p><p>计划谬误：高估能力，低估所需时间。解决方法：强迫自己想过去的做法。</p><p>想做不好的事时，请尽量往后拖延。</p><p>如果你只用意志力拒绝东西，那么它就成了残忍讨厌的防守工具。但是当你用意志力获得东西，你就能从最枯燥的任务中体会到乐趣。</p><blockquote><p>阮云：所以做苦行僧不如，得到应得的奖励。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;br&gt;&lt;em&gt;老拖延症企图从这本书中获得救赎之道，然而这笔记也拖延了许久。总体来说理论是很有道理的。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;人们醒着的时候，把大约1/4的时间用来抵制欲望，每天至少4个小时。首先是食欲，其次睡欲，休闲欲，性欲，交往欲。&lt;/p&gt;
&lt;p&gt;平均而言，用意志力抵制欲望，10次当中只有5次是成果的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;阮云：严重高估，我大概有一次成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;邓巴最后下结论，大脑进化得越来越大，并不是为了应付物理环境，而是为了应付社会环境。&lt;/p&gt;
&lt;p&gt;意志力像肌肉一样，过度使用会疲劳，长期锻炼会增强。&lt;/p&gt;
&lt;p&gt;自我损耗：人们对自己思维感受和行为调节能力减弱的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《自我实现的人》读书笔记</title>
    <link href="http://ponder.work/2020/04/19/%E3%80%8A%E8%87%AA%E6%88%91%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/04/19/%E3%80%8A%E8%87%AA%E6%88%91%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-19T13:17:00.000Z</published>
    <updated>2020-04-23T13:43:44.170Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em></p><p>自我实现：充分利用和开发天资，能力，潜能。较少地受愿望、欲望、焦虑、恐惧的影响；或较少地受性格决定的乐观或悲观倾向的影响，对未来的预测更加准确。</p><p>自我实现者更倾向于领悟实际的存在而不是他们所属文化群的愿望、恐惧以及理论或信仰。</p><p>自我实现者的动作是发展个性，成熟发展。</p><p>自我实现者受自己的个性原则，而不是社会原则支配。被视为道德、伦理和价值的许多东西，可能是一般人普遍心理病态的产物。</p><a id="more"></a><p>两类自我实现者：</p><ol><li>很少有超越性体验</li><li>看重超越性体验</li></ol><p>无条件的积极关怀——有效心理治疗的必要先决条</p><p>处于高峰体验的人更受精神规律支配</p><p>迈向自我实现：当面对一杯酒，不要在意它的价值抑或是标志仅以它作为酒自身来评判它，倾听你自身的声音。</p><p>拿不准时要诚实，对自己诚实比对他人诚实重要得多。</p><p>每一次承担责任，都是一次自我实现。</p><p>自我实现是努力做好自己想做的东西。</p><p>识别防卫心理，寻求勇气来抛弃它们。</p><p>在创造力激发阶段，创造者只生活在此时此刻。</p><blockquote><p>阮云：这就是佛家所说的当下，或者说心流。</p></blockquote><p>忘我精神是发现人之真正本体，自我以及真实深刻的本质的途径。</p><p>约拿情节：害怕成功，对自己成长的逃避。敬慕成功的人，同时感到自惭形秽，嫉妒。</p><p>投射心理：我们感到别人有意使我们难堪，似乎我们成为靶子。</p><p>对于最高和最好事物的畏惧是固有的，是合理的。</p><blockquote><p>阮云：所以女神求而不得。</p></blockquote><p>谦卑与骄傲之间恰如其分的整合对于创造性工作是绝对必要的。</p><p>任何需要只要是真正地被满足，就会有助于性格的形成。<br>满足的层次：生存 - 安全感 - 归属 - 爱 - 自尊</p><p>越是高级的需要，对于维持纯粹的生存也就越不迫切。其满足越能更长久地推迟，并且，这种需要也越容易永远地消失。</p><p>高级需要的满足能引起更深刻的幸福感。</p><p>心理治疗不能止住饥饿（低级需要）</p><p>牢骚的水平可以用来表示他的生活水平的动机层次。</p><p>我决不应期待牢骚的停止，只应期待它们会变得越来越高级。</p><p>日常生活中的一般欲望，通常是达到目的的手段而非目的本身。</p><blockquote><p>阮云：比如想要一个游戏机，其实要的是玩游戏带来的满足感</p></blockquote><p>神经病症两种: </p><ol><li>需求的扭曲（代偿）</li><li>防止进一步伤害（防卫）</li></ol><p>治疗：帮助人们回到自我实现的轨道上来</p><p>提供所有必要的原料，退至一边，让机体自己表达愿望、要求，自己进行选择。</p><p>健康的人靠内在的法则而不是外界的压力生活。</p><p>成长性动机：为了长远目标保持平衡<br>匮乏性动机：降低竞争恢复平衡</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;自我实现：充分利用和开发天资，能力，潜能。较少地受愿望、欲望、焦虑、恐惧的影响；或较少地受性格决定的乐观或悲观倾向的影响，对未来的预测更加准确。&lt;/p&gt;
&lt;p&gt;自我实现者更倾向于领悟实际的存在而不是他们所属文化群的愿望、恐惧以及理论或信仰。&lt;/p&gt;
&lt;p&gt;自我实现者的动作是发展个性，成熟发展。&lt;/p&gt;
&lt;p&gt;自我实现者受自己的个性原则，而不是社会原则支配。被视为道德、伦理和价值的许多东西，可能是一般人普遍心理病态的产物。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>在Java环境中使用PMML执行xgboost模型</title>
    <link href="http://ponder.work/2020/04/10/convent-xgboost-model-to-pmml-guide/"/>
    <id>http://ponder.work/2020/04/10/convent-xgboost-model-to-pmml-guide/</id>
    <published>2020-04-10T13:48:00.000Z</published>
    <updated>2020-04-30T04:10:22.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>最近有个需求, 在Java环境环境运行xbgboost模型, 查询资料后发现PMML可以解决这个问题.</p><p>PMML是数据挖掘的一种通用的规范，它用统一的XML格式来描述我们生成的机器学习模型。这样无论你的模型是sklearn,R还是Spark MLlib生成的，我们都可以将其转化为标准的XML格式来存储。当我们需要将这个PMML的模型用于部署的时候，可以使用目标环境的解析PMML模型的库来加载模型，并做预测。</p><p>可以看出，要使用PMML，需要两步的工作:</p><ul><li>第一块是将离线训练得到的模型转化为PMML模型文件</li><li>第二块是将PMML模型文件载入在线预测环境，进行预测</li></ul><a id="more"></a><h2 id="模型转PMML"><a href="#模型转PMML" class="headerlink" title="模型转PMML"></a>模型转PMML</h2><h3 id="sklearn2pmml"><a href="#sklearn2pmml" class="headerlink" title="sklearn2pmml"></a>sklearn2pmml</h3><p>常见的方法是用<code>sklearn2pmml</code>, 主要思路是将Booster模式转为<code>Scikit-Learn Wrapper interface</code>的<code>XGBModel</code>, 然后再使用<code>PMMLPipeline</code>保存为PMML模型文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn_pandas <span class="keyword">import</span> DataFrameMapper</span><br><span class="line"><span class="keyword">from</span> sklearn2pmml <span class="keyword">import</span> PMMLPipeline, sklearn2pmml</span><br><span class="line"></span><br><span class="line">FILE = <span class="string">'demo.model'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(file)</span>:</span></span><br><span class="line">    mod = xgb.XGBModel()</span><br><span class="line">    mod.load_model(file)</span><br><span class="line">    pipe = PMMLPipeline([</span><br><span class="line">        (<span class="string">"classifier"</span>, mod),</span><br><span class="line">    ])</span><br><span class="line">    <span class="comment"># pipe.configure(ntree_limit=999)</span></span><br><span class="line">    sklearn2pmml(pipe, file + <span class="string">'.pmml'</span>, with_repr=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">convert(FILE)</span><br></pre></td></tr></table></figure><p>使用这种方法, 可能会出现因为模型包含中文信息导致转换失败<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Standard output <span class="keyword">is</span> empty</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"&lt;stdin&gt;"</span>, <span class="literal">line</span> <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/Users/ruan/.pyenv/versions/2.7.16/lib/python2.7/site-packages/sklearn2pmml/__init__.py"</span>, <span class="literal">line</span> <span class="number">262</span>, <span class="keyword">in</span> sklearn2pmml</span><br><span class="line">    print(<span class="string">"Standard error:\n&#123;0&#125;"</span>.format(_decode(<span class="literal">error</span>, java_encoding)))</span><br><span class="line">UnicodeEncodeError: <span class="symbol">'ascii</span>' codec can<span class="symbol">'t</span> encode <span class="built_in">character</span> u'\u6708' <span class="keyword">in</span> position <span class="number">1</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">128</span>)</span><br><span class="line"><span class="symbol">'ascii</span>' codec can<span class="symbol">'t</span> encode <span class="built_in">character</span> u'\u6708' <span class="keyword">in</span> position <span class="number">1</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">128</span>)</span><br></pre></td></tr></table></figure></p><h3 id="jpmml-xgboost"><a href="#jpmml-xgboost" class="headerlink" title="jpmml-xgboost"></a>jpmml-xgboost</h3><p>也可以<a href="https://github.com/jpmml/jpmml-xgboost" target="_blank" rel="noopener">jpmml-xgboost</a>工具, 将xgboost模型直接转换为PMML</p><p>注意这里的模型文件, 需要是通过<code>xgboost.Booster.save_model</code>方法保存的.</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/jpmml/jpmml-xgboost/releases/download/1.3.15/jpmml-xgboost-executable-1.3.15.jar</span><br></pre></td></tr></table></figure><h4 id="生成fmap特征映射文件"><a href="#生成fmap特征映射文件" class="headerlink" title="生成fmap特征映射文件"></a>生成fmap特征映射文件</h4><p>fmap文件的每行的格式是: <code>特征索引\t特征名称\tq</code><br>特征名称可以随意命名, 在调用PMML预测时会用到</p><p>例如: fmap.txt<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>fea0q</span><br><span class="line"><span class="number">1</span>fea1q</span><br><span class="line"><span class="number">2</span>fea2q</span><br><span class="line"><span class="number">3</span>fea3q</span><br><span class="line"><span class="number">4</span>fea4q</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -jar jpmml-xgboost-executable-1.3.15.jar \</span><br><span class="line">--model-input demo.model \  # 输入</span><br><span class="line">--pmml-output demo.model.pmml \  # 输出</span><br><span class="line">--fmap-input fmap.txt \  # 特征映射文件</span><br><span class="line">--missing-value -1 \   # 指定模型缺失值</span><br></pre></td></tr></table></figure><h2 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h2><h3 id="python环境比较模型结果"><a href="#python环境比较模型结果" class="headerlink" title="python环境比较模型结果"></a>python环境比较模型结果</h3><p>python可以使用<code>pypmml</code>库, 测试我们转换好的PMML, 并和原始模型进行分数比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pypmml <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">xgb_mod = xgb.Booster(model_file=<span class="string">'demo.model'</span>)</span><br><span class="line">pmml_mod = Model.load(<span class="string">'demo.model.pmml'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># float分数比较</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eq</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> abs(a - b) &lt; <span class="number">0.00001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xgboost预测</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(mod, data)</span>:</span></span><br><span class="line">    fea = np.asarray(data, dtype=np.float64).reshape([<span class="number">1</span>, <span class="number">-1</span>])</span><br><span class="line">    dtest = xgb.DMatrix(fea, missing=np.float64(<span class="number">-1.0</span>))</span><br><span class="line">    <span class="keyword">return</span> mod.predict(dtest)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># pmml预测</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pmml_predict</span><span class="params">(mod, data)</span>:</span></span><br><span class="line">    fea = &#123;<span class="string">"fea&#123;&#125;"</span>.format(idx): elem <span class="keyword">for</span> (idx, elem) <span class="keyword">in</span>  enumerate(data)&#125;</span><br><span class="line">    <span class="keyword">return</span> mod.predict(fea)[<span class="string">'probability(1)'</span>]</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">a, b = predict(xgb_mod, data), pmml_predict(pmml_mod, data)</span><br><span class="line"><span class="keyword">assert</span> eq(a, b)</span><br></pre></td></tr></table></figure><h3 id="Java环境执行"><a href="#Java环境执行" class="headerlink" title="Java环境执行"></a>Java环境执行</h3><p>java环境执行, 需要用到<code>pmml-evaluator</code>和<code>pmml-evaluator-extension</code>库</p><p>具体代码参考 <a href="https://www.cnblogs.com/pinard/p/9220199.html" target="_blank" rel="noopener">https://www.cnblogs.com/pinard/p/9220199.html</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/pinard/p/9220199.html" target="_blank" rel="noopener">https://www.cnblogs.com/pinard/p/9220199.html</a></li><li><a href="https://blog.csdn.net/yueguanghaidao/article/details/91892549" target="_blank" rel="noopener">https://blog.csdn.net/yueguanghaidao/article/details/91892549</a></li><li><a href="https://github.com/jpmml/jpmml-xgboost" target="_blank" rel="noopener">https://github.com/jpmml/jpmml-xgboost</a></li><li><a href="https://yao544303.github.io/2018/07/11/sklearn-PMML/" target="_blank" rel="noopener">https://yao544303.github.io/2018/07/11/sklearn-PMML/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;最近有个需求, 在Java环境环境运行xbgboost模型, 查询资料后发现PMML可以解决这个问题.&lt;/p&gt;
&lt;p&gt;PMML是数据挖掘的一种通用的规范，它用统一的XML格式来描述我们生成的机器学习模型。这样无论你的模型是sklearn,R还是Spark MLlib生成的，我们都可以将其转化为标准的XML格式来存储。当我们需要将这个PMML的模型用于部署的时候，可以使用目标环境的解析PMML模型的库来加载模型，并做预测。&lt;/p&gt;
&lt;p&gt;可以看出，要使用PMML，需要两步的工作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一块是将离线训练得到的模型转化为PMML模型文件&lt;/li&gt;
&lt;li&gt;第二块是将PMML模型文件载入在线预测环境，进行预测&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="机器学习" scheme="http://ponder.work/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java" scheme="http://ponder.work/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《怪诞行为学2》读书笔记</title>
    <link href="http://ponder.work/2020/04/10/%E3%80%8A%E6%80%AA%E8%AF%9E%E8%A1%8C%E4%B8%BA%E5%AD%A62%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/04/10/%E3%80%8A%E6%80%AA%E8%AF%9E%E8%A1%8C%E4%B8%BA%E5%AD%A62%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-10T13:17:00.000Z</published>
    <updated>2020-04-11T08:35:34.572Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em><br><em>本书解析一系列不合常理的行为, 分析背后的原因. 难度较小, 属于入门读物</em></p><p>发放高额奖金对简单机械操作类工作可以提高成绩, 如果需要动脑, 则适得其反.</p><!--薪水与工作成果哪个更重要?--><!--"反寄生", 动物不愿不劳而食--><p>如果你找的人喜欢某一事物，你把他们放在有意义的工作条件下，他们从这个活动中得到的快乐会成为影响他们努力程度的主要动力。</p><p>相反，如果你把有同样热情和欲望的人放到无意义的工作条件下，就非常容易扼杀这项活动在他们心中引发的快乐。</p><p>劳动异化:</p><ol><li>劳动者同自己的劳动产品相异化。</li><li>劳动者同自己的劳动活动相异化。</li><li>人同自己的类本质相异化，即人同自由自觉的活动及其创造的对象世界相异化。</li><li>人同人相异化。因为当人同自己的劳动产品、自己的劳动活动以及自己的类本质相对立的时候，也必然同他人相对立。</li></ol><a id="more"></a><p>“孩子是自己的好”效应: 如果不是我发明的, 那就没什么价值.</p><p>惩罚冲动: 这一切说明实行报复—即使需要付出代价也要报复，这种欲望是有生物学基础的，而且这种行为事实上能获得快感（或者起码引发类似快感的反应）</p><p>快感适应: 这种情绪上的逐渐稳固现象—原有的正面感觉淡化，负面感觉也减弱—我们把这一过程称做快感适应。</p><p>中断厌恶的体验感是有害的, 中断愉悦感的体验过程有益.</p><p>真正的进步, 与真正的愉悦一样, 来自冒险和对不同事物的尝试.</p><p>我们的适应过程, 一定程度上受周围环境影响.</p><p>我们一旦感情用事, 救会做出短期决定, 而它却会改变我们很多的长期决定.</p><p>禀赋效应: 是指当个人一旦拥有某项物品，那么他对该物品价值的评价要比未拥有之前大大增加。</p><p>损失厌恶是一个简单的概念，人们失去自认为是属于自己的东西时会产生痛苦—比如钱—而这一痛苦要大于得到同样数量的钱所产生的愉悦感。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;br&gt;&lt;em&gt;本书解析一系列不合常理的行为, 分析背后的原因. 难度较小, 属于入门读物&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;发放高额奖金对简单机械操作类工作可以提高成绩, 如果需要动脑, 则适得其反.&lt;/p&gt;
&lt;!--薪水与工作成果哪个更重要?--&gt;
&lt;!--&quot;反寄生&quot;, 动物不愿不劳而食--&gt;
&lt;p&gt;如果你找的人喜欢某一事物，你把他们放在有意义的工作条件下，他们从这个活动中得到的快乐会成为影响他们努力程度的主要动力。&lt;/p&gt;
&lt;p&gt;相反，如果你把有同样热情和欲望的人放到无意义的工作条件下，就非常容易扼杀这项活动在他们心中引发的快乐。&lt;/p&gt;
&lt;p&gt;劳动异化:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;劳动者同自己的劳动产品相异化。&lt;/li&gt;
&lt;li&gt;劳动者同自己的劳动活动相异化。&lt;/li&gt;
&lt;li&gt;人同自己的类本质相异化，即人同自由自觉的活动及其创造的对象世界相异化。&lt;/li&gt;
&lt;li&gt;人同人相异化。因为当人同自己的劳动产品、自己的劳动活动以及自己的类本质相对立的时候，也必然同他人相对立。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《少有人走的路》读书笔记</title>
    <link href="http://ponder.work/2020/03/29/%E3%80%8A%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/03/29/%E3%80%8A%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-29T13:17:00.000Z</published>
    <updated>2020-03-30T02:07:09.007Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em></p><p>放弃人生的某些东西，一定会给心灵带来痛苦。</p><p>从生理上决定了人是目光短浅的，因为离你最近的东西看起来总是比较大。</p><p>完全接受痛苦，在某种意义上痛苦就不再存在。</p><a id="more"></a><p>在全知全能的状态下做决定，远比在一知半解的状态下，要更痛苦。</p><p>为了放弃，首先必须拥有某种事物。你不能放弃从来没有的事物。</p><p>自律的四种原则：推迟满足感，承担责任，尊重事实，保持平衡。</p><p>坠入情网，意味着自我界限的某一部分突然崩溃，使我们的“自我”与他人合而为一。</p><p>坠入情网是人类基因对于人类理性的征服。</p><p>真正爱的本质之一，就是希望对方拥有独立自主的人格。</p><p>因为缺乏安全感，不能推迟满足感</p><blockquote><p>阮云：所以过度享乐，放纵，寻找作弊器</p></blockquote><p>缺乏耐心，拖延症其实是同一样东西</p><p>问题没有消失，它们仍继续存在，它们是妨碍心灵成长的永远的障碍。</p><p>坚守过时的观念，对现实漠然处之，称之为“移情”。</p><p>生活在封闭的系统里 —— 就像是单间牢房，我们反复呼吸自己释放的恶臭空气。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;放弃人生的某些东西，一定会给心灵带来痛苦。&lt;/p&gt;
&lt;p&gt;从生理上决定了人是目光短浅的，因为离你最近的东西看起来总是比较大。&lt;/p&gt;
&lt;p&gt;完全接受痛苦，在某种意义上痛苦就不再存在。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《十万小时天才理论》摘录</title>
    <link href="http://ponder.work/2020/03/29/%E3%80%8A%E5%8D%81%E4%B8%87%E5%B0%8F%E6%97%B6%E5%A4%A9%E6%89%8D%E7%90%86%E8%AE%BA%E3%80%8B%E6%91%98%E5%BD%95/"/>
    <id>http://ponder.work/2020/03/29/%E3%80%8A%E5%8D%81%E4%B8%87%E5%B0%8F%E6%97%B6%E5%A4%A9%E6%89%8D%E7%90%86%E8%AE%BA%E3%80%8B%E6%91%98%E5%BD%95/</id>
    <published>2020-03-29T12:37:00.000Z</published>
    <updated>2020-03-30T02:07:09.006Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em></p><p>精深练习：朝着既定目标挣扎前进，挑战自己的能力极限，不断放错，这让你更聪明</p><p>设定一个稍微超过自己现有能力的目标，盲目受挫毫无帮助，实现目标才能突破原有水平。</p><p>专业选手与普通人之间的差别是懂这种语言与不懂的区别</p><a id="more"></a><p>精深练习</p><ol><li>组块化：整体了解；分解成基础组块；慢动作练习，加速，了解内在结构</li><li>重复练习</li><li>尝试体会</li></ol><p>练习就是每天弹奏同样的音符，人类基本的姿态 —— 为一个想法努力，为你渴望的伟大成就努力争取，然后感觉它与你失之交臂。</p><p>激情的工作原理：是那些让我们意识到“我就想成为那样的人”的时刻。</p><p>激情的原始信号：未来归属感；不活不再安全；稀缺性</p><p>激情不是为遵守规则而存在的，它的存在只是为了工作，为了给自己选择的任务提供能量。</p><p>人才温床：肯定努力的价值，以及缓慢的进步，而不是天生的才华和智慧。</p><p>良好的性格是在外而内的，而且可以由动机和练习综合创造。</p><p><strong>不要期望一下子取得大幅度的进步</strong>，试着每天进步一小点，这是必经之路，而一旦开始进步，就会持续进步。</p><p>髓鞘质回路不仅需要精深练习，也需要激情。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;精深练习：朝着既定目标挣扎前进，挑战自己的能力极限，不断放错，这让你更聪明&lt;/p&gt;
&lt;p&gt;设定一个稍微超过自己现有能力的目标，盲目受挫毫无帮助，实现目标才能突破原有水平。&lt;/p&gt;
&lt;p&gt;专业选手与普通人之间的差别是懂这种语言与不懂的区别&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《可乐牛奶经济学》摘录</title>
    <link href="http://ponder.work/2020/03/29/%E3%80%8A%E5%8F%AF%E4%B9%90%E7%89%9B%E5%A5%B6%E7%BB%8F%E6%B5%8E%E5%AD%A6%E3%80%8B%E6%91%98%E5%BD%95/"/>
    <id>http://ponder.work/2020/03/29/%E3%80%8A%E5%8F%AF%E4%B9%90%E7%89%9B%E5%A5%B6%E7%BB%8F%E6%B5%8E%E5%AD%A6%E3%80%8B%E6%91%98%E5%BD%95/</id>
    <published>2020-03-29T08:37:00.000Z</published>
    <updated>2020-03-30T02:07:09.006Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记, 该书是通俗的经济学读物</em></p><p>“让钱花得物有所值”，只应该发生在交易之前</p><p>只要边际收益大于边际成本，我们就应该提高进行此事的程度</p><p>自愿前提下发生的交换活动会让所有的参与者生活质量变好。</p><a id="more"></a><p>在经济活动中药充分利用信息不对称</p><p>人们对消费品的适应性比人生体验要快得多</p><blockquote><p>阮云：失败是有概率的，但当失败发生在你身上时，对于你来说它就是唯一</p></blockquote><p>锚定效应</p><blockquote><p>阮云：其实就是被带到沟里了</p></blockquote><p>光晕效应</p><blockquote><p>阮云：情人眼里出西施</p></blockquote><p>若其他投入固定，而不断增加一种可变投入的数量，则产出的增量最终必然递减。</p><p>确保分配给生成活动的下一单位投入有最高的边际产量，规模收益递增</p><p>完全竞争的四大条件：</p><ol><li>在完全竞争市场销售标准化产品</li><li>企业是价格接受者</li><li>自由进入和退出</li><li>企业和消费者掌握完全信息</li></ol><p>面对需求的定价弹性</p><p>只有当买家之间无法进行交易时，价格歧视才可行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记, 该书是通俗的经济学读物&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;“让钱花得物有所值”，只应该发生在交易之前&lt;/p&gt;
&lt;p&gt;只要边际收益大于边际成本，我们就应该提高进行此事的程度&lt;/p&gt;
&lt;p&gt;自愿前提下发生的交换活动会让所有的参与者生活质量变好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="经济学" scheme="http://ponder.work/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《可乐牛奶经济学3》摘录</title>
    <link href="http://ponder.work/2020/03/29/%E3%80%8A%E5%8F%AF%E4%B9%90%E7%89%9B%E5%A5%B6%E7%BB%8F%E6%B5%8E%E5%AD%A63%E3%80%8B%E6%91%98%E5%BD%95/"/>
    <id>http://ponder.work/2020/03/29/%E3%80%8A%E5%8F%AF%E4%B9%90%E7%89%9B%E5%A5%B6%E7%BB%8F%E6%B5%8E%E5%AD%A63%E3%80%8B%E6%91%98%E5%BD%95/</id>
    <published>2020-03-29T08:17:00.000Z</published>
    <updated>2020-03-30T02:07:09.006Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记, 该书是通俗的经济学读物</em></p><p>若奖励主要取决于绝对绩效，个人选择的确有极高效率，可是若奖励取决于相对绩效，看不见的手就会失效。</p><p>负外部性：你收益的成本由别人承担（常使看不见的手失效）</p><a id="more"></a><p>理性的绑匪的需求来自受害者家人的支付能力</p><p>倘若商品的价格低于成本，人们就会浪费。</p><p>一旦文化流行到某个限度，没有这件事会带来明显的社会成本。</p><p>数百万人口的国家平均分配国民收入，意味着一个人不工作生活水准不会下跌，最后所有人都不工作了。</p><p>人们觉得自己需要怎样的房子，取决于周围的人有什么样的房子</p><blockquote><p>阮云：互联网拓宽了周围的范围</p></blockquote><p>瀑布效应：自己有钱，显得别人穷了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记, 该书是通俗的经济学读物&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;若奖励主要取决于绝对绩效，个人选择的确有极高效率，可是若奖励取决于相对绩效，看不见的手就会失效。&lt;/p&gt;
&lt;p&gt;负外部性：你收益的成本由别人承担（常使看不见的手失效）&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="经济学" scheme="http://ponder.work/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《美国大城市的死与生》摘录</title>
    <link href="http://ponder.work/2020/03/29/%E3%80%8A%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%9F%8E%E5%B8%82%E7%9A%84%E6%AD%BB%E4%B8%8E%E7%94%9F%E3%80%8B%E6%91%98%E5%BD%95/"/>
    <id>http://ponder.work/2020/03/29/%E3%80%8A%E7%BE%8E%E5%9B%BD%E5%A4%A7%E5%9F%8E%E5%B8%82%E7%9A%84%E6%AD%BB%E4%B8%8E%E7%94%9F%E3%80%8B%E6%91%98%E5%BD%95/</id>
    <published>2020-03-29T07:17:00.000Z</published>
    <updated>2020-03-30T02:07:09.007Z</updated>
    
    <content type="html"><![CDATA[<p><em>补录，笔记太过久远，原文已然忘记。</em></p><p>有一种东西比公开的丑陋和混乱还要恶劣，那就是戴着一副虚伪面具，假装秩序井然，其实质是视而不见或压抑在挣扎中的要求给予关注的真实的秩序。</p><a id="more"></a><p>城市公共区域的安宁，不是主要由警察来维持的，它主要是由一个互相关联的，非正式的网络来维持的，这是一个有自觉的抑止手段的标准网络，由人们自行产生，也由其强制执行。</p><p>保证陌生人安全的成功街区，必须具备的三个条件：</p><ol><li>公共空间与私人空间必须界限分明</li><li>必须有一些天然的眼镜盯着街道，这些眼镜属于街道的天然居住者。</li><li>人行道上必须总有行人</li></ol><p>缺少人际交流的城市街道上会出现来历不明的陌生人</p><p>如果公共人物被赋予过多的负担，他们发挥的效用会急剧下降。</p><p>我们在理解城市的行为和了解相关城市的有用信息时，应该观察实际发生的事情，而不是进行虚无缥缈的遐想。</p><p>一般街区公园如果其周边环境从任何形式上都是功能单一，那么它在一天的大部分时间里不可避免地要成为真空区。</p><p>随着城市化进程的加快，大企业越来越大，小企业在数量上越来越多</p><p>就像一个街道不可能是自给自足的一样。一个地区也不可能是另一个地区的翻版；一个城市不是一些重复类似的城镇的集合体，一个有吸引力的地区应有自己的特性和特长。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;补录，笔记太过久远，原文已然忘记。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;有一种东西比公开的丑陋和混乱还要恶劣，那就是戴着一副虚伪面具，假装秩序井然，其实质是视而不见或压抑在挣扎中的要求给予关注的真实的秩序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
