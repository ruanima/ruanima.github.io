<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逸思杂陈</title>
  <icon>https://www.gravatar.com/avatar/071e91e4d2b41eefac3330385d124f95</icon>
  <subtitle>人类一思考，上帝就发笑。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ponder.work/"/>
  <updated>2020-09-16T13:34:12.000Z</updated>
  <id>http://ponder.work/</id>
  
  <author>
    <name>Jay.Run</name>
    <email>ruan.lj@foxmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用line_profiler分析Python程序耗时情况</title>
    <link href="http://ponder.work/2020/09/15/python-time-consuming-analysis-with-line_profiler/"/>
    <id>http://ponder.work/2020/09/15/python-time-consuming-analysis-with-line_profiler/</id>
    <published>2020-09-15T13:48:00.000Z</published>
    <updated>2020-09-16T13:34:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>最近一个同事改动了日志处理服务，服务的耗时就变大了很多，导致数据积压。<br>观察服务器的监控，发现最近一次上线后，CPU使用率大幅增加，基本处于满载状态。所以，赶紧回滚了服务，然后服务恢复正常了。<br>但是根本问题还没有找到，所以我请出了line_profiler来分析程序的具体耗时情况。</p><p><a href="https://github.com/pyutils/line_profiler" target="_blank" rel="noopener">line_profiler</a>是个代码耗时分析器，可以逐行分析代码的耗时情况。<br><a id="more"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>line_profiler包含两个部分</p><ul><li>kernprof：代码执行和耗时记录</li><li>line_profiler：耗时报告解析和展示</li></ul><p>首先，安装：<code>pip install line_profiler -U</code></p><p>给需要分析的代码加上<code>@profile</code>装饰器, <code>@profile</code>装饰器不需要被import，kernprof在运行时会注入依赖，kernprof会记录被装饰函数的耗时情况，有多个函数也可以都加上装饰器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(run_type)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=f.readline()</span><br><span class="line">    input_data = json.loads(data)</span><br><span class="line">    source = input_data.get(<span class="string">'source'</span>, <span class="string">''</span>)</span><br><span class="line">    service = input_data.get(<span class="string">'service'</span>, <span class="number">0</span>)</span><br><span class="line">    apply_no = input_data.get(<span class="string">'applyNo'</span>, <span class="number">0</span>)</span><br><span class="line">    info = input_data.get(<span class="string">'info'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    cust_no = input_data.get(<span class="string">'cust_no'</span>, <span class="number">0</span>)</span><br><span class="line">    job.run(source, service, apply_no, info, run_type)</span><br></pre></td></tr></table></figure></p><p>然后，运行代码：<code>kernprof -l service.py</code>, 统计耗时情况, 执行完成后生成耗时报告文件<code>service.py.lprof</code></p><p>最后，耗时报告解析：<code>python -m line_profiler service.py.lprof</code>，会生成可阅读的耗时报告。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>耗时报告示例<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Timer unit: 1e-06 s</span><br><span class="line"></span><br><span class="line">Total time: 4.18908 s</span><br><span class="line">File: service.py</span><br><span class="line">Function: main at line 38</span><br><span class="line"></span><br><span class="line">Line <span class="comment">#      Hits         Time  Per Hit   % Time  Line Contents</span></span><br><span class="line">==============================================================</span><br><span class="line">   <span class="number"> 38 </span>                                              @profile</span><br><span class="line">   <span class="number"> 39 </span>                                              def main(run_type):</span><br><span class="line">   <span class="number"> 40 </span>       <span class="number"> 1 </span>        45.0     45.0      0.0          with open('data.txt','r') as f:</span><br><span class="line">   <span class="number"> 41 </span>       <span class="number"> 1 </span>       517.0    517.0      0.0              data=f.readline()</span><br><span class="line">   <span class="number"> 42 </span>       <span class="number"> 1 </span>      6564.0   6564.0      0.2          input_data = json.loads(data)</span><br><span class="line">   <span class="number"> 43 </span>       <span class="number"> 1 </span>        20.0     20.0      0.0          source = input_data.get('source', '')</span><br><span class="line">   <span class="number"> 44 </span>       <span class="number"> 1 </span>         6.0      6.0      0.0          service = input_data.get('service', 0</span><br><span class="line">   <span class="number"> 45 </span>       <span class="number"> 1 </span>         5.0      5.0      0.0          apply_no = input_data.get('applyNo', </span><br><span class="line">   <span class="number"> 46 </span>       <span class="number"> 1 </span>         5.0      5.0      0.0          info = input_data.get('info', '')</span><br><span class="line">    47</span><br><span class="line">   <span class="number"> 48 </span>       <span class="number"> 1 </span>         1.0      1.0      0.0          cust_no = input_data.get('cust_no', 0)</span><br><span class="line">   <span class="number"> 49 </span>                                                  </span><br><span class="line">   <span class="number"> 50 </span>       <span class="number"> 1 </span>   4181914.0 4181914.0     99.8         job.run(source, service, apply_no, info, run_type)</span><br></pre></td></tr></table></figure></p><p>耗时报告会逐行显示代码耗时和调用情况</p><ul><li>Timer unit: 耗时单位，这里是微秒</li><li>Total time：总耗时</li><li>Line #：行号</li><li>Hits：函数被调用次数</li><li>Time：函数总耗时</li><li>Per Hit：函数每次调用耗时</li><li>% Time：耗时占比</li></ul><p>可以看到，总耗时4.18908秒，<code>job.run</code>占用了<code>99.8%</code>的时间。</p><p>接下来我们分析下<code>job.run</code>的耗时情况<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Timer unit: <span class="number">1e-06</span> s</span><br><span class="line"></span><br><span class="line">Total <span class="built_in">time</span>: <span class="number">4.16909</span> s</span><br><span class="line"><span class="keyword">File</span>: job.py</span><br><span class="line"><span class="keyword">Function</span>: <span class="keyword">inout</span> at <span class="literal">line</span> <span class="number">69</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Line</span> #      Hits         <span class="built_in">Time</span>  Per Hit   % <span class="built_in">Time</span>  <span class="literal">Line</span> Contents</span><br><span class="line">==============================================================</span><br><span class="line">    <span class="number">69</span>                                               @profile</span><br><span class="line">    <span class="number">70</span>                                               def run(self, apply_no, info, req_type, run_type):</span><br><span class="line">    ... 省略部分逻辑</span><br><span class="line">   <span class="number">112</span>         <span class="number">1</span>          <span class="number">2.0</span>      <span class="number">2.0</span>      <span class="number">0.0</span>          <span class="keyword">if</span> req_type == <span class="symbol">'credit</span>':</span><br><span class="line">   <span class="number">113</span>         <span class="number">1</span>    <span class="number">3370673.0</span> <span class="number">3370673.0</span>     <span class="number">80.8</span>              sql = db_utils.generate_sql(info1, sql, val, columns)</span><br><span class="line">   <span class="number">114</span>                                                   <span class="keyword">else</span>:</span><br><span class="line">   <span class="number">115</span>                                                       sql = db_utils.generate_sql(info1, sql, val, columns)</span><br><span class="line">   <span class="number">116</span>         <span class="number">1</span>       <span class="number">6948.0</span>   <span class="number">6948.0</span>      <span class="number">0.2</span>          safe3_db.executor(sql)</span><br></pre></td></tr></table></figure></p><p>可以看到，113行的生成SQL语句占用了80%的时间，SQL反倒不怎么耗时，显然是不正常的。</p><p>再看下<code>db_utils.generate_sql</code>函数的具体代码<br>可以发现遍历字段列表(item_list)的时候，调用了<code>get_json_value</code>，该函数每次都会调用<code>copy.deepcopy</code>。<br>众所周知，对象的深拷贝是十分消耗cpu资源的，并且这里深拷贝的次数会随着字段数的增加而线性增长。</p><p>把深拷贝行为去除后，服务耗时和cpu占用都回归到了正常水准。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_sql</span><span class="params">(info, sql, val, item_list)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    length = len(item_list)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        buf = get_json_value(info,item)</span><br><span class="line">        <span class="keyword">if</span> index &lt; length:</span><br><span class="line">            sql = sql + <span class="string">', `'</span> + str(item) + <span class="string">'`'</span></span><br><span class="line">            val = val + <span class="string">', \''</span> + MySQLdb.escape_string(str(buf)) + <span class="string">'\''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql = sql + <span class="string">', `'</span> + str(item) + <span class="string">'`) '</span></span><br><span class="line">            val = val + <span class="string">', \''</span> + MySQLdb.escape_string(str(buf)) + <span class="string">'\')'</span></span><br><span class="line">    <span class="keyword">return</span> sql + val</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json_value</span><span class="params">(js,term)</span>:</span></span><br><span class="line">    tsplit=term.split(<span class="string">'|'</span>)</span><br><span class="line">    result=<span class="string">''</span></span><br><span class="line">    buf=copy.deepcopy(js)</span><br><span class="line">    <span class="comment"># 省略逻辑代码</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;最近一个同事改动了日志处理服务，服务的耗时就变大了很多，导致数据积压。&lt;br&gt;观察服务器的监控，发现最近一次上线后，CPU使用率大幅增加，基本处于满载状态。所以，赶紧回滚了服务，然后服务恢复正常了。&lt;br&gt;但是根本问题还没有找到，所以我请出了line_profiler来分析程序的具体耗时情况。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pyutils/line_profiler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;line_profiler&lt;/a&gt;是个代码耗时分析器，可以逐行分析代码的耗时情况。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>开发Python库并发布到PyPI指南</title>
    <link href="http://ponder.work/2020/09/10/develop-python-library-and-upload-it-to-pypi-guide/"/>
    <id>http://ponder.work/2020/09/10/develop-python-library-and-upload-it-to-pypi-guide/</id>
    <published>2020-09-10T12:03:00.000Z</published>
    <updated>2020-09-16T13:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PyPI"><a href="#PyPI" class="headerlink" title="PyPI"></a>PyPI</h2><p><a href="https://pypi.org/" target="_blank" rel="noopener">PyPI</a>（英语：Python Package Index，简称PyPI）是一个用于存储Python写成的软件包的软件存储库，我们平时用pip安装的库就是来自于PyPI</p><p>而且，通过PyPI我们可以把自己写的库代码分享给别人，这也是开源的乐趣之一。<br><a id="more"></a></p><h2 id="用到的库代码"><a href="#用到的库代码" class="headerlink" title="用到的库代码"></a>用到的库代码</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── MANIFEST.<span class="keyword">in</span></span><br><span class="line">├── README.md</span><br><span class="line">├── dingtalk_log_handler</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">├── setup.py</span><br></pre></td></tr></table></figure><p>整体代码结构，其中<a href="https://github.com/ruanima/dingtalk-log-handler" target="_blank" rel="noopener">dingtalk_log_handler</a>是我写的一个用于发日志到钉钉群的库，也是这次要发布的库。</p><p>先看下库的主体代码<code>dingtalk_log_handler/__init__.py</code>, 由于功能比较简单，逻辑就都写在<code>__init__.py</code>里了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># 其他import略去</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'ruan.lj'</span></span><br><span class="line">__version__ = <span class="string">'0.0.2'</span></span><br><span class="line">__all__ = (</span><br><span class="line">    <span class="string">'OAPI_DOMAIN'</span>,</span><br><span class="line">    <span class="string">'DingTalkHandler'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">OAPI_DOMAIN = <span class="string">'oapi.dingtalk.com'</span>   <span class="comment"># dingtalk open api domain</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingdingApiError</span><span class="params">(RuntimeError)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingTalkHandler</span><span class="params">(logging.Handler)</span>:</span></span><br><span class="line">    <span class="string">"""Handler for logging message to dingtalk"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 略去逻辑代码</span></span><br></pre></td></tr></table></figure><h2 id="编写-setup-py"><a href="#编写-setup-py" class="headerlink" title="编写 setup.py"></a>编写 setup.py</h2><p>setup.py指引了打包工具如何打包我们的库，功能与类似Makefile</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"><span class="keyword">from</span> dingtalk_log_handler <span class="keyword">import</span> __author__, __version__</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the contents of your README file</span></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">this_directory = path.abspath(path.dirname(__file__))</span><br><span class="line"><span class="keyword">with</span> open(path.join(this_directory, <span class="string">'README.md'</span>), encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    long_description = f.read()</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">'dingtalk-log-handler'</span>,</span><br><span class="line">    version=__version__,</span><br><span class="line">    author=__author__,</span><br><span class="line">    author_email=<span class="string">'xxx@foxmail.com'</span>,</span><br><span class="line">    description=<span class="string">'log handler for send message to dingtalk'</span>,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">'text/markdown'</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">'Development Status :: 4 - Beta'</span>,</span><br><span class="line">        <span class="string">'Intended Audience :: Developers'</span>,</span><br><span class="line">        <span class="string">'Topic :: Software Development :: Libraries'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3'</span>,</span><br><span class="line">        <span class="comment"># 省略一下</span></span><br><span class="line">    ],</span><br><span class="line">    packages=find_packages(),</span><br><span class="line">    python_requires=<span class="string">'&gt;=3.5'</span>,</span><br><span class="line">    install_requires=[],</span><br><span class="line">    project_urls=&#123;</span><br><span class="line">        <span class="string">'Source'</span>: <span class="string">'https://github.com/ruanima/dingtalk-log-handler'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>具体打包的功能由<code>setuptools.setup</code>函数实现，我们只需要修改对应的参数即可</p><p>这些参数影响打包的行为，以及在PyPI页面上显示的信息</p><p>主要的参数说明，详细信息参考<a href="https://packaging.python.org/guides/distributing-packages-using-setuptools" target="_blank" rel="noopener">文档</a></p><ul><li>name: 库名，也就是<code>pip install xxx</code>时的名称</li><li>version: 版本，我们这里是复用了库代码里的版本号</li><li>author: 作者，同上</li><li>author_email: 作者邮箱</li><li>description: 库说明，在<code>pip search xxx</code>的时候可以看到</li><li>long_description: 库详细说明，显示在PyPI完整上，我们这里从<code>README.md</code>文件中读取具体内容</li><li>long_description: 库详细说明的格式，这里使用markdown</li><li>classifiers: 库的类别信息，<a href="https://pypi.org/classifiers/" target="_blank" rel="noopener">所有可选值参考</a></li><li>packages: 库包含的python包，通过find_packages自动添加</li><li>py_modules: 库包含的顶级Python模块，我们这里没有</li><li>python_requires: 支持的Python版本</li><li>install_requires: 依赖的其他库，格式与<code>pip freeze</code>输出的格式相同</li><li>project_urls: 项目的一些链接信息，<a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/?#project-urls" target="_blank" rel="noopener">可选值列表</a></li></ul><h2 id="编写-MANIFEST-in"><a href="#编写-MANIFEST-in" class="headerlink" title="编写 MANIFEST.in"></a>编写 MANIFEST.in</h2><p>打包时默认只会包含包代码和一些必要的文件，见<a href="https://packaging.python.org/guides/using-manifest-in/#how-files-are-included-in-an-sdist" target="_blank" rel="noopener">列表</a><br>如果要包含其他资源文件，必须编写<code>MANIFEST.in</code>来说明说明</p><p>MANIFEST.in<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> README.md</span><br><span class="line">recursive-<span class="keyword">include</span> dingtalk_log_handler *</span><br><span class="line">global-<span class="keyword">exclude</span> __pycache__</span><br><span class="line">global-<span class="keyword">exclude</span> tmp</span><br><span class="line">global-<span class="keyword">exclude</span> *.py[co]</span><br></pre></td></tr></table></figure></p><p>语法和shell的通配符语法类似</p><ul><li><code>include &lt;pattern&gt; &lt;pattern2&gt; ...</code>: 包含项目根目录匹配通配符的文件</li><li><code>recursive-include &lt;dir-pattern&gt; &lt;pattern&gt; &lt;pattern2&gt; ...</code>: 递归地包含指定目录匹配通配符的文件</li><li><code>global-exclude &lt;pattern&gt; &lt;pattern2&gt; ...</code>: 递归地排除匹配通配符的文件</li></ul><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>执行: <code>python3 setup.py sdist bdist_wheel</code></p><p>输出文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dist</span></span><br><span class="line">├── <span class="selector-tag">dingtalk-log-handler-0</span><span class="selector-class">.0</span><span class="selector-class">.2</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">└── <span class="selector-tag">dingtalk_log_handler-0</span><span class="selector-class">.0</span><span class="selector-class">.2-py3-none-any</span><span class="selector-class">.whl</span></span><br></pre></td></tr></table></figure></p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>我们可以通过<a href="https://test.pypi.org" target="_blank" rel="noopener">PyPI的测试站点</a> 来练习库文件的上传，并测试效果</p><ol><li><a href="https://test.pypi.org/account/register/" target="_blank" rel="noopener">注册账户</a> </li><li>安装上传工具：<code>pip install twine -U</code></li><li>上传文件：<code>twine upload --repository testpypi dist/*</code> </li></ol><p>熟悉流程之后，就可以换成<a href="https://pypi.org" target="_blank" rel="noopener">正式站点</a>，指定正式仓库(—repository pypi)上传文件</p><p>这样全世界的人都能看到你的库了。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>可以在<a href="https://pypi.org/project/dingtalk-log-handler/" target="_blank" rel="noopener">这里</a>找到我这次上传的库</p><p>可以看到 setup.py 文件里的很多信息会对应体现在PyPI网页上<br><img src="http://image.runjf.com/mweb/2020-09-11-15997969319299.jpg" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://packaging.python.org/guides/distributing-packages-using-setuptools" target="_blank" rel="noopener">https://packaging.python.org/guides/distributing-packages-using-setuptools</a></li><li><a href="https://packaging.python.org/guides/using-manifest-in/" target="_blank" rel="noopener">https://packaging.python.org/guides/using-manifest-in/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PyPI&quot;&gt;&lt;a href=&quot;#PyPI&quot; class=&quot;headerlink&quot; title=&quot;PyPI&quot;&gt;&lt;/a&gt;PyPI&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://pypi.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PyPI&lt;/a&gt;（英语：Python Package Index，简称PyPI）是一个用于存储Python写成的软件包的软件存储库，我们平时用pip安装的库就是来自于PyPI&lt;/p&gt;
&lt;p&gt;而且，通过PyPI我们可以把自己写的库代码分享给别人，这也是开源的乐趣之一。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="PyPI" scheme="http://ponder.work/tags/PyPI/"/>
    
  </entry>
  
  <entry>
    <title>使用SWIG实现Python调用c++</title>
    <link href="http://ponder.work/2020/08/05/python-connect-cpp-programs-with-SWIG/"/>
    <id>http://ponder.work/2020/08/05/python-connect-cpp-programs-with-SWIG/</id>
    <published>2020-08-05T12:17:00.000Z</published>
    <updated>2020-09-16T13:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<p> <strong><a href="http://www.swig.org" target="_blank" rel="noopener">SWIG</a></strong> (Simplified Wrapper and Interface Generator) 是一个开源工具，用于让C/C++的程序和库可以被其他语言调用。</p><p>支持的非常多语言，有Lua, Perl, PHP, Python, R, Ruby, C#, Java, JavaScript, Go, Scheme 等。<br><a id="more"></a></p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li>定义SWIG接口文件</li><li>生成C/C++和目标语言的包装代码</li><li>编译位置无关的C/C++包装代码和功能代码，并链接为动态库</li></ol><p><img src="http://image.runjf.com/mweb/2020-08-06-Untitled%20Diagram.svg" alt></p><h2 id="c-示例代码"><a href="#c-示例代码" class="headerlink" title="c++示例代码"></a>c++示例代码</h2><p>下面用到的C++代码</p><p>头文件<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* utils.h */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _H_UTILS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _H_UTILS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Utils();</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Float2String</span><span class="params">(<span class="keyword">float</span> Num)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>具体实现代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* utils.cpp */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils.h"</span></span></span><br><span class="line"></span><br><span class="line">Utils::Utils() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> Utils::Float2String(<span class="keyword">float</span> Num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ostringstream</span> oss;</span><br><span class="line">oss&lt;&lt;Num;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(oss.str())</span></span>;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SWIG-接口文件"><a href="#SWIG-接口文件" class="headerlink" title="SWIG 接口文件"></a>SWIG 接口文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* example.i */</span></span><br><span class="line"> %<span class="keyword">module</span> model_engine</span><br><span class="line"> %include <span class="string">"std_string.i"</span></span><br><span class="line"> %&#123;</span><br><span class="line"> <span class="comment">/* Put header files here or function declarations like below */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils.h"</span></span></span><br><span class="line"> %&#125;</span><br><span class="line"></span><br><span class="line">%include <span class="string">"utils.h"</span></span><br></pre></td></tr></table></figure><p>其中<code>%include &quot;std_string.i&quot;</code>, 实现了c++的string自动转python的str</p><h2 id="生成动态库"><a href="#生成动态库" class="headerlink" title="生成动态库"></a>生成动态库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swig -c++ -python  example.i</span><br><span class="line">g++ -O2 -fPIC -std=c++0x -c utils.cpp</span><br><span class="line">g++ -O2 -fPIC -std=c++0x -c example_wrap.cxx -I/usr/include/python3.8/</span><br><span class="line">g++ -shared utils.o example_wrap.o -o _example.so</span><br></pre></td></tr></table></figure><p>注意编译<code>example_wrap.cxx</code>时引入对应版本的python头文件，不同系统的路径可能有所不同。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> example</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ul = example.Utils()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ul.Float2String(<span class="number">1.111</span>)</span><br><span class="line"><span class="string">'1.111'</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://segmentfault.com/a/1190000013219667" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013219667</a></li><li><a href="http://www.swig.org/Doc4.0/SWIGDocumentation.html#Python" target="_blank" rel="noopener">http://www.swig.org/Doc4.0/SWIGDocumentation.html#Python</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;&lt;a href=&quot;http://www.swig.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SWIG&lt;/a&gt;&lt;/strong&gt; (Simplified Wrapper and Interface Generator) 是一个开源工具，用于让C/C++的程序和库可以被其他语言调用。&lt;/p&gt;
&lt;p&gt;支持的非常多语言，有Lua, Perl, PHP, Python, R, Ruby, C#, Java, JavaScript, Go, Scheme 等。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="SWIG" scheme="http://ponder.work/tags/SWIG/"/>
    
      <category term="c++" scheme="http://ponder.work/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>IEEE 754 与浮点数的二进制表示</title>
    <link href="http://ponder.work/2020/08/03/ieee754-floating-point-representation/"/>
    <id>http://ponder.work/2020/08/03/ieee754-floating-point-representation/</id>
    <published>2020-08-03T12:17:00.000Z</published>
    <updated>2020-09-16T13:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，浮点（英语：floating point，缩写为FP）是一种对于实数的近似值数值表现法, 类似于十进制的<a href="https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E8%AE%B0%E6%95%B0%E6%B3%95" target="_blank" rel="noopener">科学计数法</a>.<br><a id="more"></a></p><h2 id="科学记数法"><a href="#科学记数法" class="headerlink" title="科学记数法"></a>科学记数法</h2><p>在科学记数法中，一个数被写成一个”实数”与一个10的<code>n</code>次幂的积</p><script type="math/tex; mode=display">\pm a \times 10 ^ n</script><p>其中：</p><ul><li>$n$ 必须是一个整数, 可称之为指数。</li><li>$a$ 必须是<code>[1, 10)</code>区间内的实数，可称为有效数或尾数。</li></ul><p>类似的，二进制的科学计数法则是 $\pm a \times 2 ^ n$ ，不同的是 $a$ 必须是<code>[1, 2)</code>区间内的实数。</p><p>所以浮点数的二进制表示，就是用二进制位表示为 $\pm a \times 2 ^ n$ 。</p><h2 id="IEEE-754浮点数表示"><a href="#IEEE-754浮点数表示" class="headerlink" title="IEEE 754浮点数表示"></a>IEEE 754浮点数表示</h2><p>所以，我们可以将一定长度的二进制位分成三个部分，用来分别表示 $\pm$、$n$、$a$ ，而IEEE 754就是具体实现的标准。</p><p>IEEE二进制浮点数算术标准（IEEE 754）是20世纪80年代以来最广泛使用的浮点数运算标准，为许多CPU与浮点运算器所采用。</p><p>IEEE 754规定，对于32位的浮点数，最高的1位表示符号 $\pm$ 记为<code>s</code>(sign)，接着的8位表示指数 $n$ 记为<code>E</code>(exponent)，剩下的23位为有效数 $a$ 记为<code>M</code>(fraction)。</p><p>8位二进制位，能表示的256个数值，由于指数有正有负，标准规定从-127开始计数，也就是-127到128（与有符号数的实现不同），而且-127和128被用作特殊值处理，见下方<a href="#特殊值">特殊值</a>。</p><p>同时，由于M的整数部分永远是1，我们可以只表示其小数部分，记为<code>N</code>。</p><p>也就是最终可表示为 $s \times 2 ^ E \times (1+N)$ 。</p><p>具体各部分拆解如下，其中 $a_0$ 到 $a_{31}$ 对应32个二进制位的值，为<code>0</code>或者<code>1</code>。</p><script type="math/tex; mode=display">s = (-1)^{a_{0}}</script><script type="math/tex; mode=display">E = -127 + a_{1}\times 2^{7} + a_{2}\times 2^{6} + \dots + a_{8}\times2^0</script><script type="math/tex; mode=display">N = a_{9}\times 2^{-1} + a_{10}\times 2^{-2} + \dots + a_{31}\times2^{-23}</script><p>以十进制的 $-5.0$ 为例，可表示为 $-1.25 \times 2 ^ 2$。那么，s=1，N=0.25，E=2。<br>具体来说</p><script type="math/tex; mode=display">s=(-1)^1=-1</script><script type="math/tex; mode=display">E=-127 + 2^7 + 2^0 = 2</script><script type="math/tex; mode=display">N=2^{-2}=0.25</script><p><img src="http://image.runjf.com/mweb/2020-08-04-15965370742818.jpg" alt></p><h2 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h2><p>这里有三个特殊值需要指出：</p><ul><li>如果指数是0并且尾数的小数部分是0，这个数±0（和符号位相关）</li><li>如果指数的二进制位<code>全为1</code>并且尾数的小数部分是0，这个数是±∞（同样和符号位相关）</li><li>如果指数的二进制位<code>全为1</code>并且尾数的小数部分非0，这个数表示为非数（NaN）。</li></ul><p>单精度浮点数各种极值情况：</p><div class="table-container"><table><thead><tr><th>类别</th><th>正负号</th><th>实际指数</th><th>有偏移指数</th><th>指数域</th><th>尾数域</th><th>数值</th></tr></thead><tbody><tr><td>零</td><td>0</td><td>-127</td><td>0</td><td>0000 0000</td><td>000 0000 0000 0000 0000 0000</td><td>0.0</td></tr><tr><td>负零</td><td>1</td><td>-127</td><td>0</td><td>0000 0000</td><td>000 0000 0000 0000 0000 0000</td><td>−0.0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>127</td><td>0111 1111</td><td>000 0000 0000 0000 0000 0000</td><td>1.0</td></tr><tr><td>-1</td><td>1</td><td>0</td><td>127</td><td>0111 1111</td><td>000 0000 0000 0000 0000 0000</td><td>−1.0</td></tr><tr><td>最小的非规约数</td><td>*</td><td>-126</td><td>0</td><td>0000 0000</td><td>000 0000 0000 0000 0000 0001</td><td>±2−23 × 2−126 = ±2−149 ≈ ±1.4×10-45</td></tr><tr><td>中间大小的非规约数</td><td>*</td><td>-126</td><td>0</td><td>0000 0000</td><td>100 0000 0000 0000 0000 0000</td><td>±2−1 × 2−126 = ±2−127 ≈ ±5.88×10-39</td></tr><tr><td>最大的非规约数</td><td>*</td><td>-126</td><td>0</td><td>0000 0000</td><td>111 1111 1111 1111 1111 1111</td><td>±(1−2−23) × 2−126 ≈ ±1.18×10-38</td></tr><tr><td>最小的规约数</td><td>*</td><td>-126</td><td>1</td><td>0000 0001</td><td>000 0000 0000 0000 0000 0000</td><td>±2−126 ≈ ±1.18×10-38</td></tr><tr><td>最大的规约数</td><td>*</td><td>127</td><td>254</td><td>1111 1110</td><td>111 1111 1111 1111 1111 1111</td><td>±(2−2−23) × 2127 ≈ ±3.4×1038</td></tr><tr><td>正无穷</td><td>0</td><td>128</td><td>255</td><td>1111 1111</td><td>000 0000 0000 0000 0000 0000</td><td>+∞</td></tr><tr><td>负无穷</td><td>1</td><td>128</td><td>255</td><td>1111 1111</td><td>000 0000 0000 0000 0000 0000</td><td>−∞</td></tr><tr><td>NaN</td><td>*</td><td>128</td><td>255</td><td>1111 1111</td><td>non zero</td><td>NaN</td></tr><tr><td>* 符号位可以为0或1 .</td></tr></tbody></table></div><h2 id="浮点数与二进制字符串转换"><a href="#浮点数与二进制字符串转换" class="headerlink" title="浮点数与二进制字符串转换"></a>浮点数与二进制字符串转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_to_float</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(data) == <span class="number">32</span></span><br><span class="line">    sign = (<span class="number">-1</span>) ** int(data[<span class="number">0</span>])</span><br><span class="line">    exponent = <span class="number">2</span> ** (<span class="number">-127</span> + sum(int(a) * <span class="number">2</span> ** b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(data[<span class="number">1</span>:<span class="number">9</span>], range(<span class="number">7</span>, <span class="number">-1</span>, <span class="number">-1</span>))))</span><br><span class="line">    fraction = <span class="number">1</span> + sum(int(a) * <span class="number">2</span> ** b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(data[<span class="number">9</span>:], range(<span class="number">-1</span>, <span class="number">-24</span>, <span class="number">-1</span>)))</span><br><span class="line">    <span class="keyword">return</span> sign * exponent * fraction</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">float_to_binary</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> struct</span><br><span class="line">    bins = struct.pack(<span class="string">'&gt;f'</span>, data)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(<span class="string">'&#123;:0&gt;8&#125;'</span>.format(bin(i)[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> bins)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/IEEE_754</a></li><li><a href="https://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E8%AE%B0%E6%95%B0%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E8%AE%B0%E6%95%B0%E6%B3%95</a></li><li>《深入理解计算机系统》</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在计算机科学中，浮点（英语：floating point，缩写为FP）是一种对于实数的近似值数值表现法, 类似于十进制的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E8%AE%B0%E6%95%B0%E6%B3%95&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;科学计数法&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="浮点数" scheme="http://ponder.work/tags/%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>variable-precision SWAR 算法详解</title>
    <link href="http://ponder.work/2020/08/01/variable-precision-SWAR-algorithm/"/>
    <id>http://ponder.work/2020/08/01/variable-precision-SWAR-algorithm/</id>
    <published>2020-08-01T06:03:00.000Z</published>
    <updated>2020-08-01T08:47:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在学习redis源码时，发现<code>BITCOUNT</code>命令实现用到了variable-precision SWAR 算法。</p><p><code>BITCOUNT</code>命令要解决的问题：<strong>统计一个位数组中非0二进制位的数量</strong>。在数学上被称为“计算汉明重量（Hamming Weight)” </p><p>目前已知效率最好的通用算法为variable-precision SWAR 算法。<br>该算法通过一系列位移和位运算操作，可以在常数时间内计算多个字节的汉明重量，并且不需要使用任何额外的内存。<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>以下是一个处理32位长度位数组的算法实现，一共分4步。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint32_t</span> swar(<span class="keyword">uint32_t</span> i)&#123;</span><br><span class="line">    i = (i &amp; <span class="number">0x55555555</span>) + ((i&gt;&gt;<span class="number">1</span>) &amp; <span class="number">0x55555555</span>);  <span class="comment">// 步骤1</span></span><br><span class="line">    i = (i &amp; <span class="number">0x33333333</span>) + ((i&gt;&gt;<span class="number">2</span>) &amp; <span class="number">0x33333333</span>);  <span class="comment">// 步骤2</span></span><br><span class="line">    i = (i &amp; <span class="number">0x0F0F0F0F</span>) + ((i&gt;&gt;<span class="number">4</span>) &amp; <span class="number">0x0F0F0F0F</span>);  <span class="comment">// 步骤3</span></span><br><span class="line">    i = (i * <span class="number">0x01010101</span>) &gt;&gt; <span class="number">24</span>;                    <span class="comment">// 步骤4</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>这里我们以<code>i=0x12345678</code>(二进制位为<code>00010010001101000101011001111000</code>)为例，讲解算法过程<br>我们可以把i的二进制位理解成：长度为32的数组，每个元素取值区间[0,1]，每个元素正好能代表这个位是不是1.</p><p>所以，问题就可以转化为，求这个数组的和。<br>根据分治法的思想，我们可以把相邻的两个数字相加，得到长度为16的数组，每个元素取值区间[0,2]。<br>并以此类推，最终求出总和。</p><p><img src="http://image.runjf.com/mweb/2020-08-01-15962704953270.jpg" alt><br><img src="http://image.runjf.com/mweb/2020-08-01-15962705553725.jpg" alt></p><h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><p>这一步用到<code>0x55555555</code>作为掩码，其二进制表示为<code>01010101010101010101010101010101</code><br>此时i可理解为长度为32的数组，每个元素取值区间[0,1]，元素宽度1bit。</p><p>通过<code>i &amp; 0x55555555</code>运算，取得了i的奇数位置元素，存储为16个2bit整数；<br>通过<code>(i&gt;&gt;1) &amp; 0x55555555</code>运算，取得了i的偶数位置元素，存储为16个2bit整数；</p><p>两者相加，相当于16组2bit整数按位相加，问题就转化成了2bit的二进制加法。<br>由于原数组每个元素取值区间[0,1]，所以每组相加的结果会在[0,2]区间内，2bit刚好存储。<br>最终得到长度为16的数组，每个元素取值区间[0,2]。<br><img src="http://image.runjf.com/mweb/2020-08-01-15962660065367.jpg" alt></p><h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><p>这一步用到<code>0x33333333</code>作为掩码，其二进制表示为<code>00110011001100110011001100110011</code><br>此时i可理解表示为长度为16的数组，每个元素取值区间[0,2]，元素宽度2bit。</p><p>通过<code>i &amp; 0x33333333</code>运算，取得了i的奇数位置元素，存储为8个4bit整数；<br>通过<code>(i&gt;&gt;1) &amp; 0x33333333</code>运算，取得了i的偶数位置元素，存储为8个4bit整数；</p><p>两者相加，相当于8组4bit整数按位相加，问题就转化成了4bit的二进制加法。<br>由于原数组每个元素取值区间[0,2]，所以每组相加的结果会在[0,4]区间内，4bit刚好存储。<br>最终得到长度为8的数组，每个元素取值区间[0,4]。</p><h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><p>这一步用到<code>0x0F0F0F0F</code>作为掩码，其二进制表示为<code>00001111000011110000111100001111</code><br>此时i可理解表示为长度为8的数组，每个元素取值区间[0,4]，元素宽度4bit。</p><p>通过<code>i &amp; 0x0F0F0F0F</code>运算，取得了i的奇数位置元素，存储为4个8bit整数；<br>通过<code>(i&gt;&gt;1) &amp; 0x33333333</code>运算，取得了i的偶数位置元素，存储为4个8bit整数；</p><p>两者相加，相当于4组8bit整数按位相加, 问题就转化成了8bit的二进制加法。<br>由于原数组每个元素取值区间[0,4]，所以每组相加的结果会在<code>[0,8]</code>区间内，8bit足够存储。<br>最终得到长度为4的数组，每个元素取值区间[0,8]。</p><h3 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h3><p>按照上面的思路，本来应该继续将长度为4的数组转换为长度为2的数组。<br>但是这里由于4个8bit整数相加存在简便运算，就不继续往下合并了。</p><p>到这一步是时<code>i=0x02030404</code>，为了求出最终结果，我们可以想到位移的办法将每8bit取出（参考ip掩码计算），然后再依次相加。<br>最终结果也就是 <code>(i &amp; 0xFF) + ((i&gt;&gt;8) &amp; 0xFF) + ((i&gt;&gt;16) &amp; 0xFF) + ((i&gt;&gt;24) &amp; 0xFF)</code></p><p>为了理解算法里的做法，这里需要简单的数学推导<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将0x01010101转化成多项式表达</span></span><br><span class="line">          <span class="number">0x01010101</span> == <span class="number">2</span>**<span class="number">24</span> + <span class="number">2</span>**<span class="number">16</span> + <span class="number">2</span>**<span class="number">8</span> + <span class="number">2</span>**<span class="number">0</span> </span><br><span class="line"><span class="comment">// 两边同乘以i</span></span><br><span class="line">      i * <span class="number">0x01010101</span> == i * <span class="number">2</span>**<span class="number">24</span> + i * <span class="number">2</span>**<span class="number">16</span> + i * <span class="number">2</span>**<span class="number">8</span> + i * <span class="number">2</span>**<span class="number">0</span></span><br><span class="line"><span class="comment">// 2的乘方运算转化为位移运算</span></span><br><span class="line">      i * <span class="number">0x01010101</span> == (i&lt;&lt;<span class="number">24</span>) + (i&lt;&lt;<span class="number">16</span>) + (i&lt;&lt;<span class="number">8</span>) + (i&lt;&lt;<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 两边同时右移24位</span></span><br><span class="line">(i * <span class="number">0x01010101</span>)&gt;&gt;<span class="number">24</span> == ((i&lt;&lt;<span class="number">24</span>)&gt;&gt;<span class="number">24</span>) + ((i&lt;&lt;<span class="number">16</span>)&gt;&gt;<span class="number">24</span>) + ((i&lt;&lt;<span class="number">8</span>)&gt;&gt;<span class="number">24</span>) + ((i&lt;&lt;<span class="number">0</span>)&gt;&gt;<span class="number">24</span>)</span><br><span class="line"><span class="comment">// 将左移和右移合并，并考虑溢出，最终结果一致</span></span><br><span class="line">(i * <span class="number">0x01010101</span>)&gt;&gt;<span class="number">24</span> == (i &amp; <span class="number">0xFF</span>) + ((i&gt;&gt;<span class="number">8</span>) &amp; <span class="number">0xFF</span>) + ((i&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xFF</span>) + ((i&gt;&gt;<span class="number">24</span>) &amp; <span class="number">0xFF</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习redis源码时，发现&lt;code&gt;BITCOUNT&lt;/code&gt;命令实现用到了variable-precision SWAR 算法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BITCOUNT&lt;/code&gt;命令要解决的问题：&lt;strong&gt;统计一个位数组中非0二进制位的数量&lt;/strong&gt;。在数学上被称为“计算汉明重量（Hamming Weight)” &lt;/p&gt;
&lt;p&gt;目前已知效率最好的通用算法为variable-precision SWAR 算法。&lt;br&gt;该算法通过一系列位移和位运算操作，可以在常数时间内计算多个字节的汉明重量，并且不需要使用任何额外的内存。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://ponder.work/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《庄子諵哗》读书笔记</title>
    <link href="http://ponder.work/2020/08/01/%E5%BA%84%E5%AD%90%E8%AB%B5%E5%93%97-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/08/01/%E5%BA%84%E5%AD%90%E8%AB%B5%E5%93%97-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-01T02:17:00.000Z</published>
    <updated>2020-09-16T13:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>从高中接触庄子开始，就觉得太难懂了，无论原著还是翻译。直到大学发现南老师讲的这本，才算是勉强能看下去。</p><p>从14年开始，晚上时不时看一点，到现在看完，正好六年。</p><p>人生又有多少个六年呢</p><a id="more"></a><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>第一个主题，就是人生要“具见”，见地具备，就是普通讲的见解，再普通一点讲，就是眼光、思想。</p><p>物与物之间互相在变化，所以叫“物化”</p><blockquote><p>阮云：庄周化蝶，就是物化</p></blockquote><p>“野马”不是一匹马喔，“野马”就是佛经上讲的“阳焰”，太阳光的幻影，古书叫做“海市蜃楼”。</p><p>人类的见解、知识和生活经验都是“比量”，不是真实的。同样一个气候，同样一个空间，一个时间，一个颜色，因人而产生的感受各异。</p><blockquote><p>阮云：因为人和真实的世界，中间总是隔着一层感官，所以每个人的感受是不一样的。</p></blockquote><p>“循业发现”。每一个人根据他自己的生活经历、思想见解、智慧境界等，看一个东西的观念都不同。</p><blockquote><p>阮云：这也是为什么人们很难相互理解</p></blockquote><p>世味尝来浑是蜡，莫教开口向人提。</p><blockquote><p>阮云：大抵是真实而又乏味吧，而且生活的苦不要对他人讲，因为别人体会不了，徒增笑料</p></blockquote><p>依他而起，属于“比量”的境界，通过比较而产生的，都是“依他而起”</p><blockquote><p>阮云：人类的见解、知识和生活经验都是“依他而起”，这个“他”，类似佛家的本性</p></blockquote><p>以神仙丹道家学说来讲，认为生时魄在肉体生命活力中普遍存在。不经过修炼，不能和魂凝聚为一，死后魄就归沉于地。因此，魂就是鬼影，魄是鬼形。</p><p>人世间哪个是真理？哪个是是？哪个是非？哪个是黑？哪个是白？其实对与不对，都是人的“师心自用”。就是说一个人有“成见”，有主观的观念，自以为对就对，叫“师心自用”。</p><blockquote><p>阮云：人总以为自己的经验，能够放之四海，可笑啊</p></blockquote><p>会万物于己者，其惟圣人乎。</p><blockquote><p>阮云：所谓物我混而为一</p></blockquote><p>庄子说：是非观念所产生可以不可以，是从我们的主观来的，我们的认识，你认为可以就可以，你认为不可以就不可以，宇宙间没有一个真正的离开身心以外的是非观念。</p><blockquote><p>阮云：所以说，真正的客观是不存在的。</p></blockquote><p>“物固有所然，”天地万物它有它的所以然，既然宇宙形成了万物，电就是电，电通过灯时，它发亮；通过录音机收音机时，它发声。这个物体有它所以然的特别的性能。“物固有所可。”所以万物有它适宜应该的本位，有它适宜应该的立场。</p><blockquote><p>阮云：一个物有造就它的原因，自然也限制了它能适用的地方。如果这些变了，这物就变为他物了吧</p></blockquote><p>“不用而寓诸庸”呢？“庸”不是马虎，不是差不多，是“得其环中”，</p><blockquote><p>阮云：无用之用是谓大用，道家来讲是无为，佛家是随缘</p></blockquote><p>把自己的精神、聪明向一点上钻。这个“劳神明为一”的“一”，不是“道通为一”的“一”的意思，不要搞错了。只向一点上钻牛角尖，他认为自己最高明，不晓得向大同方面钻，</p><p>形而上之道无是也无非，无善也无恶，形而下之道，有是非，有善恶。</p><blockquote><p>阮云：世界万物本来应该是中性的，因为人的观念介入，而有了高下，有了分别</p></blockquote><p>“未始有封也”，并没有界线。</p><blockquote><p>阮云：物于物之间不存在界限，一直在转化</p></blockquote><p>物质文明越发达，社会越复杂，思想之混乱，是非善恶观念之复杂，都是障道的因缘</p><blockquote><p>阮云：这些就是五蕴，色受想行识。</p></blockquote><p>我再提一下全篇的宗旨，道体，宇宙万有的本体，本来是绝对、同一的。当道体起作用的时候，一切万类的现象不同，作用不同，但道体是一样的。</p><blockquote><p>阮云：一以贯之的就是道体吧</p></blockquote><p>道体是“一”的。因为大家自己的观念不同，被现象骗了，所以各家有各家的看法，儒家有儒家的看法，墨家有墨家的看法 道家有道家的看法，各种说法都不同，应用的方法也不同。因此，被现象迷住了，忘记了本来。</p><p>人要晓得“知几”，把握自己生命的重点，不“知几”，对于自己是在开玩笑，没有用</p><blockquote><p>阮云：几通机，因为物化，事物总在变动之中，所以要知晓关键时机</p></blockquote><p>不管是宗教的，哲学的、科学的、古代诸子百家的，现在的科学分门别类，都有一个大原则，一切学问与人身心性命没有关系的，它不会成立不会存在。</p><p>天地是与我同存的，万物是与我同一的，我们跟万物同样都是那个东西的一份子，并非天地就是我，也不是我就是天地，物是物，我是我，天还是天，地还是地。</p><p>佛学里的有一句名言“如人饮水，冷暖自知”，就是“圣人怀之”，到了那个程度，那个境界，“圣人”只有自己知道</p><p>“是非以不辩为解脱”，禅宗注重的行为，不完全是打坐，所以百丈禅师讲“疾病以减食为汤药”，有了病最好少吃东西，肠胃清理一下，</p><p>上古我们的老祖宗是吃狗肉的，现在广东人保持了这一习俗，上古祭祖宗都要用狗肉来祭，大约到了商、周以后，在祭祀中，才渐渐免除了狗肉这项祭品，但在某些祀典中，仍然须用草扎一个象形的狗，替代一头真的狗，这就是刍狗的来源。</p><blockquote><p>阮云：以万物为刍狗，把万物当成草扎的狗，在祭祀的时候，很庄重，把草狗当成真狗，当祭祀完，就可以扔掉了。</p></blockquote><p>“大廉不嗛”的道理，我经常说一个笑话，拿什么来比呢？拿猪来比，实际世界上最爱干净的是猪，研究生物学的都懂。你看猪一天到晚用嘴东拱西拱，人们以为猪脏，其实它最爱清洁了，脏东西一点都看不惯，看到脏东西就把它拱开，结果是越拱越脏。</p><blockquote><p>阮云：嗛通谦，真正的大廉没有谦让，并不是不谈钱。</p></blockquote><p>啮缺问：你知不知道，天地万物有一个到了最高处基本是相同的，绝对的，同一的那个东西？王倪答复：我哪里知道？换一句话说，我不知道。啮缺又问：你为什么不知道？你知不知道你那个时候你不知道的？王倪说我也不知道，我也不懂。那么啮缺就问：既然这样，宇宙万物的最高处是无知吗？王倪又说，那我也不知道。我们中国文化有一个成语，叫“一问三不知”</p><p>“吊诡”就是佛家禅宗所谓“机锋”。中国学武的有一句话：“弓在弦上，不得不发”，弓拉满了，箭在弦上，不得不发，这是“机”。彼此两个机关相对，非常锋利，很快，不可以用思想，来不及用思想</p><blockquote><p>阮云：所谓势，物理中的势能就是来自此处</p></blockquote><p>“不可思议”，最高的真理就这四个字。不可以用思想知识去推测，不可用逻辑思辩来断定。</p><p>知其不可奈何而安之若命，德之至也。</p><p>凡交近则必相靡以信，远则必忠之以言。言必或传之。</p><p>夫两喜必多溢美之言，两怒必多溢恶之言。凡溢之类妄，妄则其信之也莫，莫则传言者殃。</p><blockquote><p>阮云：所以君子之交淡如水</p></blockquote><p>克核太至，则必有不肖之心应之，而不知其然也。</p><p>我们常常看到办事的，做公务员的“迁令”。譬如我发现有跟我做事的同学，我说：“请你帮我把下面那一本书拿上来。”结果他到了下面对另一人说，“某某人，老师叫你把那本书拿上去。”这就叫“迁令”，已经不对了。做人要“不迁令”。</p><blockquote><p>阮云：然而现在企业在中层都是这种人，可笑可笑</p></blockquote><p>“美成在久，”就是我们平时所讲的，好事不在忙。成就好的事情，不是一时做得到的。坏的事情却容易成就，一成就了以往，来不及改正。所以作人处事要慎重地考虑。</p><p>“有人于此，其德天杀。与之为无方，则危吾国，与之为有方，则危吾身。</p><blockquote><p>阮云：与暴君相处，如果任由放纵他，危害国家，如果约束他，危害自身性命</p></blockquote><p>形就而入，且为颠为灭，为崩为蹶；心和而出，且为声为名，为妖为孽。</p><blockquote><p>阮云：讲得是要和光同尘，如果顺从本心，反而被认为妖孽</p></blockquote><p>汝不知夫螳螂乎？怒其臂以当车辙，不知其不胜任也，是其才之美者也。戒之，慎之，积伐而美者以犯之，几矣！</p><p>故未终其天年而中道之夭于斧斤，此材之患也。</p><p>支离其德</p><blockquote><p>阮云：支离是古人叫支离疏，长得奇形怪状的，然而却免遭各种劳役。这里讲的还是无用之用</p></blockquote><p>福轻乎羽，莫之知载。</p><blockquote><p>阮云：幸福这东西比羽毛还轻，不知道拿什么把它装起来。</p></blockquote><p>《人间世》全篇的宗旨：“世路难行”。并不是世路是不可行的，是可行的。人生要你自己善于处。那么归结起来告诉我们什么东西呢？三个字：守本份。人要守本份，在什么立场就做什么事，处什么态度。大家进了歌厅就要跟着唱歌，进了舞厅就要跟着跳舞，大家喝醉了你就要装醉，大家清醒起来你也要跟着清醒，大家都在做工你却在睡觉，那就不是疯而是蠢到极点了。</p><p>我们知道，春秋战国的文化，道跟德是分开的，道是体，就是内涵，是每个人修养学问的内涵；德是用，得了道体就能起用，即用世之道。</p><p>自其异者视之，肝胆楚越也；自其同者视之，万物皆一也。</p><p>吾所谓无情者，言人之不以好恶内伤其身，常因自然而不益生也。</p><p>尤其这一篇我们要了解什么是“命”，这个命不是算八字那个命，它在哲学的理论上叫天命，在实际的修证就是认清生命的来源。</p><p>这个“命”相当于佛学中讲的业，善的是善业，恶的是恶业，不善不恶的是无记业。</p><p>古书上的“天”字，大约概括了五类内涵：（一）天文学上物理世界的天体之天，如《周易》乾卦卦辞“天行健”的“天”。 （二）具有宗教色彩，信仰上的主宰之天，如《左传》所说的“昊天不吊”。（三）理性上的天，如《诗经》小节的“苍天苍天”。（四）心理性情上的天，如《泰誓》和《孟子》的“天视自我民视，天听自我民听”。（五）形而上的天，如《中庸》所谓“天命之谓性”。</p><p>那么这个道怎么来的呢？两个路线：一是抛弃了你的小聪明，而求那个“无知之知”的大道；另一个路线，把世间的聪明学问都通到了极点，最后归到“一无所知而无不知”，也就得道了。</p><blockquote><p>阮云：和禅宗所谓顿悟和渐修一个意思</p></blockquote><p>不要弄得像现在大学的史学系一样，自己好像比历史还高明，然后去分析历史批判历史，结果你不是历史，你是书呆子。现在研究历史同我们过去不同，我们过去研究历史，是使自己懂得如何作人做事，现在不然，现在是比历史都还要高。</p><blockquote><p>阮云：我们的历史课本常犯这种毛病，脱离时代来谈局限性</p></blockquote><p>“未死先学死，有生即杀生”，“生”就是心念一动，就要把心念通通去掉；这个“死”，不是自己吃安眠药去死，是要烦恼杂念妄想通通死光，就是杀的作用。也就是说，心中的烦恼杂念通通死光，生命的本能才会恢复，才会长生不死。</p><p>孔子讲得很彻底：“徒善不足以为敬，徒法不足以自刑”。</p><p>汉家自有制度，本以霸王道杂之</p><p>泉涸，鱼相与处于陆，相呴以湿，相濡以沫，不如相忘于江湖。与其誉尧而非桀也，不如两忘而化其道。</p><p>杀生者不死，生生者不生。其为物，无不将也，无不迎也，无不毁也，无不成也，其名为撄宁。撄宁也者，撄而后成者也。</p><p>孔子儒家所标榜的圣王之道，得了道才可以入世，“终日挥形”，他们虽然一天到晚看起来忙死了，但“神气无变”，内在修养神与气，并没有受忙碌的外界所影响。</p><p>“各有前因莫羡人”，每一个人都有各自的前因后果，你不要嫉妒羡慕人家。这些都是人生哲学的问题。</p><p>认为时代是进步的，这是站在物质文明立场上来讲。今后的人在物质的享受上，比我们现在还要进步，最后的形态，是物质文明一切一切都在进步；认为时代是退化退步的，这是站在精神文明来讲，这两种观念，必须要推论到宗教上面去。</p><p>你看其它国家的人，标榜人道，可见很不人道，所以才需要人道。</p><p>“其卧徐徐，其觉于于”，这两句话代表佛学禅宗讲的“梦觉一如”，人没有昏迷过，无所谓睡眠，睡眠也是清醒，醒了以后，也没有昏迷过，在清醒中“人生如梦”，本来是梦境，这没有什么两样。</p><blockquote><p>阮云：所谓色即是空，空即是色。</p></blockquote><p>“以己出经”，拿自己推理别人，就是儒家讲的推己及人的忠恕之道。</p><p>圣帝明王，就是动物园的园长，就养一些高明的动物。</p><blockquote><p>阮云：所以领导者并不是自己多强，是要能招到厉害的人，管好厉害的人。</p></blockquote><p>这个道理只可以悟不可以讲，讲出来就很讨厌的。</p><blockquote><p>阮云：就如鲁迅说的，“这人终究会死的”，虽然是实话，但是难听</p></blockquote><p>没有一个人会在妈妈肚子里问：我为什么要生出来？我生出来的目的是什么？没有一个人是问明白了才生出来的。所以人生就以人生为目的，本来如此，这个题目本身就是答案，还有什么好讲的！</p><p>我们人生只有十二个字：“看得破，忍不过；想得到，做不来。”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从高中接触庄子开始，就觉得太难懂了，无论原著还是翻译。直到大学发现南老师讲的这本，才算是勉强能看下去。&lt;/p&gt;
&lt;p&gt;从14年开始，晚上时不时看一点，到现在看完，正好六年。&lt;/p&gt;
&lt;p&gt;人生又有多少个六年呢&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="哲学" scheme="http://ponder.work/tags/%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>技嘉GB-BRi5H-8250黑苹果安装指南</title>
    <link href="http://ponder.work/2020/07/24/GB-BRi5H-8250-hackintosh-guide/"/>
    <id>http://ponder.work/2020/07/24/GB-BRi5H-8250-hackintosh-guide/</id>
    <published>2020-07-24T12:17:00.000Z</published>
    <updated>2020-09-16T13:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="硬件信息"><a href="#硬件信息" class="headerlink" title="硬件信息"></a>硬件信息</h2><h3 id="GB-BRi5H-8250-准系统"><a href="#GB-BRi5H-8250-准系统" class="headerlink" title="GB-BRi5H-8250 准系统"></a>GB-BRi5H-8250 准系统</h3><p><img src="http://image.runjf.com/mweb/2020-07-25-15955608894288.png" alt><br><a id="more"></a><br><img src="http://image.runjf.com/mweb/2020-07-25-15955609109238.png" alt><br><img src="http://image.runjf.com/mweb/2020-07-25-15955609232489.png" alt></p><div class="table-container"><table><thead><tr><th>硬件</th><th>规格</th></tr></thead><tbody><tr><td>尺寸</td><td>4‎6.8 mm x 112.6 mm x 119.4 mm (1.84” x 4.43” x 4.7”)</td></tr><tr><td>中央处理器</td><td>Intel® Core™ 四核 i5-8250U 3.4GHz</td></tr><tr><td>内存</td><td>内建2组SO-DIMM DDR4插槽 2400MHz 最高支持 64GB</td></tr><tr><td>有线网络</td><td>内建千兆网卡 (Intel i219V)</td></tr><tr><td>无线网卡</td><td>可扩展Intel® Dual Band Wireless-AC 3168</td></tr><tr><td>图形处理器</td><td>Intel® UHD Graphics 620</td></tr><tr><td>音频</td><td>Realtek ALC255</td></tr><tr><td>HDMI视频输出</td><td>HDMI2.0a ws HDCP 2.2 4096 x 2304 @ 60Hz</td></tr><tr><td>MiniDP视频输出</td><td>DP1.2a ws HDCP 2.2 4096 x 2304 @ 60Hz</td></tr><tr><td>扩展槽</td><td>内建1组M.2 SSD (2280) 插槽 PCIe X4 /SATA 支持Intel傲腾内存<br>1x PCIe M.2 NGFF 2230 A-E key slot 支持 WiFi+BT card</td></tr><tr><td>存储</td><td>支持 2.5 英寸 HDD/SSD, 7.0/9.5 mm (6 Gbps SATA3)</td></tr></tbody></table></div><h3 id="其他配件"><a href="#其他配件" class="headerlink" title="其他配件"></a>其他配件</h3><ul><li>内存：SEIWHALE 枭鲸笔记本内存条 DDR4 16G</li><li>硬盘：Samsung 850 EVO M.2 SATA 250G</li><li>无线网卡：DW1820A (08PKF4)</li></ul><h2 id="总体成果"><a href="#总体成果" class="headerlink" title="总体成果"></a>总体成果</h2><h3 id="正常工作项目"><a href="#正常工作项目" class="headerlink" title="正常工作项目"></a>正常工作项目</h3><ul><li>CPU，变频</li><li>显卡，硬件加速</li><li>HDMI输出，MiniDP输出，HDMI音频，双屏</li><li>蓝牙</li><li>WiFi</li><li>Handoff, Airdrop</li><li>iMessage, iCloud, Photos, Mac App Store</li><li>USB</li><li>音频接口，mic</li><li>苹果电源管理</li><li>睡眠，关机，唤醒</li></ul><h3 id="不正常工作项目"><a href="#不正常工作项目" class="headerlink" title="不正常工作项目"></a>不正常工作项目</h3><ul><li>系统偏好设置-节能（错误识别为有电池）<br>  <img src="http://image.runjf.com/mweb/2020-07-25-15956404046858.jpg" alt></li><li>HDMI睡眠唤醒，有时屏幕黑屏，需要按一下屏幕开关；DP睡眠正常</li><li>显示器喇叭开机时不正常，拔插接口后或者开关屏幕电源后正常。</li></ul><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p>安装过程大部分参考<a href="https://dortania.github.io/OpenCore-Install-Guide/" target="_blank" rel="noopener">dortania</a>，这里采用的是双系统安装方法。</p><p>先安装Windows10, 然后在Windows10下配置OpenCore，制作macOS安装镜像。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>预先下载的工具软件</p><ul><li><a href="http://www.wepe.com.cn/download.html" target="_blank" rel="noopener">微PE工具箱V2.1</a>：Windows系统安装工具</li><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO/" target="_blank" rel="noopener">Windows10镜像</a></li><li><a href="http://www.pc6.com/mac/691696.html" target="_blank" rel="noopener">Hackintool</a>: 黑苹果多功能工具</li><li><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python</a>: ProperTree等软件的依赖</li><li><a href="https://www.diskgenius.cn/download.php" target="_blank" rel="noopener">DiskGenius</a>: 磁盘分区</li><li><a href="https://bootice.softonic.cn/?ex=MOB-615.2" target="_blank" rel="noopener">bootice</a>: uefi引导编辑</li><li><a href="https://github.com/corpnewt/ProperTree" target="_blank" rel="noopener">ProperTree</a>: 编辑OpenCore配置</li><li><a href="https://github.com/corpnewt/GenSMBIOS" target="_blank" rel="noopener">GenSMBIOS</a>：用于生成苹果设备序列号信息</li><li><a href="https://github.com/acidanthera/OpenCorePkg/releases" target="_blank" rel="noopener">OpenCorePkg</a>: OpenCore引导文件，注意下载release版本</li><li><a href="https://github.com/corpnewt/gibMacOS" target="_blank" rel="noopener">gibMacOS</a>: 下载，制作macOS安装镜像</li><li><a href="https://www.ccleaner.com/speccy/download" target="_blank" rel="noopener">speccy</a>: 查看电脑硬件信息</li></ul><p>其他</p><ul><li>能正常访问Google的网络</li><li>另外一台电脑，用于查资料（可选）</li><li>U盘1-2个</li></ul><p>前置知识</p><ul><li><a href="https://dortania.github.io/OpenCore-Install-Guide/terminology.html" target="_blank" rel="noopener">技术术语了解</a></li></ul><h3 id="Windows安装和分区"><a href="#Windows安装和分区" class="headerlink" title="Windows安装和分区"></a>Windows安装和分区</h3><ol><li>制作Windows安装U盘</li><li>开机安装Delete键进入bios，选择从U盘启动</li><li>安装Windows系统，具体安装过程可以参考<a href="https://zhuanlan.zhihu.com/p/49181786" target="_blank" rel="noopener">这个教程</a>，注意安装时不要Windows分区不要占用所有空间，建议50G就好了。</li><li>安装完成后，新建一个分区，后续作为macOS的安装分区，建议预留100G以上</li></ol><h3 id="macOS安装U盘制作"><a href="#macOS安装U盘制作" class="headerlink" title="macOS安装U盘制作"></a>macOS安装U盘制作</h3><h4 id="macOS准备"><a href="#macOS准备" class="headerlink" title="macOS准备"></a>macOS准备</h4><p>具体步骤参考<a href="https://dortania.github.io/OpenCore-Install-Guide/installer-guide/winblows-install.html#downloading-macos" target="_blank" rel="noopener">这个</a></p><ol><li>使用gibMacOS的gibMacOS.bat，下载最新macOS</li><li>使用gibMacOS的MakeInstall.bat，制作安装U盘</li></ol><h4 id="OpenCore文件准备"><a href="#OpenCore文件准备" class="headerlink" title="OpenCore文件准备"></a>OpenCore文件准备</h4><ol><li>将下载的OpenCorePkg解压，复制EFI文件夹到U盘</li><li>删除EFI文件夹中多余的文件，只保留以下内容<br> <img src="http://image.runjf.com/mweb/2020-07-25-15955829462860.png" alt></li><li>添加必要的.efi驱动到U盘EFI/OC/Drivers文件夹，不同的机型需要的有所区别<ul><li><a href="https://github.com/acidanthera/OcBinaryData/blob/master/Drivers/HfsPlus.efi" target="_blank" rel="noopener">HfsPlus.efi</a>: 用于读写苹果HFS分区</li></ul></li></ol><h4 id="Kexts驱动准备"><a href="#Kexts驱动准备" class="headerlink" title="Kexts驱动准备"></a>Kexts驱动准备</h4><p>添加必要的Kexts驱动到U盘EFI/OC/Kexts文件夹，不同的机型需要的有所区别</p><ul><li><a href="https://github.com/acidanthera/VirtualSMC/releases" target="_blank" rel="noopener">VirtualSMC</a>：将电脑伪装成苹果设备</li><li>SMCProcessor.kext: VirtualSMC附带驱动，用于监控cpu状态</li><li>SMCSuperIO：VirtualSMC附带驱动，用于监控风扇状态</li><li><a href="https://github.com/acidanthera/Lilu/releases" target="_blank" rel="noopener">Lilu</a>: 用于加载音频等驱动</li><li><a href="https://github.com/acidanthera/WhateverGreen/releases" target="_blank" rel="noopener">WhateverGreen</a>：显卡驱动</li><li><a href="https://github.com/acidanthera/AppleALC/releases" target="_blank" rel="noopener">AppleALC</a>: 声卡驱动</li><li><a href="https://github.com/acidanthera/IntelMausi/releases" target="_blank" rel="noopener">IntelMausi</a>: 有线网卡驱动</li></ul><h4 id="SSDT准备"><a href="#SSDT准备" class="headerlink" title="SSDT准备"></a>SSDT准备</h4><p>添加必要的Kexts驱动到U盘EFI/OC/ACPI文件夹，不同的机型需要的有所区别</p><p><img src="http://image.runjf.com/mweb/2020-07-25-15955842564825.jpg" alt="-w828"></p><p>从opencore的<a href="https://dortania.github.io/OpenCore-Install-Guide/ktext.html#desktop" target="_blank" rel="noopener">文档</a>可以看出，我们至少需要以下几个SSDT</p><ul><li><a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/plug.html" target="_blank" rel="noopener">SSDT-PLUG</a>：电源管理相关，影响睡眠</li><li><a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/ec-fix.html" target="_blank" rel="noopener">SSDT-EC-USBX</a>：内置控制器，和USB相关，影响睡眠</li><li><a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/nvram.html" target="_blank" rel="noopener">SSDT-PMC</a>：NVRAM相关</li><li><a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/awac.html" target="_blank" rel="noopener">SSDT-AWAC</a>：系统时钟（通过查看DSDT，我们并不需要这个）</li></ul><p>为了更完美，我们还需要以下SSDT，这些可以等macOS安装完之后，根据情况再考虑是否制作</p><ul><li><a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/smbus.html" target="_blank" rel="noopener">SSDT-SBUS-MCHC</a>：SMBus相关</li><li><a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/rhub.html" target="_blank" rel="noopener">SSDT-RHUB</a>：USB相关</li><li><a href="https://dortania.github.io/Getting-Started-With-ACPI/Universal/irq.html" target="_blank" rel="noopener">SSDT-HPET</a>：IRQ Conflicts相关</li></ul><p>具体SSDT的制作过程比较繁琐，详细过程参考<a href="https://dortania.github.io/Getting-Started-With-ACPI/" target="_blank" rel="noopener">文档</a></p><h4 id="OpenCore配置文件准备"><a href="#OpenCore配置文件准备" class="headerlink" title="OpenCore配置文件准备"></a>OpenCore配置文件准备</h4><ol><li>复制OpenCorePKG的Docs/Sample.plist到U盘EFI/OC/config.plist</li><li>打开ProperTree的ProperTree.bat脚本，打开前面的config.plist，选择OC Clean Snapshot, 根据我们的驱动文件自动修改配置，保存。<br> <img src="http://image.runjf.com/mweb/2020-07-25-15955861876823.jpg" alt="-w355"></li><li>配置文件各项微调，参考<a href="https://dortania.github.io/OpenCore-Install-Guide/config.plist/coffee-lake.html" target="_blank" rel="noopener">文档</a>，注意DeviceProperties，PlatformInfo配置项，影响比较大。</li><li>配置准确性校验 <a href="https://opencore.slowgeek.com/" target="_blank" rel="noopener">https://opencore.slowgeek.com/</a></li></ol><p><strong>注意</strong>：配置文件中kext的顺序是有影响的，建议前两个是lilu和virtualsmc</p><h3 id="Bios设置"><a href="#Bios设置" class="headerlink" title="Bios设置"></a>Bios设置</h3><p>如果bios没有相关设置项，可以跳过</p><h4 id="禁用项"><a href="#禁用项" class="headerlink" title="禁用项"></a>禁用项</h4><ul><li>Fast Boot</li><li>Secure Boot</li><li>VT-d (can be enabled if you set <code>DisableIoMapper</code> to YES)</li><li>CSM</li><li>Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)</li><li>Intel SGX</li><li>Intel Platform Trust</li><li>CFG Lock</li></ul><h4 id="启用项"><a href="#启用项" class="headerlink" title="启用项"></a>启用项</h4><ul><li>VT-x</li><li>Above 4G decoding</li><li>Hyper-Threading</li><li>Execute Disable Bit</li><li>EHCI/XHCI Hand-off</li><li>OS type: Windows 8.1/10 UEFI Mode</li><li>DVMT Pre-Allocated(iGPU Memory): 64MB</li><li>SATA Mode: AHCI</li></ul><h3 id="macOS安装"><a href="#macOS安装" class="headerlink" title="macOS安装"></a>macOS安装</h3><p><strong>注意</strong>：这时我们先不要替换无线网卡为DW1820A，可能会导致系统安装失败或者卡死。</p><ol><li>重启电脑，从macOS安装U盘启动</li><li>从OpenCore启动菜单选择macOS安装启动项</li><li>等待macOS系统加载完成，选择我们预留的分区，格式为APFS, 安装系统</li><li>等待多次重启之后，macOS系统初步安装完成</li></ol><h3 id="驱动安装及优化"><a href="#驱动安装及优化" class="headerlink" title="驱动安装及优化"></a>驱动安装及优化</h3><h4 id="显卡驱动优化"><a href="#显卡驱动优化" class="headerlink" title="显卡驱动优化"></a>显卡驱动优化</h4><p>如果只使用免驱的独立显卡，可以跳过这一步<br>前面配置macOS安装U盘时，其实已经对显卡做了简单驱动，如果一切功能正常，也可以跳过这一步。</p><p>显卡驱动不正常会影响双屏显示，睡眠假死，睡眠变重启，HDMI音频输出等</p><p>内置显卡的驱动，注意做的是以下几个点</p><ul><li>选择合适的缓冲帧<code>AAPL,ig-platform-id</code>，必要时仿冒设备id<code>device-id</code></li><li>定制正确的显示输出接口，将物理接口和PCI设备正确对应</li><li>显存，HDMI相关补丁</li></ul><p>这一步使用hackintool的应用补丁功能可以完成，详细步骤参考<a href="https://blog.daliansky.net/Tutorial-Using-Hackintool-to-open-the-correct-pose-of-the-8th-generation-core-display-HDMI-or-DVI-output.html" target="_blank" rel="noopener">这个</a></p><p><strong>注意</strong>：hackintool在配置过程中，有时改动会被重置，应用补丁时注意二次确认</p><h4 id="声卡驱动"><a href="#声卡驱动" class="headerlink" title="声卡驱动"></a>声卡驱动</h4><p>声卡驱动大部分工作由AppleALC自动完成，我们需要的是选择正确的layout-id.<br>建议先去github的release日志上查看，是否在某次release添加了你主板的layout-id。如果没有相关记录，那就只能尝试wiki中对应声卡型号的所有可能的layout-id</p><p>详细步骤参考<a href="https://dortania.github.io/OpenCore-Post-Install/universal/audio.html" target="_blank" rel="noopener">这个</a></p><h4 id="USB定制"><a href="#USB定制" class="headerlink" title="USB定制"></a>USB定制</h4><p>USB定制直接影响睡眠是否正常</p><p>使用hackintool完成USB定制，主要过程</p><ol><li>SSDT-EC-USBX定制（前面已经完成）</li><li>加载USBInjectAll.kext驱动，重启，注入所有接口。</li><li>分别使用USB2.0，USB3.0，Type-C设备拔插所有USB接口，找到物理接口和PCI设备的映射关系，并删除没有用到的USB接口。</li><li>生成USBPorts.kext驱动，加载。</li></ol><p>详细步骤参考<a href="https://blog.daliansky.net/Intel-FB-Patcher-tutorial-and-insertion-pose.html#%E5%AE%9A%E5%88%B6usb" target="_blank" rel="noopener">这个</a></p><h4 id="DW1820A无线网卡"><a href="#DW1820A无线网卡" class="headerlink" title="DW1820A无线网卡"></a>DW1820A无线网卡</h4><p>无线网卡驱动和系统序列号影响iMessage, sidecar等Apple服务使用。</p><ol><li>找到无线的PCI设备地址<br> <img src="http://image.runjf.com/mweb/2020-07-25-15956404767924.jpg" alt></li><li><p>在config.plist中<code>DeviceProperties-&gt;Add</code>配置项下加入设备信息, 注意替换PCI设备地址</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>PciRoot(0x0)/Pci(0x1C,0x5)/Pci(0x0,0x0)<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>AAPL,slot-name<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>WLAN<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>compatible<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>pci14e4,43a3<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>device_type<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>Airport Extreme<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>model<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>DW1820A (BCM4350) 802.11ac Wireless<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>name<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>Airport<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>pci-aspm-default<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>0<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加入Airport驱动<a href="https://github.com/acidanthera/airportbrcmfixup/releases" target="_blank" rel="noopener">AirportBrcmFixup.kext</a>, 加入<a href="http://7.daliansky.net/DW1820A/DW1820A_BT_for_Mojave_v2.5.3.zip" target="_blank" rel="noopener">蓝牙驱动</a></p></li><li>在config.plist的boot-args项中加入<code>brcmfx-country=#a</code></li><li>关机替换网卡为DW1820A（有的机器可能需要屏蔽针脚）</li></ol><p>详细步骤参考<a href="https://blog.daliansky.net/DW1820A_BCM94350ZAE-driver-inserts-the-correct-posture.html" target="_blank" rel="noopener">这个</a>和<a href="https://osxlatitude.com/forums/topic/11322-broadcom-bcm4350-cards-under-high-sierramojavecatalina/?tab=comments#comment-89830" target="_blank" rel="noopener">这个</a></p><h4 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h4><p>这一步是为了启动苹果内置电源管理，影响睡眠</p><p>详细步骤参考<a href="https://dortania.github.io/OpenCore-Post-Install/universal/pm.html#enabling-x86platformplugin" target="_blank" rel="noopener">这个</a></p><h4 id="CPU变频"><a href="#CPU变频" class="headerlink" title="CPU变频"></a>CPU变频</h4><p>使CPU的变频挡位更多，台式机不是特别必要。</p><p>可以使用<code>CPU-S</code>软件来查看变频状态</p><p>详细步骤参考<a href="https://dortania.github.io/OpenCore-Post-Install/universal/pm.html#using-cpu-friend" target="_blank" rel="noopener">这个</a></p><h4 id="睡眠修复"><a href="#睡眠修复" class="headerlink" title="睡眠修复"></a>睡眠修复</h4><p>如果上面的SSDT和驱动都做好了，睡眠的问题基本不大了，可能要设置下系统参数，禁止休眠到硬盘。</p><p>详细步骤参考<a href="https://dortania.github.io/OpenCore-Post-Install/universal/sleep.html" target="_blank" rel="noopener">这个</a></p><h4 id="启动项，图形化界面"><a href="#启动项，图形化界面" class="headerlink" title="启动项，图形化界面"></a>启动项，图形化界面</h4><p>到此黑苹果配置基本完成了，我们可以去除<code>boot-args</code>中的<code>-v</code>等debug启动参数，添加相关声音和图片资源，配置config.plist启动OpenCore图形界面。（在开机中启用声音，个人觉得不太不要）</p><p>详细步骤参考<a href="https://dortania.github.io/OpenCore-Post-Install/cosmetic/gui.html#setting-up-opencore-s-gui" target="_blank" rel="noopener">这个</a></p><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><ul><li>每个SSDT基本都可以用手动修改和自动修改，如果某种方法不生效建议尝试另外一种。</li><li>如果不是配置完全一样，不要直接使用别人的EFI文件</li><li>FakePCIID相关驱动会改动PCI设备信息，可能导致USB设备地址变化，导致USB定制失效，需要重新定制</li><li>不同的SMBios机型会影响驱动成功率</li><li>修改序列号会影响iCloud账户识别</li></ul><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul><li><a href="https://dortania.github.io" target="_blank" rel="noopener">https://dortania.github.io</a></li><li><a href="https://github.com/acidanthera" target="_blank" rel="noopener">https://github.com/acidanthera</a></li><li><a href="https://blog.daliansky.net" target="_blank" rel="noopener">https://blog.daliansky.net</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;硬件信息&quot;&gt;&lt;a href=&quot;#硬件信息&quot; class=&quot;headerlink&quot; title=&quot;硬件信息&quot;&gt;&lt;/a&gt;硬件信息&lt;/h2&gt;&lt;h3 id=&quot;GB-BRi5H-8250-准系统&quot;&gt;&lt;a href=&quot;#GB-BRi5H-8250-准系统&quot; class=&quot;headerlink&quot; title=&quot;GB-BRi5H-8250 准系统&quot;&gt;&lt;/a&gt;GB-BRi5H-8250 准系统&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://image.runjf.com/mweb/2020-07-25-15955608894288.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="工作生活" scheme="http://ponder.work/categories/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="hackintosh" scheme="http://ponder.work/tags/hackintosh/"/>
    
      <category term="电子产品" scheme="http://ponder.work/tags/%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>IPython学习环境配置</title>
    <link href="http://ponder.work/2020/07/18/ipython-learning-environment-config/"/>
    <id>http://ponder.work/2020/07/18/ipython-learning-environment-config/</id>
    <published>2020-07-18T12:17:00.000Z</published>
    <updated>2020-07-19T08:05:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPython简介"><a href="#IPython简介" class="headerlink" title="IPython简介"></a>IPython简介</h2><p>IPython项目起初是Fernando Pérez在2001年的一个用以加强和Python交互的子项目。在随后的16年中，它成为了Python数据栈最重要的工具之一。</p><p>简单来说，我们可以把IPython当成一个学习Python语言、数据分析、机器学习的平台。</p><a id="more"></a><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>这里我们使用<a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener">miniconda</a>，防止机器学习很图形显示相关的库出问题. 使用pyenv的同学，也可以用pyenv来安装miniconda。</p><p>下载：<code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh</code></p><p>安装: <code>sh Miniconda3-latest-MacOSX-x86_64.sh</code></p><h3 id="创建ipython虚拟环境"><a href="#创建ipython虚拟环境" class="headerlink" title="创建ipython虚拟环境"></a>创建ipython虚拟环境</h3><ol><li>创建虚拟环境：<code>conda create -n ipython</code></li><li>激活环境：<code>conda activate ipython</code></li><li>安装必要的python库：<code>pip install ipython pandas ipykernel matplotlib</code></li></ol><h2 id="用Visual-Studio-Code作为编辑器"><a href="#用Visual-Studio-Code作为编辑器" class="headerlink" title="用Visual Studio Code作为编辑器"></a>用Visual Studio Code作为编辑器</h2><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a>在安装Python插件之后，就可以很方便得查看编辑IPython Notebook了</p><h3 id="安装Python插件"><a href="#安装Python插件" class="headerlink" title="安装Python插件"></a>安装Python插件</h3><p>在扩展商店，搜索“Python”， 并安装<br><img src="http://image.runjf.com/mweb/2020-07-19-15951449200011.jpg" alt="-w549"></p><h3 id="创建使用NoteBook"><a href="#创建使用NoteBook" class="headerlink" title="创建使用NoteBook"></a>创建使用NoteBook</h3><p>选择IPython环境<br><img src="http://image.runjf.com/mweb/2020-07-19-15951453546560.jpg" alt="-w1421"></p><p>创建<code>hello.ipynb</code>Notebook<br><img src="http://image.runjf.com/mweb/2020-07-19-15951457001314.jpg" alt="-w1421"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IPython简介&quot;&gt;&lt;a href=&quot;#IPython简介&quot; class=&quot;headerlink&quot; title=&quot;IPython简介&quot;&gt;&lt;/a&gt;IPython简介&lt;/h2&gt;&lt;p&gt;IPython项目起初是Fernando Pérez在2001年的一个用以加强和Python交互的子项目。在随后的16年中，它成为了Python数据栈最重要的工具之一。&lt;/p&gt;
&lt;p&gt;简单来说，我们可以把IPython当成一个学习Python语言、数据分析、机器学习的平台。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="数据分析" scheme="http://ponder.work/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>循环import导致的模块被多次import</title>
    <link href="http://ponder.work/2020/06/20/python-import-behavior-and-circular-import/"/>
    <id>http://ponder.work/2020/06/20/python-import-behavior-and-circular-import/</id>
    <published>2020-06-20T01:48:00.000Z</published>
    <updated>2020-06-20T04:03:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>循环import是很多Python初学者都会遇到问题，网上有也有很多文章讲解决方法，比如<a href="https://www.jianshu.com/p/a1e91cc53b07" target="_blank" rel="noopener">这篇</a>，不清楚的可以自行查阅，这里就不赘述了。</p><p>那么，为啥老司机也会遇到这个问题呢？这段时间一直在搞把redis复刻一个python版本，在复刻代码时就遇到了这个问题。而且我也使用了延迟import，却没能解决。</p><p>下面我们来详细分析下</p><a id="more"></a><h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><p>先看两段代码</p><p>run.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=<span class="string">'DEBUG'</span>, </span><br><span class="line">    format=<span class="string">'[&#123;asctime&#125; &#123;module&#125;.&#123;funcName:&lt;11&#125;] &#123;message&#125;'</span>, style=<span class="string">'&#123;'</span>)</span><br><span class="line">logging.info(sys.modules[<span class="string">'__main__'</span>])</span><br><span class="line">logging.info(<span class="string">'begin load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">server = Server()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> foo <span class="keyword">import</span> do_someting</span><br><span class="line">    logging.info(<span class="string">'call'</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> hasattr(server, <span class="string">'name'</span>)</span><br><span class="line">    server.name = <span class="string">'aaa'</span></span><br><span class="line">    logging.info(repr(server))</span><br><span class="line">    logging.info(<span class="string">'%s\t%s'</span>, repr(Server), id(Server))</span><br><span class="line">    do_someting()</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'end load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start()</span><br></pre></td></tr></table></figure></p><p>foo.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'begin load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_someting</span><span class="params">()</span>:</span></span><br><span class="line">    logging.info(<span class="string">'begin call'</span>)</span><br><span class="line">    <span class="keyword">import</span> run</span><br><span class="line"></span><br><span class="line">    logging.info(repr(run.server))</span><br><span class="line">    logging.info(<span class="string">'%s\t%s'</span>, (run.Server), id(run.Server))</span><br><span class="line">    <span class="keyword">if</span> hasattr(run.server, <span class="string">'name'</span>):</span><br><span class="line">        logging.info(<span class="string">'found attr name'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">'not found attr name'</span>)</span><br><span class="line">    logging.info(<span class="string">'end call'</span>)</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'end load'</span>)</span><br></pre></td></tr></table></figure></p><p>再看执行<code>python run.py</code>的结果<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">659</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] &lt;<span class="keyword">module</span> <span class="string">'__main__'</span> from <span class="string">'/Volumes/study/Projects/code_snippet/circular_import/run.py'</span>&gt;</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">659</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">begin</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">659</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">end</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> foo.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">begin</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> foo.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">end</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> <span class="built_in">run</span>.start      ] call</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> <span class="built_in">run</span>.start      ] &lt;__main__.<span class="built_in">Server</span> object at <span class="number">0x1064eb940</span>&gt;</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> <span class="built_in">run</span>.start      ] &lt;class <span class="string">'__main__.Server'</span>&gt; <span class="number">140250245614784</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> foo.do_someting] <span class="built_in">begin</span> call</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] &lt;<span class="keyword">module</span> <span class="string">'__main__'</span> from <span class="string">'/Volumes/study/Projects/code_snippet/circular_import/run.py'</span>&gt;</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">begin</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> <span class="built_in">run</span>.&lt;<span class="keyword">module</span>&gt;   ] <span class="built_in">end</span> load</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> foo.do_someting] &lt;<span class="built_in">run</span>.<span class="built_in">Server</span> object at <span class="number">0x1065d8b50</span>&gt;</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> foo.do_someting] &lt;class <span class="string">'run.Server'</span>&gt;  <span class="number">140250247610512</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> foo.do_someting] <span class="keyword">not</span> found attr name</span><br><span class="line">[<span class="number">2020</span><span class="number">-06</span><span class="number">-20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">663</span> foo.do_someting] <span class="built_in">end</span> call</span><br></pre></td></tr></table></figure></p><p>可以发现几个问题</p><ol><li>run.py 被加载了两次</li><li>在run模块中的server实例和Server类，与foo模块中的id一样，也就是不是同一个对象。</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先复习下import机制</p><p>import 语句结合了两个操作；它先搜索指定名称的模块，然后将搜索结果绑定到当前作用域中的名称。 import 语句的搜索操作定义为对 <code>__import__()</code> 函数的调用并带有适当的参数。 <code>__import__()</code> 的返回值会被用于执行 import 语句的名称绑定操作。 </p><p>对 <code>__import__()</code> 的直接调用将仅执行模块搜索以及在找到时的模块创建操作。 不过也可能产生某些副作用，例如导入父包和更新各种缓存 (包括 sys.modules)，只有 import 语句会执行名称绑定操作。</p><p><code>sys.modules</code>是一个字典，缓存了已加载的模型，以模块名称为key，模块对象为value。<br>执行import 语句时，先在<code>sys.modules</code>缓存中查询该模块，如已存在者返回该对象，否则从文件系统中加载该模块。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2020</span>-<span class="number">06</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">03</span>,<span class="number">662</span> run<span class="selector-class">.start</span>      ] &lt;__main__<span class="selector-class">.Server</span> <span class="selector-tag">object</span> at <span class="number">0</span>x1064eb940&gt;</span><br></pre></td></tr></table></figure><p>从上面的这行输出可以看出，当run作为程序入口时，模块名称变为了<code>__main__</code>, 查看 <code>sys.modules</code>，也只发现了<code>__main__</code>，没有发现<code>run</code>.<br>所以， 当<code>do_someting</code> import <code>run</code> 模块时，肯定是发现没有加载，最终导致加载了两次，Server类id不一致也可以理解了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>所以只要能从<code>sys.modules</code>正确地找到run模块，问题就可以解决。</p><p>具体来说有三种方法</p><h3 id="方法A"><a href="#方法A" class="headerlink" title="方法A"></a>方法A</h3><p>修改foo.py, 把<code>import run</code>改为<code>import __main__ as run</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'begin load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_someting</span><span class="params">()</span>:</span></span><br><span class="line">    logging.info(<span class="string">'begin call'</span>)</span><br><span class="line">    <span class="keyword">import</span> __main__ <span class="keyword">as</span> run</span><br><span class="line"></span><br><span class="line">    logging.info(repr(run.server))</span><br><span class="line">    logging.info(<span class="string">'%s\t%s'</span>, (run.Server), id(run.Server))</span><br><span class="line">    <span class="keyword">if</span> hasattr(run.server, <span class="string">'name'</span>):</span><br><span class="line">        logging.info(<span class="string">'found attr name'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">'not found attr name'</span>)</span><br><span class="line">    logging.info(<span class="string">'end call'</span>)</span><br><span class="line"></span><br><span class="line">logging.info(<span class="string">'end load'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="方法B"><a href="#方法B" class="headerlink" title="方法B"></a>方法B</h3><p>修改<code>sys.modules</code>，增加key<code>run</code>，指向<code>__main__</code>模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.modules[<span class="string">'run'</span>] = sys.modules[<span class="string">'__main__'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="方法C（推荐）"><a href="#方法C（推荐）" class="headerlink" title="方法C（推荐）"></a>方法C（推荐）</h3><p>启动文件单独使用一个文件，里面不包含其他代码。<br>这时<code>__main__</code>模块变成了bar, 这时run模块的名称就不会改变了，import行为也就正常了</p><p>bar.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> run <span class="keyword">import</span> start</span><br><span class="line"></span><br><span class="line">start()</span><br></pre></td></tr></table></figure></p><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p>上面三种方法，殊途同归，结果都是一样的。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,508</span> run.&lt;module&gt;   ] begin load</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,508</span> run.&lt;module&gt;   ] end load</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.&lt;module&gt;   ] begin load</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.&lt;module&gt;   ] end load</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> run.start      ] call</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> run.start      ] &lt;run.Server object at <span class="number">0</span>x10f542fa0&gt;</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> run.start      ] &lt;class 'run.Server'&gt;  <span class="number">140660950954304</span></span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] begin call</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] &lt;run.Server object at <span class="number">0</span>x10f542fa0&gt;</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] &lt;class 'run.Server'&gt;  <span class="number">140660950954304</span></span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] found attr name</span><br><span class="line">[<span class="number">2020-06-20</span> <span class="number">11</span>:<span class="number">43:31,509</span> foo.do_someting] end call</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为C是编译型语言，可以理解为模块的导入在编译期就完成了，也就不会出现模块的循环依赖，而且全局对象的内存位置也在编译期就固定了。</p><p>而Python作为解释型语言，模块的导入加载和执行是混在一起的，所有对象都是可以更改的，也就容易出现这种问题。</p><p>切记：</p><p><strong>复杂Python程序的入口文件最好保持单一的文件，不要混入其他对象定义，谨慎使用<code>if __name__ == &#39;__main__&#39;</code>写法。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.python.org/zh-cn/3/reference/import.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/reference/import.html</a></li><li><a href="https://docs.python.org/zh-cn/3/library/sys.html?#sys.modules" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/sys.html?#sys.modules</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;循环import是很多Python初学者都会遇到问题，网上有也有很多文章讲解决方法，比如&lt;a href=&quot;https://www.jianshu.com/p/a1e91cc53b07&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇&lt;/a&gt;，不清楚的可以自行查阅，这里就不赘述了。&lt;/p&gt;
&lt;p&gt;那么，为啥老司机也会遇到这个问题呢？这段时间一直在搞把redis复刻一个python版本，在复刻代码时就遇到了这个问题。而且我也使用了延迟import，却没能解决。&lt;/p&gt;
&lt;p&gt;下面我们来详细分析下&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>简明双标指南</title>
    <link href="http://ponder.work/2020/06/13/%E7%AE%80%E6%98%8E%E5%8F%8C%E6%A0%87%E6%8C%87%E5%8D%97/"/>
    <id>http://ponder.work/2020/06/13/%E7%AE%80%E6%98%8E%E5%8F%8C%E6%A0%87%E6%8C%87%E5%8D%97/</id>
    <published>2020-06-13T14:39:38.000Z</published>
    <updated>2020-06-14T01:23:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时期有很多事情发生，也颠覆了我们的认知（如I cannot breathe），同时也发现了很多双标事件。</p><p>下面就简单地总结下，如何双标。</p><p>双标的核心是，定性的看问题，不要就事论事具体分析。</p><p>双标的要点之一，选取部分真相进行概括定性。<br>这里的选取非常关键，我们应该选择性地看见我们想看见的东西。假如B捡了地上的一块钱并据为己有，贪小便宜不是君子所为，这人肯定是品行不端。假如A也这么干了，对不起我没有看见。假如A捡了垃圾放垃圾桶了，这时我们就可以说，从一件微不足道的事情上就可以看出A真是道德高尚。</p><p>双标的要点之二，定性之后的上纲上线。<br>由于第一步我们已经定性了A和B，以后再发生事情就很好处理了。假如都做了好事，A就是好人性质的体现，B因为他是坏人肯定是另有目的的，是伪装的。假如都做了坏事，反过来处理就好了。比如，你认定A是好人，B是坏人，假设他们都随地吐痰了。这时就可以说A肯定是不小心的，大善人怎么可能做这种事；可以说B真是狗改不了吃屎，连基本的公德心都没有。假设都做了好事，扶老奶奶过马路，A就是一以贯之的道德楷模，值得学习；B肯定是装的，为了方便自己做坏事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一段时期有很多事情发生，也颠覆了我们的认知（如I cannot breathe），同时也发现了很多双标事件。&lt;/p&gt;
&lt;p&gt;下面就简单地总结下，如何双标。&lt;/p&gt;
&lt;p&gt;双标的核心是，定性的看问题，不要就事论事具体分析。&lt;/p&gt;
&lt;p&gt;双标的要点之一，选取部分真相进行概
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://ponder.work/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://ponder.work/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Python asyncio 简易教程</title>
    <link href="http://ponder.work/2020/05/24/python-asyncio-usage/"/>
    <id>http://ponder.work/2020/05/24/python-asyncio-usage/</id>
    <published>2020-05-24T01:48:00.000Z</published>
    <updated>2020-05-24T14:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>asyncio</code>是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。</p><p><code>asyncio</code>的编程模型就是一个消息循环。我们从<code>asyncio</code>模块中直接获取一个<code>EventLoop</code>的引用，然后把需要执行的协程扔到<code>EventLoop</code>中执行，就实现了异步IO。</p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">' world'</span>)</span><br><span class="line">    </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(hello_world())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><h2 id="执行逻辑"><a href="#执行逻辑" class="headerlink" title="执行逻辑"></a>执行逻辑</h2><p><code>async def</code> 定义的每一个函数, 本质上是一个协程.<br>当await调用一个函数时, 程序就切换到该函数中执行了, 当执行完成时, 程序又回到await调用处继续执行. </p><p>当函数的调用链上碰到系统io相关函数时，程序执行的控制权就会回到eventloop主循环，eventloop就会调度执行别的函数，等到该函数的io就绪时，再从该函数暂停的地方继续执行。</p><p>再搭配上支持非阻塞io的异步库, 这样就实现了高效的异步编程.</p><p>所有异步函数是在同一个线程中执行的, 在该进程内我们还可启用其他线程, 执行其他同步代码. 下图展示了Python中协程、线程、进程的逻辑关系。</p><p><img src="http://image.runjf.com/mweb/2020-05-24-15903277834535.jpg" alt></p><h2 id="如何在event-loop内调用同步代码"><a href="#如何在event-loop内调用同步代码" class="headerlink" title="如何在event loop内调用同步代码"></a>如何在event loop内调用同步代码</h2><p>一旦使用async, 整个线程内都必须使用异步, 否则整个线程都会阻塞。<br>所以，必须另起线程, 将同步操作放在线程中执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line">executor = concurrent.futures.ThreadPoolExecutor(</span><br><span class="line">    max_workers=<span class="number">2</span>,  <span class="comment"># 线程池大小</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_block_things</span><span class="params">(x)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>, time.time())</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    fut = loop.run_in_executor(executor, some_block_things, x)</span><br><span class="line">    num =  <span class="keyword">await</span> asyncio.wait_for(fut, timeout=<span class="number">10</span>)</span><br><span class="line">    print(<span class="string">'num %s'</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait([hello_world(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"Complete in &#123;&#125; seconds"</span>.format(end - start))</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hello world <span class="number">1533904346.37133</span></span><br><span class="line">hello world <span class="number">1533904346.371683</span></span><br><span class="line">hello world <span class="number">1533904346.37199</span></span><br><span class="line">hello world <span class="number">1533904346.372059</span></span><br><span class="line">hello world <span class="number">1533904346.372122</span></span><br><span class="line">hello world <span class="number">1533904346.372176</span></span><br><span class="line">hello world <span class="number">1533904346.372245</span></span><br><span class="line">hello world <span class="number">1533904346.372295</span></span><br><span class="line">num <span class="number">0</span></span><br><span class="line">num <span class="number">3</span></span><br><span class="line">num <span class="number">4</span></span><br><span class="line">num <span class="number">1</span></span><br><span class="line">num <span class="number">5</span></span><br><span class="line">num <span class="number">6</span></span><br><span class="line">num <span class="number">7</span></span><br><span class="line">num <span class="number">2</span></span><br><span class="line">Complete in <span class="number">4.015289068222046</span> seconds</span><br><span class="line">[Finished in <span class="number">4.2</span>s]</span><br></pre></td></tr></table></figure></p><p>因为这里我的线程池大小为2, 所以8个sleep整体耗时4s, 但是’hello world’ 几乎是同一时刻输出的, 这就是asyncio的魅力所在.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>asyncio使用<code>async</code>和<code>await</code>的语法，使得原来回调函数形式的异步代码变为同步代码，更易于理解。<br>使用asyncio可以方便地构建高性能的网络服务, 单进程qps可以轻松地达到2000以上。<br>基于asyncio也出现了一些异步web框架，比如sanic，相比传统框架性能提升较大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;asyncio&lt;/code&gt;是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;asyncio&lt;/code&gt;的编程模型就是一个消息循环。我们从&lt;code&gt;asyncio&lt;/code&gt;模块中直接获取一个&lt;code&gt;EventLoop&lt;/code&gt;的引用，然后把需要执行的协程扔到&lt;code&gt;EventLoop&lt;/code&gt;中执行，就实现了异步IO。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="异步" scheme="http://ponder.work/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>自学的陷阱</title>
    <link href="http://ponder.work/2020/05/17/%E8%87%AA%E5%AD%A6%E7%9A%84%E9%99%B7%E9%98%B1/"/>
    <id>http://ponder.work/2020/05/17/%E8%87%AA%E5%AD%A6%E7%9A%84%E9%99%B7%E9%98%B1/</id>
    <published>2020-05-17T03:17:00.000Z</published>
    <updated>2020-05-17T13:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己常年都在自学，在自学的路上走了很多弯路，到最后发现很多时候走的都是最艰难的或者是错误的道路，抑或是一直在尝试各种道路，从未选择一条坚持走下去。</p><a id="more"></a><p>举最熟悉的编程来说，它应该是最适合自学的领域了。网络上相关的学习资源也数不胜数，但是为何很多人最后进步很慢或者是干脆“从入门到放弃了”，究其原因大抵是走了错误的道路。</p><p>打开知乎，类似“如何学习编程”的问题数不胜数，也有很多人善意地给了自己的回答。记得我当年也问过类似的问题，有人说先从SICP入手吧，有人说直接LeetCode刷题，有人说学C，有人说学Python。或许一千个人就有一千种答案，但是到底哪个能帮助到你呢？每个人的答案，其实都是他过往经验的总结。</p><p>由于每个人的资质、禀赋、基础（下面统称为资质）并不相同，每个方法也有其适应人群和局限，照搬别人的路子只能是失败。越高资质的人（利根人），对于各种方法的兼容性越好，当然效果是有区别的。低资质的人（钝根人），越发体现方法的重要性。这里的方法就是学习的路径，佛家称之为法门。一切法门都是手段而已，都是为了最终能学到东西。</p><p>譬如爬山，有盘山公路，也有直接的楼梯，也有索道，并无绝对高下之分，只有合适与不合适。<br>体力不同能承受的坡度就不同，超出限度最后只能半途而废，所以得从这些路径上选择自己恰好能接受的那条路。当自学的时候，由于没有老师，我们很容易步入错误的道路，从而落入陷阱。</p><p>那么，如何适合自己的道路呢？首先要了解自己的的优劣势，明确目标，然后了解每条路径的特点（要求、效率、产出等）。<br>具体来说，逐条尝试路径，评估投入产出，做记录，并对比当前的目标（为了欣赏风景，还是锻炼身体），选择相对合适的路径。而且选择不应该是僵化的，应该持续地评估，因为的你会变、路会变、你和路之间还会变。当然不要去尝试所有的路径，一则时间精力有限，二则我们也不是路径测评师。</p><p>有朝一日学有所得，能够为人导师时，记得随人讲法。</p><p>最后，学习使我快乐。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己常年都在自学，在自学的路上走了很多弯路，到最后发现很多时候走的都是最艰难的或者是错误的道路，抑或是一直在尝试各种道路，从未选择一条坚持走下去。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://ponder.work/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://ponder.work/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="学习方法" scheme="http://ponder.work/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python2迁移Python3指南</title>
    <link href="http://ponder.work/2020/05/11/python-2to3-guide/"/>
    <id>http://ponder.work/2020/05/11/python-2to3-guide/</id>
    <published>2020-05-11T12:17:00.000Z</published>
    <updated>2020-07-19T08:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><ul><li>了解Python3和Python2的区别，参考<a href="/2017/08/30/difference-between-python2-and-python3/">Python2和Python3区别</a>，<a href="https://github.com/wjo1212/PythonChinaMeetup2020/blob/master/PythonChinaMeetup-20200510-Python3%E6%96%B0%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D.pdf" target="_blank" rel="noopener">Python3新特性</a></li><li>完备的测试用例</li><li>必要的工具：future，用于自动修改不兼容的语法。six，用于Python版本判断。pylint，语法检查</li><li>做好备份</li><li>测试（至关重要），下面的每一步改动都得确保代码行为没有发生变化。</li></ul><h3 id="future安装"><a href="#future安装" class="headerlink" title="future安装"></a>future安装</h3><p><code>pip install future -U</code></p><a id="more"></a><h3 id="项目大致结构"><a href="#项目大致结构" class="headerlink" title="项目大致结构"></a>项目大致结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── ReadMe.md</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── run.py</span><br><span class="line">├── src</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── conf.py</span><br><span class="line">│   ├── handlers</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── draw.py</span><br><span class="line">│   ├── process</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── decision.py</span><br><span class="line">│   │   ├── preprocess.py</span><br><span class="line">│   │   └── process.py</span><br><span class="line">│   ├── service.py</span><br><span class="line">│   └── workflow.py</span><br><span class="line">├── tests</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── test_preprocess.py</span><br></pre></td></tr></table></figure><h2 id="修改过时的Python2代码"><a href="#修改过时的Python2代码" class="headerlink" title="修改过时的Python2代码"></a>修改过时的Python2代码</h2><p>这一步用于测试的解释器是Python2<br>这一步是避免使用过于古老的Python2语法，将项目代码升级为更现代的Python2代码。</p><p>执行: <code>futurize --stage1 -w src tests</code></p><p>可能涉及的改动<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异常处理</span></span><br><span class="line">-    <span class="keyword">except</span> Exception, err:</span><br><span class="line">+    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典元素判断</span></span><br><span class="line">- <span class="keyword">if</span> lr_space_dict.has_key(str(feature)):</span><br><span class="line">+ <span class="keyword">if</span> str(feature) <span class="keyword">in</span> lr_space_dict:</span><br><span class="line"></span><br><span class="line"><span class="comment"># import方式改变</span></span><br><span class="line">- <span class="keyword">from</span> workflow <span class="keyword">import</span> WorkFlow</span><br><span class="line">+ <span class="keyword">from</span> .workflow <span class="keyword">import</span> WorkFlow</span><br><span class="line"></span><br><span class="line"><span class="comment"># print</span></span><br><span class="line">- <span class="keyword">print</span> <span class="string">'load model %s'</span> % self.name</span><br><span class="line">+ print(<span class="string">'load model %s'</span> % self.name)</span><br></pre></td></tr></table></figure></p><h2 id="代码升级Python3，-并添加Python2支持"><a href="#代码升级Python3，-并添加Python2支持" class="headerlink" title="代码升级Python3， 并添加Python2支持"></a>代码升级Python3， 并添加Python2支持</h2><p>这一步用于测试的解释器是Python2<br>一般在升级过程中，不直接移除Python2支持，否则一旦发现问题难以回滚。<br>也不方便确认，代码改动是否产生了非预期的变化。</p><p>执行：<code>futurize --stage2 -x libfuturize.fixes.fix_unicode_keep_u -w src tests</code></p><p><strong>注意</strong>：由于futurize关于unicode的处理存在一些bug，所以字符编码的我们自己单独处理（见后文）。这里的<code>-x libfuturize.fixes.fix_unicode_keep_u</code>参数，跳过对unicode的自动处理，不将代码中的unicode替换为str。同时，我们要逐一去除文件中自动添加的<code>from builtins import str</code>，避免类似<code>import unicode as str</code>的行为。</p><p>可能涉及的改动:</p><ol><li>迭代器对象相关改动</li><li>内置库重命名相关改动</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># map() -&gt; list(map())</span></span><br><span class="line">- year1, month1, day1 = map(int, date_created.split(<span class="string">' '</span>)[<span class="number">0</span>].split(<span class="string">'-'</span>))</span><br><span class="line">+ year1, month1, day1 = list(map(int, date_created.split(<span class="string">' '</span>)[<span class="number">0</span>].split(<span class="string">'-'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict.keys() - list(dict.keys())</span></span><br><span class="line">- <span class="keyword">for</span> city <span class="keyword">in</span> city_dict.keys():</span><br><span class="line">+ <span class="keyword">for</span> city <span class="keyword">in</span> list(city_dict.keys()):</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict.iteritems() -&gt; dict.items()</span></span><br><span class="line">- <span class="keyword">for</span> k, v <span class="keyword">in</span> hawk_info.iteritems():</span><br><span class="line">+ <span class="keyword">for</span> k, v <span class="keyword">in</span> hawk_info.items():</span><br><span class="line"> </span><br><span class="line"><span class="comment"># dict.items() -&gt; list(dict.iteritems())</span></span><br><span class="line">- <span class="keyword">for</span> name, val <span class="keyword">in</span> trans_td_schema.items():</span><br><span class="line">+ <span class="keyword">for</span> name, val <span class="keyword">in</span> list(trans_td_schema.items()):</span><br><span class="line"></span><br><span class="line"><span class="comment"># xrange -&gt; list(range)</span></span><br><span class="line">- <span class="keyword">for</span> index <span class="keyword">in</span> xrange(len(rule_files)):</span><br><span class="line">+ <span class="keyword">for</span> index <span class="keyword">in</span> range(len(rule_files)):</span><br><span class="line"></span><br><span class="line"><span class="comment"># ConfigParser -&gt; configparser</span></span><br><span class="line">- <span class="keyword">import</span> ConfigParser</span><br><span class="line">+ <span class="keyword">from</span> future <span class="keyword">import</span> standard_library</span><br><span class="line">+ standard_library.install_aliases()</span><br><span class="line">+ <span class="keyword">import</span> configparser</span><br></pre></td></tr></table></figure><h2 id="Python文本处理改为unicode"><a href="#Python文本处理改为unicode" class="headerlink" title="Python文本处理改为unicode"></a>Python文本处理改为unicode</h2><p>这一步用于测试的解释器是Python2和Python3</p><p>正确处理字符的原则：</p><ol><li>程序内部均使用unicode，所以大部分业务代码不需要进行编码处理。</li><li>对输入的二进制数据（文本，网络包等），使用对应的字符集进行decode(), 转为unicode</li><li>将内部数据encode后进行传输存储</li></ol><p>也就是：<code>外部数据（字节）-&gt; decode -&gt; unicode -&gt; encode -&gt; 输出数据（字节</code></p><h3 id="启用默认unicode支持"><a href="#启用默认unicode支持" class="headerlink" title="启用默认unicode支持"></a>启用默认unicode支持</h3><p>启用默认unicode支持：<code>futurize --stage1 --unicode-literals src tests -w</code></p><p>涉及的改动:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有文件的头部会增加下面的语句，作用是将源码中的所有字符串视作unicode</span></span><br><span class="line"><span class="comment"># 也就是 "中" 会等效于 u"中"， 不需要`u`作为unicode的前缀 </span></span><br><span class="line">+ <span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br></pre></td></tr></table></figure></p><h3 id="修改编码相关的代码"><a href="#修改编码相关的代码" class="headerlink" title="修改编码相关的代码"></a>修改编码相关的代码</h3><ol><li>str() -&gt; unicode()</li><li>open -&gt; io.open</li><li>去除程序内部多余的encode，decode</li><li>redis, requests等库，增加必要的decode代码</li></ol><p>涉及的改动:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str() -&gt; unicode()</span></span><br><span class="line">- feature = str(feature)</span><br><span class="line">+ feature = unicode(feature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open -&gt; io.open</span></span><br><span class="line">- <span class="keyword">with</span> open(v) <span class="keyword">as</span> f:</span><br><span class="line">+ <span class="keyword">with</span> io.open(v, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis增加必要的decode代码</span></span><br><span class="line">-     <span class="keyword">return</span> self.connection.get(key)</span><br><span class="line">+     res = self.connection.get(key)</span><br><span class="line">+     <span class="keyword">return</span> res.decode(<span class="string">'utf8'</span>) <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure></p><h3 id="为Python3添加unicode函数"><a href="#为Python3添加unicode函数" class="headerlink" title="为Python3添加unicode函数"></a>为Python3添加unicode函数</h3><p>为了代码在Python2和Python3都正确运行，必须给Python增加unicode函数。</p><p>如果后面代码不需要Python2支持，则这一步的改动可以去除，并且把所有的unicode调用改为str即可。</p><p>实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> six</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> six.PY2:</span><br><span class="line">    <span class="keyword">from</span> __builtin__ <span class="keyword">import</span> unicode</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">unicode</span><span class="params">(str)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, unicode_or_bytes=<span class="string">''</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(unicode_or_bytes, bytes):</span><br><span class="line">                <span class="keyword">return</span> str.__new__(cls, unicode_or_bytes, encoding=<span class="string">'utf8'</span>)</span><br><span class="line">            <span class="keyword">return</span> str.__new__(cls, unicode_or_bytes)</span><br></pre></td></tr></table></figure></p><h2 id="修复于解释器版本相关的行为"><a href="#修复于解释器版本相关的行为" class="headerlink" title="修复于解释器版本相关的行为"></a>修复于解释器版本相关的行为</h2><p>这一步用于测试的解释器是Python2和Python3</p><h3 id="字典-集合遍历顺序"><a href="#字典-集合遍历顺序" class="headerlink" title="字典/集合遍历顺序"></a>字典/集合遍历顺序</h3><p>python的字典遍历是不保证顺序的，不同版本解释器遍历顺序可能不同。<br>如果你的代码对遍历顺序有依赖，建议固定遍历顺序，可以使用OrderedDict，或者遍历前排序，或者指定遍历的key。</p><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><p>Python2和Python3的四舍五入行为不一样。<br>如果有数值处理相关的代码，建议做如下修复.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">python2round</span><span class="params">(number, ndigits=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> sys.version_info[<span class="number">0</span>] == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> round(number, ndigits)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, ROUND_HALF_UP</span><br><span class="line">    res = Decimal.from_float(number).quantize(Decimal(<span class="number">10</span>) ** -ndigits, rounding=ROUND_HALF_UP)</span><br><span class="line">    <span class="keyword">return</span> float(res)</span><br></pre></td></tr></table></figure><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>至此，Python2到Python3的迁移已然完成，你获得了支持python3和python2的代码。</p><p>值得小酌一杯</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://python-future.org/automatic_conversion.html" target="_blank" rel="noopener">https://python-future.org/automatic_conversion.html</a></li><li><a href="https://github.com/PythonCharmers/python-future" target="_blank" rel="noopener">https://github.com/PythonCharmers/python-future</a></li><li><a href="https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior#answer-10826537" target="_blank" rel="noopener">https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior#answer-10826537</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前置要求&quot;&gt;&lt;a href=&quot;#前置要求&quot; class=&quot;headerlink&quot; title=&quot;前置要求&quot;&gt;&lt;/a&gt;前置要求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;了解Python3和Python2的区别，参考&lt;a href=&quot;/2017/08/30/difference-between-python2-and-python3/&quot;&gt;Python2和Python3区别&lt;/a&gt;，&lt;a href=&quot;https://github.com/wjo1212/PythonChinaMeetup2020/blob/master/PythonChinaMeetup-20200510-Python3%E6%96%B0%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python3新特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;完备的测试用例&lt;/li&gt;
&lt;li&gt;必要的工具：future，用于自动修改不兼容的语法。six，用于Python版本判断。pylint，语法检查&lt;/li&gt;
&lt;li&gt;做好备份&lt;/li&gt;
&lt;li&gt;测试（至关重要），下面的每一步改动都得确保代码行为没有发生变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;future安装&quot;&gt;&lt;a href=&quot;#future安装&quot; class=&quot;headerlink&quot; title=&quot;future安装&quot;&gt;&lt;/a&gt;future安装&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pip install future -U&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="2to3" scheme="http://ponder.work/tags/2to3/"/>
    
  </entry>
  
  <entry>
    <title>《幸福的情绪》读书笔记</title>
    <link href="http://ponder.work/2020/05/05/%E3%80%8A%E5%B9%B8%E7%A6%8F%E7%9A%84%E6%83%85%E7%BB%AA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/05/05/%E3%80%8A%E5%B9%B8%E7%A6%8F%E7%9A%84%E6%83%85%E7%BB%AA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-05T03:17:00.000Z</published>
    <updated>2020-05-05T03:40:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记, 也是所有旧读书笔记的最后一篇</em></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本书主要讲述的是，我们必须去理解我们的情绪，情绪只是外显的东西，我们需要了解为何在这个时刻会产生这种情绪，它表明了什么。</p><p>借用书中的一句话：<br><strong>情绪或多或少地行使着相同的目的，那就是从一个艰难的世界中逃离。</strong></p><a id="more"></a><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>被冒犯的人通过扭转局面，将冒犯者置于失利的位置，从而保全自己的面子。</p><blockquote><p>阮云：所以弱者常常发怒。</p></blockquote><p>愤怒与否首先取决于它是否符合个人的长期利益。</p><p>愤怒如果无人知晓，那么它也失去了它存在的意义。</p><p>愤怒是对外的，恐惧是对内的。</p><blockquote><p>阮云：愤怒向外传递信息，恐惧让自己提高警惕</p></blockquote><p>恐惧或多或少地与某些自动的，即本能的大脑反应有关。</p><p>情绪更倾向于有明确或者具体的对象，而心境更倾向于不确定的对象。</p><p>大多数人需要学习的窍门是，能够快速地将那些快乐的时刻扩散到我们对整个世界的感觉中去。</p><p>性冲动（libido）利比多</p><blockquote><p>阮云：人之所以诉说就是渴望认同，故而倾听是极为重要的。</p></blockquote><p>阿里斯托芬：旧时有人四手四腿两个脑袋，宙斯因为人类的傲慢而将他们劈成两半，其中一半在地球上流浪，寻找“他的另一半”</p><p>爱共有的结构，那就是一个人的自我与另一个人的自我缠绕融合在一起。</p><p>同情带有明显的行动倾向。</p><p>当悲伤欢笑幸福放在一起时，它们才是最有意义的。</p><p>悲伤涉及的是自我的缺失。</p><p>当我们感到羞愧的时候，我们所意识到的自我以及我们真实存在常常是最为痛苦的。</p><p>羞愧、内疚、窘迫 — 自我评价型的情绪</p><p>窘迫涉及复杂的自我认知，这个自我是身处众人中的自我，它会受到别人期待和判断的影响，而这种影响被自我内化。</p><p>有责任感的人才会懊悔。<br><!--加缪：《局外人》《鼠疫》《堕落》--><br>骄傲和羞愧 — 自我评价型，带有部落特征</p><p>羡慕会使人有持续不断的挫败感，使人低估自己拥有的东西，挫败感超出了能承受的范围时，羡慕 -&gt; 怨恨</p><p>最直接有效的情绪理解方式应该是将注意力集中在我们的个人体验上。</p><p>情绪或多或少地行使着相同的目的，那就是从一个艰难的世界中逃离。</p><p>一个人爱的根本就不是爱人本身，而是一种投射。或是一种满足愿望的幻影，这一投射或幻影可能和真实的血肉之躯根本就没有什么关系。</p><p>为什么我要这么做，我从中能够获得什么</p><blockquote><p>阮云：理解你的情绪</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记, 也是所有旧读书笔记的最后一篇&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本书主要讲述的是，我们必须去理解我们的情绪，情绪只是外显的东西，我们需要了解为何在这个时刻会产生这种情绪，它表明了什么。&lt;/p&gt;
&lt;p&gt;借用书中的一句话：&lt;br&gt;&lt;strong&gt;情绪或多或少地行使着相同的目的，那就是从一个艰难的世界中逃离。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《情商》摘录</title>
    <link href="http://ponder.work/2020/05/05/%E3%80%8A%E6%83%85%E5%95%86%E3%80%8B%E6%91%98%E5%BD%95/"/>
    <id>http://ponder.work/2020/05/05/%E3%80%8A%E6%83%85%E5%95%86%E3%80%8B%E6%91%98%E5%BD%95/</id>
    <published>2020-05-05T01:17:00.000Z</published>
    <updated>2020-05-05T03:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em></p><p>对抑郁的忧虑会使我们的抑郁更加严重</p><p>忧虑是一项认知任务，个体如果把心理资源用于忧虑，就分散了用于处理其他信息的心理资源。<br><a id="more"></a><br>社交 — 情绪同步性</p><p>就事论事 — 维护关系</p><blockquote><p>阮云：单纯地发泄情绪对于关系是没有多大帮助的，你要表达出你的诉求。</p></blockquote><p>暴力行为的入侵性记忆</p><p>创伤有应激障碍引发的大脑变化是可以消除的，可从最直接的情绪印记当中复原，治愈的途径就是再学习。</p><p>创伤复原：获得安全感，记住创伤细节并哀悼由此造成的损失，最有重新恢复正常的生活。</p><p>行为疗法与药物一样有效。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对抑郁的忧虑会使我们的抑郁更加严重&lt;/p&gt;
&lt;p&gt;忧虑是一项认知任务，个体如果把心理资源用于忧虑，就分散了用于处理其他信息的心理资源。&lt;br&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《历史的先声》读书笔记</title>
    <link href="http://ponder.work/2020/05/04/%E3%80%8A%E5%8E%86%E5%8F%B2%E7%9A%84%E5%85%88%E5%A3%B0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/05/04/%E3%80%8A%E5%8E%86%E5%8F%B2%E7%9A%84%E5%85%88%E5%A3%B0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-04T01:17:00.000Z</published>
    <updated>2020-05-05T02:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>记得当时在学校图书馆借了这本书，对幼稚的三观产生了巨大冲击。</p><p>书中所记内容，像是渣男语录集结，而纯情少女们也正吃这套。为何呢？漂亮话总是容易说的，成本也小，当你说骚话撩妹的时候，肯定不会想着如何兑现，先撩到手再说。</p><p>然而承诺就截然不同了，每一个承诺都得考虑其可行性及付出的成本，自然是得审慎，也就没那么吸引人了。</p><p>最终，还是还是白给了渣男的的甜言蜜语。</p><a id="more"></a><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>把一党专政化一下妆，当做民主的代用品，方法虽然巧妙，然而和人民的愿望相去十万八千里。中国人民都在睁着眼睛看：不要拿民主的代用品来欺骗我们啊？  — 《新华日报》1945年1月28日<br><!-- > 阮云：共宣传民主无非是向国民党说：“你该下台了，轮到我了”，至于后面的事情，哪管那么多。--></p><blockquote><p>阮云：政客的话听听就好，但不要往心里去，政客的一切行为都应以动机论来分析</p><p>阮云：历史，特别是中国近代史，很少能分出个是非曲直，基本上都是屁股决定脑袋的事。</p></blockquote><p>学校受外力干涉，教学内容受党化思想的规范都是有害的事情。  — 《新华日报》1946年2月6日社论</p><blockquote><p>阮云：当时国人并未真正了解民主与自由，或者不想去了解，他们只是为了实现自己的目标而谈民主自由，而这个目标恰恰需要一个响亮的口号而已。</p></blockquote><p>英美民主国家的人民集会，结社，是无论性质、地点、参与者的职业、性别几何，事前均无须请求警察许可，亦无须报告警察。在我国，各种人民团体之成立，无论下级团体或者上级团体，均应先经政府许可。</p><p>除了汉奸和反动派，其他任何人，都有说话的自由。</p><blockquote><p>阮云：汉奸和反动派难度就没有说话自由吗？又是由谁来给这两者盖棺定论呢</p></blockquote><p>即使说错话了也是不要紧的，国事是国家的公事，不是一党一派的私事。 — 毛泽东《在陕甘宁边区参议会的演讲》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;记得当时在学校图书馆借了这本书，对幼稚的三观产生了巨大冲击。&lt;/p&gt;
&lt;p&gt;书中所记内容，像是渣男语录集结，而纯情少女们也正吃这套。为何呢？漂亮话总是容易说的，成本也小，当你说骚话撩妹的时候，肯定不会想着如何兑现，先撩到手再说。&lt;/p&gt;
&lt;p&gt;然而承诺就截然不同了，每一个承诺都得考虑其可行性及付出的成本，自然是得审慎，也就没那么吸引人了。&lt;/p&gt;
&lt;p&gt;最终，还是还是白给了渣男的的甜言蜜语。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《历史深处的忧虑》摘录</title>
    <link href="http://ponder.work/2020/05/02/%E3%80%8A%E5%8E%86%E5%8F%B2%E6%B7%B1%E5%A4%84%E7%9A%84%E5%BF%A7%E8%99%91%E3%80%8B%E6%91%98%E5%BD%95/"/>
    <id>http://ponder.work/2020/05/02/%E3%80%8A%E5%8E%86%E5%8F%B2%E6%B7%B1%E5%A4%84%E7%9A%84%E5%BF%A7%E8%99%91%E3%80%8B%E6%91%98%E5%BD%95/</id>
    <published>2020-05-02T01:17:00.000Z</published>
    <updated>2020-05-05T02:42:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em></p><p>如果你追求阳光，你就躲不开身后的阴影。</p><a id="more"></a><p>美国青年在刷盘子时不会因为自己屈才而痛感命运不公，怨天怨地</p><p>华裔看不起黑人，常常只是因为黑人比他们穷；讨厌犹太人，只是嫉妒犹太人比他们更有成就感。</p><p>政府的正当权利，是要经过被治理者的同意才产生的。</p><p>必须听那些听不下去的话，“这正是我们必须为自由支付的代价”。</p><p>如果你因为害怕一个不自由的时代，因此就不给他们言论自由的话，那么这个不自由的时代已经开始了。</p><p>秩序？（没有自由的秩序不是真正的秩序）</p><p>安全还是自由，美国每天都在面对新的选择</p><blockquote><p>阮云：自由美利坚，枪击每一天</p></blockquote><p>抢不是一种工具，枪是一种权利。</p><p>权力会导致腐败，绝对的权力导致绝对的腐败。</p><p>一个人的房子就像他的城堡，当他安安静静地等待在里头的时候，他就应该安全得像一个城堡里的王子。</p><p>美国最高法院裁定，根据种族而给予优惠，几乎是与宪法精神不符的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果你追求阳光，你就躲不开身后的阴影。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《Getting Things Done》读书笔记</title>
    <link href="http://ponder.work/2020/05/01/Getting-things-done-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/05/01/Getting-things-done-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-01T13:17:00.000Z</published>
    <updated>2020-05-02T03:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em><br><em>老拖延症企图又又从这本书中获得救赎之道，然而这笔记也拖延了许久。</em></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Getting Things Done（GTD），是一种时间管理的方法，确切地说是事项管理的方法，通过GTD可以将所有事项管理起来，提高效率的同事，降低心智损耗，减少个人焦虑</p><a id="more"></a><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>焦虑是由于缺乏控制力，组织管理，以及缺少准备和行动不足造成的。</p><p>目的：</p><ol><li>收集所有一切需要处理的事，把它们统一置入一个脱离大脑的逻辑系统中</li><li>训练自己在接受任何“输入”的前期就作出分析和计划，以确保在任何时候，都拥有一套可以立即执行的计划</li></ol><p>价值观促使我们首先在清单上积累了大量任务</p><p>静水对石子的反应：依物体的质量和力度作出相应的反应，既不过激也不会置之不理</p><blockquote><p>阮云：物来顺应</p></blockquote><p>学会对那些承诺的事情加以控制</p><p>收集所有那些“经常唤醒你模糊记忆”的事情，然后着手计划如何一一解决掉</p><p>在大脑中不留任何事情</p><p>自下而上的工作方法</p><p>“横向”管理涉及的所有行动</p><p>通常你大脑中盘踞问题的数量与其解决效率成反比</p><p>横向管理：收集（工作篮） - 加工 - 组织管理 - 检视（至少每周一次） - 执行</p><p>确定某一时刻行动的“四标准法”</p><ol><li>情景</li><li>有多少时间</li><li>有多少精力</li><li>重要性</li></ol><p>总体检视工作的“六极四顾法”</p><ul><li>五万英尺+：人生</li><li>四万英尺：3-5年的展望</li><li>三万英尺：1-2年的目标</li><li>二万英尺：责任范围</li><li>一万英尺：当前的项目</li><li>跑道：目前的行动</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;br&gt;&lt;em&gt;老拖延症企图又又从这本书中获得救赎之道，然而这笔记也拖延了许久。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Getting Things Done（GTD），是一种时间管理的方法，确切地说是事项管理的方法，通过GTD可以将所有事项管理起来，提高效率的同事，降低心智损耗，减少个人焦虑&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="拖延症" scheme="http://ponder.work/tags/%E6%8B%96%E5%BB%B6%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>《意志力：受益一生的潜能开发工具》读书笔记</title>
    <link href="http://ponder.work/2020/04/24/%E3%80%8A%E6%84%8F%E5%BF%97%E5%8A%9B%EF%BC%9A%E5%8F%97%E7%9B%8A%E4%B8%80%E7%94%9F%E7%9A%84%E6%BD%9C%E8%83%BD%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/04/24/%E3%80%8A%E6%84%8F%E5%BF%97%E5%8A%9B%EF%BC%9A%E5%8F%97%E7%9B%8A%E4%B8%80%E7%94%9F%E7%9A%84%E6%BD%9C%E8%83%BD%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-24T13:17:00.000Z</published>
    <updated>2020-04-25T11:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em><br><em>老拖延症又企图从这本书中获得救赎之道，然而这笔记也拖延了许久。</em></p><p>意志力训练的关键：专注于目标，合乎道德。</p><p>意志力需要渐渐积累的</p><p>增强意志力的心态：兴趣，充沛的精力，顺其自然，理解（对事情的理性分析与接受），正直，自尊。</p><p>意志力走偏的表现与诊治：</p><ol><li>缺乏激情：规划日程，努力实现一个目标。</li><li>迟疑不决：积极乐观地看待问题，努力看到事情积极面</li></ol><p>教育的关键是：让我们的内心成为我们忠诚的朋友，而不是对立的敌人</p><a id="more"></a><p>不要一味仿效他人，那样只会讲你变成他人的影子，难以有所突破。要想有自己的看法，他就要有意识地计费新想法，开拓新思维，从而找到自己的发展之路。</p><p>不要懈怠目前从事的任何工作。</p><p>如果头脑里同时在考虑许多事情，就不要在此时下决定，因为你不可能同时既钓鱼又打猎。</p><p>意志力训练方法</p><ol><li>视觉训练：a. 以平常的步速走入房间，在房间里转一圈，然后走出房间，并记录下你刚才看到的全部物品。b. 目视前方，凝视其中一个离自己较近的物体，默数六十下以后，闭上眼睛，努力回想物体的轮廓和具体形象。c. 无论遇到谁，都要目光沉稳，态度坦然地看着对方，并让对方的一言一行全部在你的目光之中。</li><li>听觉训练：用心倾听，并记录下自己听到的所有声音，分辨其来源强度。</li><li>每天临睡前，回想一下白天见到的任何人和遇到的任何事，直到你能回忆起更多的人；你想去某个地方的时候看一下地图，闭上眼睛回忆地图上的标识。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;br&gt;&lt;em&gt;老拖延症又企图从这本书中获得救赎之道，然而这笔记也拖延了许久。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;意志力训练的关键：专注于目标，合乎道德。&lt;/p&gt;
&lt;p&gt;意志力需要渐渐积累的&lt;/p&gt;
&lt;p&gt;增强意志力的心态：兴趣，充沛的精力，顺其自然，理解（对事情的理性分析与接受），正直，自尊。&lt;/p&gt;
&lt;p&gt;意志力走偏的表现与诊治：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缺乏激情：规划日程，努力实现一个目标。&lt;/li&gt;
&lt;li&gt;迟疑不决：积极乐观地看待问题，努力看到事情积极面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;教育的关键是：让我们的内心成为我们忠诚的朋友，而不是对立的敌人&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《意志力：关于专注、自控与效率的心理学》读书笔记</title>
    <link href="http://ponder.work/2020/04/23/%E3%80%8A%E6%84%8F%E5%BF%97%E5%8A%9B%EF%BC%9A%E5%85%B3%E4%BA%8E%E4%B8%93%E6%B3%A8%E3%80%81%E8%87%AA%E6%8E%A7%E4%B8%8E%E6%95%88%E7%8E%87%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/04/23/%E3%80%8A%E6%84%8F%E5%BF%97%E5%8A%9B%EF%BC%9A%E5%85%B3%E4%BA%8E%E4%B8%93%E6%B3%A8%E3%80%81%E8%87%AA%E6%8E%A7%E4%B8%8E%E6%95%88%E7%8E%87%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-23T13:17:00.000Z</published>
    <updated>2020-04-25T10:12:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文为整理以前的读书笔记</em><br><em>老拖延症企图从这本书中获得救赎之道，然而这笔记也拖延了许久。总体来说理论是很有道理的。</em></p><p>人们醒着的时候，把大约1/4的时间用来抵制欲望，每天至少4个小时。首先是食欲，其次睡欲，休闲欲，性欲，交往欲。</p><p>平均而言，用意志力抵制欲望，10次当中只有5次是成果的。</p><blockquote><p>阮云：严重高估，我大概有一次成功</p></blockquote><p>邓巴最后下结论，大脑进化得越来越大，并不是为了应付物理环境，而是为了应付社会环境。</p><p>意志力像肌肉一样，过度使用会疲劳，长期锻炼会增强。</p><p>自我损耗：人们对自己思维感受和行为调节能力减弱的过程。</p><a id="more"></a><p>压力真正做的是损耗意志力，而这会减弱情绪控制能力。</p><blockquote><p>阮云：真是感同身受，以前有段时间压力大，常常发无明业火。</p></blockquote><p>你的意志力是有限的，使用就会消耗；你从同一账户提取意志力用于各种不同任务。</p><p>为了保持自制力，吃转化为葡萄糖慢的食物（蔬果鱼肉蛋奶）</p><blockquote><p>阮云：所以穷人普遍缺乏自制力，部分原因是高碳水饮食</p></blockquote><p>互相冲突目标造成：1. 愁得多；2. 做得少； 3. 身心健康变差</p><p>为不太重要的熟人做决定消耗的意志力远少于为自己做决定。</p><p>意志力下降，偏爱做风险小的选择，比如说找借口避免、推迟决策。</p><p>折中是类别特别高级，特别困难的决策，折中能力是意志力耗尽之后第一个衰退的能力</p><blockquote><p>阮云：所以推销员让顾客疲于选择也是一种策略</p></blockquote><p>练习情绪控制不会增强你的意志力；意志力的“力量”不同于意志力的“耐力”</p><p>提升意志力的关键，集中精力改变一个习惯。</p><p>许可效应：做了好事就表现得好像有了做坏事的权利</p><blockquote><p>阮云：做了运动就喝杯奶茶奖励自己</p></blockquote><p>情绪温差：在理性，冷静的“冷温”状态，体会不到充满激情和欲望的“高温”状态有何表现。</p><blockquote><p>阮云：人的感觉中的时间并不是均匀分布的，离你近的时间会变短，最后期限是做加速运动向人而来。</p></blockquote><p>一旦用意志力把刮胡子变为习惯，刮胡子就变成了相对自动的心智过程，再也不用什么意志力。</p><p>棉花糖实验：一直盯着棉花糖的孩子迅速耗尽了意志力，分散注意力的孩子成功坚持下来。</p><p>宗教有利于增强自我控制的两个要素：意志力和行为监控。</p><p>建议无神论者寻找自己的一套神圣价值观。</p><p>零容忍是一条明线：完全戒除，任何时候都没例外，一旦遵守一条明线规则，你“现在自我”会相信“未来自我”也会遵守它。</p><p>高自尊好处：</p><ol><li>提高主动性，很可能因为它增强自信</li><li>它让人感觉良好</li></ol><p>惩罚有3个基本方向：严厉性，及时性，一致性（后两者更为重要）</p><p>费伯入眠法：忽略婴儿哭泣 — 安慰 — 走开 — 重复到入睡</p><p>进化喜欢那种能在饥荒中活下来的人，所以身体一旦有吃不饱的经历就会努力保存所有脂肪。</p><blockquote><p>阮云：所以节食减肥容易反弹</p></blockquote><p>反条件进食（去它的效应）：超过限量后大吃大喝</p><blockquote><p>阮云：破罐子破摔</p></blockquote><p>实施意向（implement intention）: 把行为自动化。实施意向要以“如果”…“那么”…形式出现， 如果x发生了，我一定会做y，利用这个技术把行为自动化，减少消费的努力</p><p>告诉自己“稍后再吃”，在心理上和现在就吃一样</p><p>损耗意志力的是斗争而不是结果</p><p>帕金森定律：有多少时间，工作就能做多久。</p><p>计划谬误：高估能力，低估所需时间。解决方法：强迫自己想过去的做法。</p><p>想做不好的事时，请尽量往后拖延。</p><p>如果你只用意志力拒绝东西，那么它就成了残忍讨厌的防守工具。但是当你用意志力获得东西，你就能从最枯燥的任务中体会到乐趣。</p><blockquote><p>阮云：所以做苦行僧不如，得到应得的奖励。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;本文为整理以前的读书笔记&lt;/em&gt;&lt;br&gt;&lt;em&gt;老拖延症企图从这本书中获得救赎之道，然而这笔记也拖延了许久。总体来说理论是很有道理的。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;人们醒着的时候，把大约1/4的时间用来抵制欲望，每天至少4个小时。首先是食欲，其次睡欲，休闲欲，性欲，交往欲。&lt;/p&gt;
&lt;p&gt;平均而言，用意志力抵制欲望，10次当中只有5次是成果的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;阮云：严重高估，我大概有一次成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;邓巴最后下结论，大脑进化得越来越大，并不是为了应付物理环境，而是为了应付社会环境。&lt;/p&gt;
&lt;p&gt;意志力像肌肉一样，过度使用会疲劳，长期锻炼会增强。&lt;/p&gt;
&lt;p&gt;自我损耗：人们对自己思维感受和行为调节能力减弱的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="心理学" scheme="http://ponder.work/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
</feed>
