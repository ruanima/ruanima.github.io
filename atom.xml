<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逸思杂陈</title>
  <icon>https://www.gravatar.com/avatar/071e91e4d2b41eefac3330385d124f95</icon>
  <subtitle>人类一思考，上帝就发笑。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ponder.work/"/>
  <updated>2021-04-23T07:51:03.396Z</updated>
  <id>http://ponder.work/</id>
  
  <author>
    <name>Jay.Run</name>
    <email>ruan.lj@foxmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis原理 —— zskiplist 跳跃表</title>
    <link href="http://ponder.work/2021/04/20/redis-soure-code-data-structure-zskiplist/"/>
    <id>http://ponder.work/2021/04/20/redis-soure-code-data-structure-zskiplist/</id>
    <published>2021-04-20T13:48:00.000Z</published>
    <updated>2021-04-23T07:51:03.396Z</updated>
    
    <content type="html"><![CDATA[<p>跳跃表 （skiplist) 是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的 指针，从而达到快速访问节点的目的。</p><p>跳跃表优点</p><ul><li>表支持平均<code>O(logN)</code>, 最坏<code>O(N)</code>复杂度的节点查找，效率可以和平衡树相当</li><li>通过顺序性操作来批量处理节点</li><li>实现比平衡树要来得更为简单</li></ul><p>因为<code>ziplist</code>内存占用较小，所以Redis使用作为有序集合的初始底层结构。<br>如果一个有序集合包含的元素数量比较多（大于<code>zset-max-ziplist-entries</code>），又或者有序集合中元素的成员是比较长的字符串时（大于<code>zset-max-ziplist-value</code>），Redis就会将其底层结构转换为跳跃表。</p><a id="more"></a><h2 id="zskiplist-数据结构"><a href="#zskiplist-数据结构" class="headerlink" title="zskiplist 数据结构"></a>zskiplist 数据结构</h2><p>跳跃表节点, 其中<code>zskiplistLevel</code>成员是<a href="https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html" target="_blank" rel="noopener">柔性数组</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line">    <span class="comment">// 成员对象</span></span><br><span class="line">    robj *obj;</span><br><span class="line">    <span class="comment">// 分值</span></span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">    <span class="comment">// 后退指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line">    <span class="comment">// 层</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">        <span class="comment">// 前进指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line">        <span class="comment">// 跨度，经过的节点数目</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> span;</span><br><span class="line">    &#125; level[];  <span class="comment">// 柔性数组</span></span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure></p><p>跳跃表<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line">    <span class="comment">// 表头节点和表尾节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line">    <span class="comment">// 表中节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> length;</span><br><span class="line">    <span class="comment">// 表中层数最大的节点的层数</span></span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure></p><p><img src="http://image.runjf.com/mweb/2021-04-23-16190066207268.jpg" alt></p><p>所谓跳跃表，就是多层链表（redis中的实现是最多32层）通过额外的链接提高效率，从低层到高层，节点之间的跨度逐渐变大。</p><p>跨度越大则查找效率越高，所以查找时是从高层往底层查找。</p><p>如果节点的最高层高为x，则可以认为该节点就存储在低x层，则表头到该节点的跨度之和为该节点的rank(排位)，所有节点的最大层高为跳跃表层高。</p><h2 id="跳跃表插入节点"><a href="#跳跃表插入节点" class="headerlink" title="跳跃表插入节点"></a>跳跃表插入节点</h2><p>因为跳跃表是多层链表，所以插入节点的关键是找到每一层插入的位置，以及插入位置的跨度变化，还有新节点的跨度计算。</p><p>python 版跳跃表插入实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较节点大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_node_lt</span><span class="params">(node: zskiplistNode, score: float, obj: robj)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node.score &lt; score:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> (node.score == score <span class="keyword">and</span></span><br><span class="line">        compareStringObjects(node.obj, obj) &lt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zslInsert</span><span class="params">(zsl: zskiplist, score: float, obj: robj)</span> -&gt; zskiplistNode:</span></span><br><span class="line">    <span class="comment"># update list记录的是每一层, 新节点需要插入的位置(新节点x的backward节点指针)</span></span><br><span class="line">    update: List[Opt[zskiplistNode]] = [<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(ZSKIPLIST_MAXLEVEL)]</span><br><span class="line">    <span class="comment"># rank[i]: 从高到低, 到第i层为止经过的所有node的span总和, 也就是节点的排序</span></span><br><span class="line">    <span class="comment"># 用于计算新节点各层的span, 以及新节点的后继节点各层的span</span></span><br><span class="line">    rank = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(ZSKIPLIST_MAXLEVEL)]</span><br><span class="line">    x = zsl.header</span><br><span class="line">    <span class="comment"># 从高层开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(zsl.level<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        rank[i] = <span class="number">0</span> <span class="keyword">if</span> i == zsl.level<span class="number">-1</span> <span class="keyword">else</span> rank[i+<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 找到每一层x需要插入的位置, 并更新rank</span></span><br><span class="line">        <span class="keyword">while</span> x.level[i].forward <span class="keyword">and</span> _node_lt(x.level[i].forward, score, obj):</span><br><span class="line">            rank[i] += x.level[i].span</span><br><span class="line">            x = x.level[i].forward</span><br><span class="line">        <span class="comment"># 对于每一层i, 新节点会插入到update[i].level[i]之后</span></span><br><span class="line">        update[i] = x</span><br><span class="line">    level = zslRandomLevel()  <span class="comment"># 取一个随机层数, 使zskiplist，每层节点更为均衡</span></span><br><span class="line">    <span class="comment"># 新节点层高增大的情况，更新扩展层的默认跨度</span></span><br><span class="line">    <span class="keyword">if</span> level &gt; zsl.level:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(zsl.level, level):</span><br><span class="line">            rank[i] = <span class="number">0</span></span><br><span class="line">            update[i] = zsl.header</span><br><span class="line">            update[i].level[i].span = zsl.length </span><br><span class="line">        zsl.level = level</span><br><span class="line">    <span class="comment"># 更新节点x和前驱节点已有层的跨度</span></span><br><span class="line">    x = zslCreateNode(level, score, obj)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(level):</span><br><span class="line">        x.level[i].forward = update[i].level[i].forward</span><br><span class="line">        update[i].level[i].forward = x </span><br><span class="line">        x.level[i].span = update[i].level[i].span - (rank[<span class="number">0</span>] - rank[i])  </span><br><span class="line">        update[i].level[i].span = (rank[<span class="number">0</span>] - rank[i]) + <span class="number">1</span> </span><br><span class="line">    <span class="comment"># 更新前驱节点扩展层的跨度，x节点这些层没有后继节点，所以跨度为0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(level, zsl.level):</span><br><span class="line">        update[i].level[i].span += <span class="number">1</span>  <span class="comment"># type: ignore</span></span><br><span class="line">    <span class="comment"># 设置新节点的后退指针, level[0]才有后退指针</span></span><br><span class="line">    x.backward = <span class="literal">None</span> <span class="keyword">if</span> update[<span class="number">0</span>] == zsl.header <span class="keyword">else</span> update[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> x.level[<span class="number">0</span>].forward:</span><br><span class="line">        x.level[<span class="number">0</span>].forward.backward = x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        zsl.tail = x</span><br><span class="line">    zsl.length += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure></p><h2 id="跳跃表查找"><a href="#跳跃表查找" class="headerlink" title="跳跃表查找"></a>跳跃表查找</h2><p>跳跃表的查找则是从高层向低层查找，沿着最高层链表前进；遇到大于目标值的节点，则往下一层，直到找到相等的值为止。</p><p>经过的所有节点的跨度相加即是目标节点的rank。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zslGetRank</span><span class="params">(zsl: zskiplist, score: float, obj: robj)</span> -&gt; int:</span></span><br><span class="line">    rank = <span class="number">0</span></span><br><span class="line">    x = zsl.header</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(zsl.level<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">while</span> x.level[i].forward <span class="keyword">and</span> _node_lt(x.level[i].forward, score, obj):</span><br><span class="line">            rank += x.level[i].span</span><br><span class="line">            x = x.level[i].forward</span><br><span class="line">        <span class="keyword">if</span> x.obj <span class="keyword">and</span> equalStringObjects(x.obj, obj):</span><br><span class="line">            <span class="keyword">return</span> rank</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>查找score=2.0的o2对象的过程<br><img src="http://image.runjf.com/mweb/2021-04-23-16191635872238.jpg" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>redis 3.0 源码</li><li>redis 设计与实现</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跳跃表 （skiplist) 是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的 指针，从而达到快速访问节点的目的。&lt;/p&gt;
&lt;p&gt;跳跃表优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表支持平均&lt;code&gt;O(logN)&lt;/code&gt;, 最坏&lt;code&gt;O(N)&lt;/code&gt;复杂度的节点查找，效率可以和平衡树相当&lt;/li&gt;
&lt;li&gt;通过顺序性操作来批量处理节点&lt;/li&gt;
&lt;li&gt;实现比平衡树要来得更为简单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为&lt;code&gt;ziplist&lt;/code&gt;内存占用较小，所以Redis使用作为有序集合的初始底层结构。&lt;br&gt;如果一个有序集合包含的元素数量比较多（大于&lt;code&gt;zset-max-ziplist-entries&lt;/code&gt;），又或者有序集合中元素的成员是比较长的字符串时（大于&lt;code&gt;zset-max-ziplist-value&lt;/code&gt;），Redis就会将其底层结构转换为跳跃表。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Redis" scheme="http://ponder.work/tags/Redis/"/>
    
      <category term="C" scheme="http://ponder.work/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Redis原理 —— dict 数据结构</title>
    <link href="http://ponder.work/2021/04/17/redis-soure-code-data-structure-dict/"/>
    <id>http://ponder.work/2021/04/17/redis-soure-code-data-structure-dict/</id>
    <published>2021-04-17T01:48:00.000Z</published>
    <updated>2021-04-20T12:03:33.232Z</updated>
    
    <content type="html"><![CDATA[<p>这是Redis源码阅读系列第一篇文章。</p><p>dict 是 redis 最重要的数据结构，db、hash、以及服务器内部需要用到hashmap的场景都是用dict来实现的。学习 dict 的源码，我们可以学到hashmap的原理及实现。<br><a id="more"></a></p><h2 id="dict-数据结构"><a href="#dict-数据结构" class="headerlink" title="dict 数据结构"></a>dict 数据结构</h2><p>哈希表元素节点<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="comment">// 键，指向SDS(Redis字符串实现)</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="comment">// 值, 联合值, 可以是整数或者指针</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="comment">// 指向下个哈希表节点，形成链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure></p><p>哈希表<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    <span class="comment">// 哈希表元素数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="comment">// 哈希表大小，初始值为4</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="comment">// 哈希表大小掩码，用于计算索引值，总是等于 size - 1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line">    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure></p><p>字典<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    <span class="comment">// 类型特定操作函数</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="comment">// 私有数据，保存了需要传给那些类型特定函数的可选参数</span></span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line">    <span class="comment">// 哈希表，ht[1]在rehash的时候使用</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// rehash 索引，当 rehash 不在进行时，值为 -1</span></span><br><span class="line">    <span class="keyword">int</span> rehashidx; </span><br><span class="line">    <span class="comment">// 目前正在运行的安全迭代器的数量</span></span><br><span class="line">    <span class="keyword">int</span> iterators;</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure></p><p>结构体，储存不同类型字典的操作函数指针，实现了多态<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line">    <span class="comment">// 计算哈希值的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*hashFunction)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line">    <span class="comment">// 复制键的函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*keyDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key);</span><br><span class="line">    <span class="comment">// 复制值的函数</span></span><br><span class="line">    <span class="keyword">void</span> *(*valDup)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *obj);</span><br><span class="line">    <span class="comment">// 对比键的函数</span></span><br><span class="line">    <span class="keyword">int</span> (*keyCompare)(<span class="keyword">void</span> *privdata, <span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line">    <span class="comment">// 销毁键的函数</span></span><br><span class="line">    <span class="keyword">void</span> (*keyDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *key);</span><br><span class="line">    <span class="comment">// 销毁值的函数</span></span><br><span class="line">    <span class="keyword">void</span> (*valDestructor)(<span class="keyword">void</span> *privdata, <span class="keyword">void</span> *obj);</span><br><span class="line">&#125; dictType;</span><br></pre></td></tr></table></figure></p><p><img src="http://image.runjf.com/mweb/2021-04-18-16187320239054.jpg" alt="-w789"></p><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p>redis 的 dict 本质上就是个hashmap，其中的关键是哈希算法。</p><p>哈希函数（英语：Hash function）又称散列算法、散列函数，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值的指纹。</p><p>比如取模函数就是一种最简单的对整数的哈希算法。</p><p>当字典被用作数据库的底层实现，或者哈希键的底层实现时，Redis使用 <a href="https://zh.wikipedia.org/wiki/Murmur%E5%93%88%E5%B8%8C" target="_blank" rel="noopener">MurmurHash2</a> 算法来计算键的哈希值。</p><p>具体求索引的过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求哈希值</span></span><br><span class="line">hash = dict-&gt;type-&gt;hashFunction(kO);</span><br><span class="line"><span class="comment">// 根据哈希值和掩码计算出元素节点索引</span></span><br><span class="line">index = hash &amp; dict-&gt;ht[<span class="number">0</span>].sizemask</span><br></pre></td></tr></table></figure><h2 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h2><p>当有两个或以上数量的键被分配到了哈希表数组的同一个索引上面时，我们称这些键发生了冲突。</p><p>Redis的哈希表使用链地址法（separate chaining) 来解决键冲突，每个哈希表节点都有一个next指针，多个哈希表节点可以用 next指针构成一个单向链表，被分配到同一个索 引上的多个节点可以用这个单向链表连接起来，这就解决了键冲突的问题。</p><p><img src="http://image.runjf.com/mweb/2021-04-18-16187328149108.jpg" alt="-w722"></p><p>还有一种常用的冲突解决办法是再哈希法，就是同时构造多个不同的哈希函数。<br>当H1 = hashfunc1(key) 发生冲突时，再用H2 = hashfunc1(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。</p><h2 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h2><p>随着操作的不断执行，哈希表保存的键值对会逐渐地增多或者减少，为了让哈希表的负载因子（used/size)维持在一个合理的范围之内，程序需要对哈希表的大小进行相应的扩展或者收缩, 这个过程就是rehash。</p><p>Redis对字典的哈希表执行rehash的步骤如下：</p><ol><li>为字典的<code>ht[1]</code>哈希表分配空间</li><li>将保存在<code>ht[0]</code>中的所有键值对rehash到<code>ht[1]</code>上面：rehash指的是重新计算键的哈希值和索引值，然后将键值对放置到<code>ht[1]</code>哈希表的指定位置上</li><li>全部复制完成后，释放<code>ht[0]</code>，将<code>ht[1]</code>设置为<code>ht[0]</code>，重置<code>ht[1]</code></li></ol><h3 id="渐进式-rehash"><a href="#渐进式-rehash" class="headerlink" title="渐进式 rehash"></a>渐进式 rehash</h3><p>所谓渐进式，是指rehash动作并不是一次性、集中式地完成的，而是分多次、渐进式地完成的。</p><p>由于redis是单线程的, 哈希表里保存的键值对又可能非常多，一次性将这些键值对全部rehash到ht[1]，会导致服务器在一段时间内停止服务。</p><p>所以需要渐进式 rehash，在字典的每个添加、删除 、查找和更新操作的时候，顺便进行部分元素的 rehash（目前实现是rehash一个元素），避免了集中式rehash而带来的庞大计算量。</p><p>rehash 示例代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dictRehash</span><span class="params">(d: rDict, n: int)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> dictIsRehashing(d):  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">while</span> (n):</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> d.ht[<span class="number">0</span>].used == <span class="number">0</span>:  <span class="comment"># rehash 完成了</span></span><br><span class="line">            <span class="keyword">del</span> d.ht[<span class="number">0</span>].table</span><br><span class="line">            d.ht[<span class="number">0</span>] = c_assignment(d.ht[<span class="number">1</span>])</span><br><span class="line">            _dictReset(d.ht[<span class="number">1</span>])</span><br><span class="line">            d.rehashidx = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> d.ht[<span class="number">0</span>].size &gt; d.rehashidx</span><br><span class="line">        <span class="comment"># 找到第一个需要移动的元素</span></span><br><span class="line">        <span class="keyword">while</span> d.ht[<span class="number">0</span>].table[d.rehashidx] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            d.rehashidx += <span class="number">1</span></span><br><span class="line">        de = d.ht[<span class="number">0</span>].table[d.rehashidx]</span><br><span class="line">        <span class="keyword">while</span> de:  <span class="comment"># 移动该元素（包含整个冲突链表）到ht[1]</span></span><br><span class="line">            nextde = de.next</span><br><span class="line">            h = dictHashKey(d, de.key) &amp; d.ht[<span class="number">1</span>].sizemask</span><br><span class="line">            de.next = d.ht[<span class="number">1</span>].table[h]</span><br><span class="line">            d.ht[<span class="number">1</span>].table[h] = de  <span class="comment"># 复制dictEntry元素</span></span><br><span class="line">            d.ht[<span class="number">0</span>].used -= <span class="number">1</span></span><br><span class="line">            d.ht[<span class="number">1</span>].used += <span class="number">1</span></span><br><span class="line">            de = nextde</span><br><span class="line">        d.ht[<span class="number">0</span>].table[d.rehashidx] = <span class="literal">None</span></span><br><span class="line">        d.rehashidx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>除了渐进式rehash，对于redis的多个db，也会有定时任务进行主动rehash，防止服务器长期没有执行命令时，数据库字典的 rehash 一直没办法完成。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>redis 3.0 源码</li><li>redis 设计与实现</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是Redis源码阅读系列第一篇文章。&lt;/p&gt;
&lt;p&gt;dict 是 redis 最重要的数据结构，db、hash、以及服务器内部需要用到hashmap的场景都是用dict来实现的。学习 dict 的源码，我们可以学到hashmap的原理及实现。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Redis" scheme="http://ponder.work/tags/Redis/"/>
    
      <category term="C" scheme="http://ponder.work/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>滴答清单与小米手环6 —— 近乎完美的番茄工作法方案</title>
    <link href="http://ponder.work/2021/04/16/pomodoro-technique-and-mi-band-6/"/>
    <id>http://ponder.work/2021/04/16/pomodoro-technique-and-mi-band-6/</id>
    <published>2021-04-16T04:26:00.000Z</published>
    <updated>2021-04-19T01:27:32.768Z</updated>
    
    <content type="html"><![CDATA[<style type="text/css" rel="stylesheet">img[alt="-w350"] {     width: 350px}</style><p>一直在寻找比较好的番茄工作法工具，但是都不那么满意。</p><p>物理番茄钟，主要问题是不够灵活，比如调整番茄时长，而且不能和GTD清单同步。</p><p>手机app的话，番茄钟结束的提醒声音过于吵闹，特别在公共场合，比如公司或者图书馆；如果静音或者震动的话，又常常感知不到，导致经常关注番茄钟时间，不能集中精力。</p><p>也用过安卓智能手表，但目前番茄工作法相关应用还是很少，没有找到合适的，而且手表续航太短，高强度使用基本得每天充电，心智负担大。</p><p>之前也用过手机番茄app配合手环，通过手环震动提醒番茄钟结束，方法可行，但是通知经常触达不到，体验不好。</p><p>最近<strong>小米手环6</strong>上市了，经过几天摸索，发现配合<strong>滴答清单</strong>的专注功能，以及<strong>小米穿戴</strong>的通知提醒，总体体验挺好，通知也准确，应当是目前最好的番茄工作法方案了。<br><a id="more"></a></p><p>下面讲一下具体如何配置</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>小米穿戴app - 我的 - 开启通知相关权限<br><img src="http://image.runjf.com/mweb/2021-04-17-v2-083dc66a6eac131538658e0718197f8a_1440w.jpg" alt="-w350"></p></li><li><p>小米穿戴app - 我的 - 消息通知<br><img src="http://image.runjf.com/mweb/2021-04-17-v2-1456fe9137371ebec9f71507c539893d_1440w.jpg" alt="-w350"></p></li><li><p>小米穿戴app - 我的 - 设备更多设置 - 震动模式 - App通知提醒 - 添加震动模式（可选）<br><img src="http://image.runjf.com/mweb/2021-04-17-v2-ff6418a487908a51642bec98c7a17179_1440w.jpg" alt="-w350"></p></li><li><p>滴答清单app - 番茄专注 - 开始<br><img src="http://image.runjf.com/mweb/2021-04-17-v2-32488091b7f87efd080108626d1f9d1f_1440w.jpg" alt="-w350"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;
img[alt=&quot;-w350&quot;] { 
    width: 350px
}
&lt;/style&gt;

&lt;p&gt;一直在寻找比较好的番茄工作法工具，但是都不那么满意。&lt;/p&gt;
&lt;p&gt;物理番茄钟，主要问题是不够灵活，比如调整番茄时长，而且不能和GTD清单同步。&lt;/p&gt;
&lt;p&gt;手机app的话，番茄钟结束的提醒声音过于吵闹，特别在公共场合，比如公司或者图书馆；如果静音或者震动的话，又常常感知不到，导致经常关注番茄钟时间，不能集中精力。&lt;/p&gt;
&lt;p&gt;也用过安卓智能手表，但目前番茄工作法相关应用还是很少，没有找到合适的，而且手表续航太短，高强度使用基本得每天充电，心智负担大。&lt;/p&gt;
&lt;p&gt;之前也用过手机番茄app配合手环，通过手环震动提醒番茄钟结束，方法可行，但是通知经常触达不到，体验不好。&lt;/p&gt;
&lt;p&gt;最近&lt;strong&gt;小米手环6&lt;/strong&gt;上市了，经过几天摸索，发现配合&lt;strong&gt;滴答清单&lt;/strong&gt;的专注功能，以及&lt;strong&gt;小米穿戴&lt;/strong&gt;的通知提醒，总体体验挺好，通知也准确，应当是目前最好的番茄工作法方案了。&lt;br&gt;
    
    </summary>
    
    
      <category term="工作生活" scheme="http://ponder.work/categories/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="番茄工作法" scheme="http://ponder.work/tags/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/"/>
    
      <category term="GTD" scheme="http://ponder.work/tags/GTD/"/>
    
  </entry>
  
  <entry>
    <title>gmtime 在多线程环境使用引发的 bug</title>
    <link href="http://ponder.work/2021/04/15/gmtime-multi-thread-problem/"/>
    <id>http://ponder.work/2021/04/15/gmtime-multi-thread-problem/</id>
    <published>2021-04-15T13:48:00.000Z</published>
    <updated>2021-04-16T11:16:43.864Z</updated>
    
    <content type="html"><![CDATA[<p>话接<a href="/2021/03/25/xgboost-multi-thread-problem-debug-and-fix/">上文</a>，还是这个 C++ 模型服务，在并发请求的情况下，大概有0.01%的请求部分模型分数不对。定位这种问题，对一个Python程序员来说，真是苦手。还好，经过调整代码不断测试，最终完美解决了问题。</p><a id="more"></a><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>对比数据，可以发现和请求中的某个时间字段有关。关键逻辑代码如下，主要是一个时间差的计算。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string date_str = "2019-01-01 00:00:00";</span></span><br><span class="line"><span class="comment">// string date_appl = "2012-01-01 00:00:00";</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">test_a</span><span class="params">(<span class="built_in">string</span>&amp; date_str, <span class="built_in">string</span>&amp; date_appl, tm&amp; tm_appl)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(date_str.substr(<span class="number">0</span>,<span class="number">10</span>))</span></span>;</span><br><span class="line">    <span class="keyword">int</span> date_sec;</span><br><span class="line">    ss &gt;&gt; date_sec;  <span class="comment">// stringstream to int </span></span><br><span class="line">    <span class="keyword">time_t</span> ts_date_1 = date_sec + <span class="number">8</span>*<span class="number">3600</span>;</span><br><span class="line">    tm* tm_date = gmtime(&amp;ts_date_1);  <span class="comment">// timestemp to tm </span></span><br><span class="line">    tm_date-&gt;tm_hour = <span class="number">0</span>;</span><br><span class="line">    tm_date-&gt;tm_min = <span class="number">0</span>;</span><br><span class="line">    tm_date-&gt;tm_sec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> seconds = difftime(mktime(&amp;tm_appl), mktime(tm_date)); <span class="comment">// diff timestemp</span></span><br><span class="line">    <span class="keyword">return</span> seconds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据之前的经验，肯定是该函数内部某些操作非线程安全的, 通过google搜索（关键词: gmtime thread safe）和询问朋友，得到以下信息。</p><ul><li>stringstream to int: 这里date_sec变量不存在竞争条件，所以安全</li><li>gmtime: 不安全</li><li>mktime: 时区不变的情况下安全</li><li>difftime: 安全</li></ul><p>bug应该是来自<code>gmtime</code>，该函数返回的是tm结构体指针，指向的是一个 static 结构体，所以不是线程安全，可以用<code>gmtime_r</code>函数替换。</p><p>修改之后<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">test_a</span><span class="params">(<span class="built_in">string</span>&amp; date_str, <span class="built_in">string</span>&amp; date_appl, tm&amp; tm_appl)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(date_str.substr(<span class="number">0</span>,<span class="number">10</span>))</span></span>;</span><br><span class="line">    <span class="keyword">int</span> date_sec;</span><br><span class="line">    ss &gt;&gt; date_sec;  <span class="comment">// stringstream to int </span></span><br><span class="line">    <span class="keyword">time_t</span> ts_date_1 = date_sec + <span class="number">8</span>*<span class="number">3600</span>;</span><br><span class="line">    tm tm_date;</span><br><span class="line">    gmtime_r(&amp;ts_date_1, &amp;tm_date);</span><br><span class="line">    tm_date.tm_hour = <span class="number">0</span>;</span><br><span class="line">    tm_date.tm_min = <span class="number">0</span>;</span><br><span class="line">    tm_date.tm_sec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> seconds = difftime(mktime(&amp;tm_appl), mktime(&amp;tm_date));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经过测试，bug得以解决。但是同时发现一个问题，程序的qps下降了1/3。</p><h2 id="QPS下降"><a href="#QPS下降" class="headerlink" title="QPS下降"></a>QPS下降</h2><p>编程测试代码测试对比<code>gmtime_r</code>和<code>gmtime</code>耗时上并没有显著差别。而且如果不调用<code>gmtime_r</code>只声明<code>tm tm_date</code>，qps也是一样下降。</p><p>考虑到这个函数，在服务中调用次数比较多，而且自动变量的栈空间在函数调用时就会分配, tm结构体又比较大，应该对耗时有影响。</p><p>尝试修改<code>tm tm_date</code>为<code>static tm tm_date</code>静态分配内存, qps恢复正常了。<br>但是由于我们需要在多线程环境中使用，最终修改为<code>static thread_local tm tm_date</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://man7.org/linux/man-pages/man3/gmtime.3p.html#DESCRIPTION" target="_blank" rel="noopener">https://man7.org/linux/man-pages/man3/gmtime.3p.html#DESCRIPTION</a></li><li><a href="https://stackoverflow.com/questions/18355101/is-standard-c-mktime-thread-safe-on-linux#answer-18355323" target="_blank" rel="noopener">https://stackoverflow.com/questions/18355101/is-standard-c-mktime-thread-safe-on-linux#answer-18355323</a></li><li><a href="https://man7.org/linux/man-pages/man3/difftime.3.html#ATTRIBUTES" target="_blank" rel="noopener">https://man7.org/linux/man-pages/man3/difftime.3.html#ATTRIBUTES</a></li><li><a href="https://softwareengineering.stackexchange.com/questions/195385/understanding-stack-frame-of-function-call-in-c-c#answer-195406" target="_blank" rel="noopener">https://softwareengineering.stackexchange.com/questions/195385/understanding-stack-frame-of-function-call-in-c-c#answer-195406</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话接&lt;a href=&quot;/2021/03/25/xgboost-multi-thread-problem-debug-and-fix/&quot;&gt;上文&lt;/a&gt;，还是这个 C++ 模型服务，在并发请求的情况下，大概有0.01%的请求部分模型分数不对。定位这种问题，对一个Python程序员来说，真是苦手。还好，经过调整代码不断测试，最终完美解决了问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C++" scheme="http://ponder.work/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>xgboost C++线程安全问题定位与修复</title>
    <link href="http://ponder.work/2021/03/25/xgboost-multi-thread-problem-debug-and-fix/"/>
    <id>http://ponder.work/2021/03/25/xgboost-multi-thread-problem-debug-and-fix/</id>
    <published>2021-03-25T13:48:00.000Z</published>
    <updated>2021-03-25T13:48:32.263Z</updated>
    
    <content type="html"><![CDATA[<p>公司的线上模型服务是基于<code>brpc + xgboost</code>实现的，而xgboost官方是不支持在多线程环境下使用的（1.2.0版本之前）</p><p>这个模型服务已经有两年多了，显然当时用的版本是不支持多线程的，有位同事当时修改了xgboost的源码，解决了多线程的问题，在线上也稳定运行到现在。</p><p>那么，问题来了。最近有个新需求，用到了xgboost的<code>pred_leaf</code>功能，然后就发现并发请求时<code>0.1%</code>的模型结果不对。</p><a id="more"></a><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>调试过程中，首先删除其他模型，排除干扰。然后开关<code>pred_leaf</code>功能批量对比测试，确认当该功能关闭时，模型结果是正常的。</p><p>所以，很有可能<code>pred_leaf</code>参数导致程序走到和之前不同的分支，而这个分支的多线程问题并未修复。</p><p>那么，解决问题的思路就是：确定之前同事修改了什么，找到与pred_leaf相关的函数，尝试做相同修复。</p><h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><p>首先得确定同事都修改了什么，由于代码历史比较就远了了，而且xgboost的改动并没有加入到git，也没有明显的版本号等标识，这个地方也就比较头疼了。</p><p>唯一能确定的是，xgboost版本的是0.6左右，修改源码时参考了<a href="https://blog.csdn.net/zc02051126/article/details/79427605" target="_blank" rel="noopener">文章</a>。</p><p>所以只能从git下载最新的代码，然后<code>git --no-pager log  --stat</code>查看每个commit的改动情况，使用<code>beyond compared对比 + 人肉二分查找</code>，最终定位到对应的commit。</p><p>找到了对应的commit之后，通过对比改动和结合上文参考文章，其实就是两类改动。</p><ol><li>存在竞争条件的变量 -&gt; 加锁</li><li>不存在竞争条件的变量 -&gt; threadLocal，栈上自动变量</li></ol><p>具体来说，以<code>PredLoopSpecalize</code>为例， 修改前<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PredLoopSpecalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nthread = omp_get_max_threads();</span><br><span class="line">    InitThreadTemp(nthread, model.param.num_feature);</span><br><span class="line">    <span class="keyword">for</span> (bst_omp_uint i = <span class="number">0</span>; i &lt; nsize - rest; i += K) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> tid = omp_get_thread_num();</span><br><span class="line">        RegTree::FVec&amp; feats = thread_temp[tid];</span><br><span class="line">        <span class="comment">// thread_temp 为成员变量</span></span><br><span class="line">        <span class="comment">// 省略其他逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">InitThreadTemp</span><span class="params">(<span class="keyword">int</span> nthread, <span class="keyword">int</span> num_feature)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> prev_thread_temp_size = thread_temp.size();</span><br><span class="line">    <span class="keyword">if</span> (prev_thread_temp_size &lt; nthread) &#123;</span><br><span class="line">      thread_temp.resize(nthread, RegTree::FVec());</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = prev_thread_temp_size; i &lt; nthread; ++i) &#123;</span><br><span class="line">        thread_temp[i].Init(num_feature);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改后<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">PredLoopSpecalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nthread = omp_get_max_threads();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;RegTree::FVec&gt; local_thread_temp;  <span class="comment">// 改动点</span></span><br><span class="line">    <span class="keyword">int</span> prev_thread_temp_size = local_thread_temp.size();</span><br><span class="line">    <span class="keyword">if</span> (prev_thread_temp_size &lt; nthread) &#123;</span><br><span class="line">      local_thread_temp.resize(nthread, RegTree::FVec());</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = prev_thread_temp_size; i &lt; nthread; ++i) &#123;</span><br><span class="line">        local_thread_temp[i].Init(model.param.num_feature);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (bst_omp_uint i = <span class="number">0</span>; i &lt; nsize - rest; i += K) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> tid = omp_get_thread_num();</span><br><span class="line">        RegTree::FVec&amp; feats = local_thread_temp[tid];  <span class="comment">// 改动点</span></span><br><span class="line">        <span class="comment">// thread_temp 为成员变量</span></span><br><span class="line">        <span class="comment">// 省略其他逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>显然问题就在<code>thread_temp</code>, 做为类成员，它不是线程安全的，通过替换为栈上的<code>local_thread_temp</code>，不同进程访问的地址不同，自然就不存在冲突了。</p><p>通过查找<code>PredLoopSpecalize</code>函数的调用链，可以发现其修改只会影响正常预测，pred_leaf则是不同的分支，显然线程安全的问题依然存在。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用链</span></span><br><span class="line">XGBoosterPredict()</span><br><span class="line">    --&gt; LearnerImpl::Predict()</span><br><span class="line">        --&gt; LearnerImpl::PredictRaw() <span class="comment">// if 正常predict</span></span><br><span class="line">            --&gt; GBTree::PredictBatch()</span><br><span class="line">                --&gt; CPUPredictor::PredictBatch()</span><br><span class="line">                    --&gt; CPUPredictor::PredLoopInternal()</span><br><span class="line">                        --&gt; Dart::PredLoopSpecalize()</span><br><span class="line">        --&gt; GBTree::PredictLeaf()   <span class="comment">// if pred_leaf</span></span><br><span class="line">        --&gt; GBTree::PredictContribution()</span><br><span class="line">        --&gt; ObjFunction::PredTransform()</span><br><span class="line"></span><br><span class="line"><span class="comment">// LearnerImpl::Predict() 源码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Predict</span><span class="params">(DMatrix* data, <span class="keyword">bool</span> output_margin,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;bst_float&gt;* out_preds, <span class="keyword">unsigned</span> ntree_limit,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">bool</span> pred_leaf, <span class="keyword">bool</span> pred_contribs)</span> <span class="keyword">const</span> override </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pred_contribs) &#123;</span><br><span class="line">        gbm_-&gt;PredictContribution(data, out_preds, ntree_limit);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pred_leaf) &#123;</span><br><span class="line">        gbm_-&gt;PredictLeaf(data, out_preds, ntree_limit);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;PredictRaw(data, out_preds, ntree_limit);</span><br><span class="line">        <span class="keyword">if</span> (!output_margin) &#123;</span><br><span class="line">        obj_-&gt;PredTransform(out_preds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，最后采用与<code>PredLoopSpecalize</code>相同方法对<code>PredictLeaf</code>进行修复，问题得以完美解决。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>源码版本管理非常重要。</li><li>软件版本在新建项目时尽量选择较新版本，因为后续迭代更新版本的概率较小。</li><li>xgboost建议使用1.2.0以上版本，已经线程安全。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/zc02051126/article/details/79427605" target="_blank" rel="noopener">https://blog.csdn.net/zc02051126/article/details/79427605</a></li><li><a href="https://github.com/dmlc/xgboost" target="_blank" rel="noopener">https://github.com/dmlc/xgboost</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的线上模型服务是基于&lt;code&gt;brpc + xgboost&lt;/code&gt;实现的，而xgboost官方是不支持在多线程环境下使用的（1.2.0版本之前）&lt;/p&gt;
&lt;p&gt;这个模型服务已经有两年多了，显然当时用的版本是不支持多线程的，有位同事当时修改了xgboost的源码，解决了多线程的问题，在线上也稳定运行到现在。&lt;/p&gt;
&lt;p&gt;那么，问题来了。最近有个新需求，用到了xgboost的&lt;code&gt;pred_leaf&lt;/code&gt;功能，然后就发现并发请求时&lt;code&gt;0.1%&lt;/code&gt;的模型结果不对。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="机器学习" scheme="http://ponder.work/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://ponder.work/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>优雅地使用 Pizza Boy GBA 金手指</title>
    <link href="http://ponder.work/2021/02/11/pizza-boy-gba-cheat/"/>
    <id>http://ponder.work/2021/02/11/pizza-boy-gba-cheat/</id>
    <published>2021-02-11T10:00:00.000Z</published>
    <updated>2021-02-11T13:21:53.838Z</updated>
    
    <content type="html"><![CDATA[<p>最近偶然又玩起了GBA游戏，瞬间又像是回到了儿时的时光。也碰到了许久以来的老问题，如何作弊，毕竟游戏里刷资源和练级实在是体力劳动，年龄大了毕竟肝不动了。</p><p>先说一下，我现在玩GBA的平台是安卓的<code>Pizza Boy GBA</code>模拟器加游戏手柄，总体游戏体验感觉比GBA真机还好，毕竟现在的设备机能放在这，而且还有倍速播放相关功能。<br><a id="more"></a></p><h2 id="寻找金手指"><a href="#寻找金手指" class="headerlink" title="寻找金手指"></a>寻找金手指</h2><p>我这次玩的是<code>口袋妖怪叶绿386</code>改版，在网上找的金手指虽然说是386版本金手指，但是经过实际测试都是叶绿原版并不支持386，比如<a href="https://zhidao.baidu.com/question/445579878.html" target="_blank" rel="noopener">这个</a>。</p><p>金手指的原理其实和通用的单机游戏作弊工具（cheat engine, 金山游侠等）相同，都是修改游戏内存数据。其关键就是找到我们想改的数据的内存地址，所以常规方法都是通过工具搜索相关数值，比如金钱数量，一般要经过多次搜索，可以参考这个<a href="https://jingyan.baidu.com/article/67508eb45a30699cca1ce43d.html" target="_blank" rel="noopener">教程</a>。</p><p>但GBA好像有些不同，我也曾用cheat engine搜索过，并不能找到相关的内存地址，可能是模拟器的机制导致数值并不能被直接搜索。而且安卓手机上由于权限的问题，类似cheat engine这种读内存的机制肯定是需要root的，这条路就行不通了</p><p>最后还是只能走金手指的路子了，毕竟模拟器原生支持，所以又回到了最初的问题，怎么找到正确的金手指。</p><h3 id="VBA查找金手指功能"><a href="#VBA查找金手指功能" class="headerlink" title="VBA查找金手指功能"></a>VBA查找金手指功能</h3><p>幸好，Windows平台常用的GBA模拟器<a href="https://dl.3dmgame.com/patch/43400.html" target="_blank" rel="noopener">Visual Boy Advance（VBA）</a>带有金手指查找功能，所以先用VBA找到正确的金手指，然后再转换成<code>Piaaz Boy GBA</code>支持的金手指格式。</p><p>网上能找到的金手指一般是类似<code>03005102:63</code>格式的，冒号前后表示的是16进制表示的地址和对应的值。而网上找的金手指不对，肯定是因为前面的地址不对。</p><p>用VBA加载口袋妖怪叶绿386，先过一段剧情，来到第一个城市（常磐市）的商店，查看商品列表，并选择一个商品。<br><img src="http://image.runjf.com/mweb/2021-02-11-16130438912515.jpg" alt="-w719"></p><p>打开菜单：金手指 -&gt; 查找金手指，点击开始，然后输入<code>21</code>，点击查找，可以看到有几十个变量。<br><img src="http://image.runjf.com/mweb/2021-02-11-16130439513943.jpg" alt="-w415"></p><p>增加想购买的数量到<code>23</code>，然后再次输入23，点击查找，可以看到就剩余一个地址了，显然这个就是我们想要的，如果还有多个地址，就重复这两个流程，再次修改数量再查找。<br><img src="http://image.runjf.com/mweb/2021-02-11-16130440969581.jpg" alt="-w1145"></p><p>选择这条地址记录，添加金手指，把数字设置为98，就会自动添加到金手指列表，并启用该金手指。<br><img src="http://image.runjf.com/mweb/2021-02-11-16130443147566.jpg" alt="-w417"></p><p>金手指列表，我们添加的处于启用状态<br><img src="http://image.runjf.com/mweb/2021-02-11-16130443911952.jpg" alt="-w417"></p><p>在游戏中确认购买，可以看到购买的数量变成98了，但是总价没有变，金手指生效了。<br><img src="http://image.runjf.com/mweb/2021-02-11-16130443619423.jpg" alt="-w720"></p><h3 id="VBA内存查看器功能"><a href="#VBA内存查看器功能" class="headerlink" title="VBA内存查看器功能"></a>VBA内存查看器功能</h3><p>但是这金手指只能修改购买数量，不在商店列表里的商品并不能购买，所以我们必须找到当前选中商品对应的地址，再添加一条相关的金手指。</p><p>网上查到的金手指虽然地址不对，但是对应的值（道具的id）应该是对的，下面是口袋妖怪的一些道具id。<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0001 </span>大师球</span><br><span class="line"><span class="symbol">0002 </span>超力怪兽球</span><br><span class="line"><span class="symbol">0003 </span>超级球（比怪兽球更厉害些）</span><br><span class="line"><span class="symbol">0004 </span>怪兽球（普通的球）</span><br><span class="line"><span class="symbol">0005 </span>砂狐球（砂狐乐园专用球）</span><br><span class="line"><span class="symbol">0006 </span>触网球（容易抓水和虫类的怪兽）</span><br><span class="line"><span class="symbol">0007 </span>大布斯球（容易抓海底的怪兽）</span><br><span class="line"><span class="symbol">0008 </span>尼斯道球（怪兽越弱越容易抓）</span><br><span class="line"><span class="symbol">0009 </span>利比道球（容易抓抓过的球）</span><br><span class="line"><span class="number">000</span>a 达伊玛球（回合数越长越容易抓）</span><br><span class="line"><span class="number">000</span>b 高基石球（抓到的怪兽变亲密）</span><br><span class="line"><span class="number">000</span>c 布雷密球（珍惜怪兽球）</span><br><span class="line"><span class="number">000d</span> 伤药（体力恢复<span class="number">20</span>）</span><br><span class="line"><span class="number">000e</span> 解毒药（恢复毒状态）</span><br></pre></td></tr></table></figure></p><p>由于已经找到了购买数量的地址，根据编程的常识，选中商品的地址应该也在这个地址附近。<br>所以打开<code>工具 -&gt; 内存查看器</code>定位到地址<code>030050C2</code><br><img src="http://image.runjf.com/mweb/2021-02-11-16130463098787.jpg" alt="-w567"></p><p>在游戏中，分别选中“解毒药”和“伤药”，并观察内存变化（每次改动完点刷新）。<br><img src="http://image.runjf.com/mweb/2021-02-11-16130465441636.jpg" alt="-w573"><br><img src="http://image.runjf.com/mweb/2021-02-11-16130465892741.jpg" alt="-w569"></p><p>由上两张图可以看到，有个地址的值由<code>000E</code>变为<code>000D</code>，正好等于这两个道具的id。<br>所以该地址<code>030050CA</code>就是我们想要的商品地址，我们就增加一条金手指<code>030050CA:0001</code>将购买的商品改为大师球。<br><img src="http://image.runjf.com/mweb/2021-02-11-16130466584391.jpg" alt="-w573"><br><img src="http://image.runjf.com/mweb/2021-02-11-16130467943629.jpg" alt="-w419"></p><p>启用这两条金手指，在游戏中点击购买，可以看到生效了。<br><img src="http://image.runjf.com/mweb/2021-02-11-16130468908224.jpg" alt="-w477"></p><h2 id="在Pizza-Boy-GBA上使用金手指"><a href="#在Pizza-Boy-GBA上使用金手指" class="headerlink" title="在Pizza Boy GBA上使用金手指"></a>在Pizza Boy GBA上使用金手指</h2><p>Pizza Boy GBA并不支持VBA格式的金手指，所以必须进行格式转换，由于VBA格式金手指和CodeBreaker格式金手指转换起来比较接近，只要将地址首位的<code>0</code>替换为<code>8</code>就行了。</p><p>转换前<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">030050<span class="selector-tag">C2</span><span class="selector-pseudo">:0062</span></span><br><span class="line">030050<span class="selector-tag">CA</span><span class="selector-pseudo">:0001</span></span><br></pre></td></tr></table></figure></p><p>转换后<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">830050</span>C2 <span class="number">0062</span></span><br><span class="line"><span class="number">830050</span>CA <span class="number">0001</span></span><br></pre></td></tr></table></figure></p><p><img src="http://image.runjf.com/mweb/2021-02-11-16130489630989.jpg" alt><br><img src="http://image.runjf.com/mweb/2021-02-11-16130489739025.jpg" alt></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上查找方法理论上对所有GBA游戏都适用，祝大家玩得愉快！！！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhidao.baidu.com/question/445579878.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/445579878.html</a></li><li><a href="https://zhidao.baidu.com/question/1690370269971489228.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/1690370269971489228.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近偶然又玩起了GBA游戏，瞬间又像是回到了儿时的时光。也碰到了许久以来的老问题，如何作弊，毕竟游戏里刷资源和练级实在是体力劳动，年龄大了毕竟肝不动了。&lt;/p&gt;
&lt;p&gt;先说一下，我现在玩GBA的平台是安卓的&lt;code&gt;Pizza Boy GBA&lt;/code&gt;模拟器加游戏手柄，总体游戏体验感觉比GBA真机还好，毕竟现在的设备机能放在这，而且还有倍速播放相关功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="工作生活" scheme="http://ponder.work/categories/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="游戏" scheme="http://ponder.work/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>在WSL2中安装openmediavault(OMV)</title>
    <link href="http://ponder.work/2021/01/02/install-openmediavault-in-WSL2/"/>
    <id>http://ponder.work/2021/01/02/install-openmediavault-in-WSL2/</id>
    <published>2021-01-02T09:00:00.000Z</published>
    <updated>2021-03-25T11:54:35.138Z</updated>
    
    <content type="html"><![CDATA[<p>NAS的文件系统一直是我比较纠结的一个点。NAS的系统基本上是基于Linux(Unix)，文件系统不是ntfs，数据迁移不方便，数据恢复工具也没那么全。</p><p>WSL就完美解决了这个问题，用Linux提供服务，数据最终还是落在ntfs上，而且重要的是everything也能用上。</p><p>openmediavault(OMV)是一个基于Debian的NAS系统，而且能在原生Debian系统上自行安装，正好能够实现我们的功能。<br><a id="more"></a></p><h2 id="WSL2-相关准备工作"><a href="#WSL2-相关准备工作" class="headerlink" title="WSL2 相关准备工作"></a>WSL2 相关准备工作</h2><p>需要安装WSL2并启用桥接网络，同时安装好Debian系统</p><p>参考本人<a href="/2021/01/02/WSL2-bridge-mode/">这篇文章</a></p><h2 id="安装-systemd"><a href="#安装-systemd" class="headerlink" title="安装 systemd"></a>安装 systemd</h2><p>由于openmediavault对systemd有强依赖，而WSL的系统默认是由<code>/init</code>启动的，会导致安装出错<br>所以得先把systemd的问题解决。</p><p>经过一番google，找到了<a href="https://github.com/arkane-systems/genie" target="_blank" rel="noopener">systemd-genie</a>能够解决问题</p><h3 id="安装-dotnet-源"><a href="#安装-dotnet-源" class="headerlink" title="安装 dotnet 源"></a>安装 dotnet 源</h3><p>systemd-genie 依赖 dotnet-runtime-5.0, 所以把dotnet源配好，参考<a href="https://docs.microsoft.com/zh-cn/dotnet/core/install/linux-debian#debian-10-" target="_blank" rel="noopener">文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb</span><br><span class="line">sudo dpkg -i packages-microsoft-prod.deb</span><br><span class="line">sudo apt-get update; \</span><br><span class="line">  sudo apt-get install -y apt-transport-https &amp;&amp; \</span><br><span class="line">  sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="安装-systemd-genie"><a href="#安装-systemd-genie" class="headerlink" title="安装 systemd-genie"></a>安装 systemd-genie</h3><p>官网提供了安装脚本, 执行完会配置好systemd-genie源并安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/arkane-systems/wsl-translinux/script.deb.sh | sudo bash</span><br></pre></td></tr></table></figure></p><p>但是安装过程中，发现systemd-genie源的访问有些问题，所以只能从gitbub下载安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp &amp;&amp; wget https://github.com/arkane-systems/genie/releases/download/1.30/systemd-genie_1.30_amd64.deb</span><br><span class="line">dpkg -i systemd-genie_1.30_amd64.deb</span><br><span class="line">apt --fix-broken install</span><br></pre></td></tr></table></figure></p><h3 id="默认启动-systemd-genie"><a href="#默认启动-systemd-genie" class="headerlink" title="默认启动 systemd-genie"></a>默认启动 systemd-genie</h3><p>修改<code>/root/.bashrc</code>, 添加以下内容<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">[[ ! -v INSIDE_GENIE ]]</span>; <span class="keyword">then</span></span><br><span class="line">    echo <span class="string">"Starting genie"</span></span><br><span class="line">    exec /usr/bin/genie -s</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h2 id="网络相关配置"><a href="#网络相关配置" class="headerlink" title="网络相关配置"></a>网络相关配置</h2><p>主机名和网口配置重启WSL后可能会失效，建议修改配置文件来实现</p><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><p>修改<code>/etc/wsl.conf</code>，增加<code>hostname = openmediavault</code><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[network]</span></span><br><span class="line"><span class="attr">hostname</span> = openmediavault</span><br><span class="line"><span class="attr">generateResolvConf</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>修改<code>/etc/genie.ini</code>，设置<code>update-hostname</code>为false<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[genie]</span><br><span class="line">secure-path=<span class="regexp">/lib/</span><span class="string">systemd:</span><span class="regexp">/usr/</span>local<span class="regexp">/sbin:/</span>usr<span class="regexp">/local/</span><span class="string">bin:</span><span class="regexp">/usr/</span><span class="string">sbin:</span><span class="regexp">/usr/</span><span class="string">bin:</span><span class="regexp">/sbin:/</span>bin</span><br><span class="line">unshare=<span class="regexp">/usr/</span>bin/unshare</span><br><span class="line">update-hostname=<span class="literal">false</span></span><br><span class="line">clone-path=<span class="literal">false</span></span><br><span class="line">clone-env=WSL_DISTRO_NAME,WSL_INTEROP,WSLENV</span><br></pre></td></tr></table></figure></p><h3 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h3><p>注意，由于WSL的mac地址每次重启都会变，该问题暂时无法解决，参考<a href="https://github.com/microsoft/WSL/issues/5352" target="_blank" rel="noopener">issue</a><br>所以这里采用静态IPv4地址和DHCPv6来配置网络地址</p><p>新建<code>/etc/systemd/network/lan.network</code>，内容如下<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Match]</span></span><br><span class="line"><span class="attr">Name</span>=eth0</span><br><span class="line"></span><br><span class="line"><span class="section">[Network]</span></span><br><span class="line"><span class="attr">Description</span>=lan</span><br><span class="line"><span class="attr">DHCP</span>=ipv6</span><br><span class="line"><span class="attr">Address</span>=<span class="number">192.168</span>.<span class="number">123.31</span>/<span class="number">24</span></span><br><span class="line"><span class="attr">Gateway</span>=<span class="number">192.168</span>.<span class="number">123.1</span></span><br><span class="line"><span class="attr">DNS</span>=<span class="number">192.168</span>.<span class="number">123.1</span></span><br><span class="line"><span class="attr">LLDP</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">EmitLLDP</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>然后执行执行<code>systemctl enable systemd-networkd &amp;&amp; systemctl start systemd-networkd</code></p><h2 id="安装-openmediavault"><a href="#安装-openmediavault" class="headerlink" title="安装 openmediavault"></a>安装 openmediavault</h2><p>参考<a href="https://openmediavault.readthedocs.io/en/5.x/installation/on_debian.html" target="_blank" rel="noopener">官方文档</a></p><p>由于要安装的包比较多，建议先把Debian软件源替换成国内镜像，参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/" target="_blank" rel="noopener">这个</a></p><ol><li><p>添加软件源keyring</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install --yes gnupg</span><br><span class="line">wget -O <span class="string">"/etc/apt/trusted.gpg.d/openmediavault-archive-keyring.asc"</span> https://packages.openmediavault.org/public/archive.key</span><br><span class="line">apt-key add <span class="string">"/etc/apt/trusted.gpg.d/openmediavault-archive-keyring.asc"</span></span><br></pre></td></tr></table></figure></li><li><p>添加openmediavault软件源</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; /etc/apt/sources.list.d/openmediavault.list</span><br><span class="line">deb https://packages.openmediavault.org/public usul main</span><br><span class="line"><span class="comment"># deb https://downloads.sourceforge.net/project/openmediavault/packages usul main</span></span><br><span class="line"><span class="comment">## Uncomment the following line to add software from the proposed repository.</span></span><br><span class="line"><span class="comment"># deb https://packages.openmediavault.org/public usul-proposed main</span></span><br><span class="line"><span class="comment"># deb https://downloads.sourceforge.net/project/openmediavault/packages usul-proposed main</span></span><br><span class="line"><span class="comment">## This software is not part of OpenMediaVault, but is offered by third-party</span></span><br><span class="line"><span class="comment">## developers as a service to OpenMediaVault users.</span></span><br><span class="line"><span class="comment"># deb https://packages.openmediavault.org/public usul partner</span></span><br><span class="line"><span class="comment"># deb https://downloads.sourceforge.net/project/openmediavault/packages usul partner</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=C.UTF-8</span><br><span class="line"><span class="built_in">export</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"><span class="built_in">export</span> APT_LISTCHANGES_FRONTEND=none</span><br><span class="line">wget -O <span class="string">"/etc/apt/trusted.gpg.d/openmediavault-archive-keyring.asc"</span> https://packages.openmediavault.org/public/archive.key</span><br><span class="line">apt-key add <span class="string">"/etc/apt/trusted.gpg.d/openmediavault-archive-keyring.asc"</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get --yes --auto-remove --show-upgraded \</span><br><span class="line">    --allow-downgrades --allow-change-held-packages \</span><br><span class="line">    --no-install-recommends \</span><br><span class="line">    --option Dpkg::Options::=<span class="string">"--force-confdef"</span> \</span><br><span class="line">    --option DPkg::Options::=<span class="string">"--force-confold"</span> \</span><br><span class="line">    install openmediavault-keyring openmediavault</span><br><span class="line"></span><br><span class="line">omv-confdbadm populate</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装-omv-extras（可选）"><a href="#安装-omv-extras（可选）" class="headerlink" title="安装 omv-extras（可选）"></a>安装 omv-extras（可选）</h2><p>参考<a href="https://forum.openmediavault.org/index.php?thread/5549-omv-extras-org-plugin/" target="_blank" rel="noopener">官方文档</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https://github.com/OpenMediaVault-Plugin-Developers/packages/raw/master/install | bash</span><br></pre></td></tr></table></figure></p><h2 id="配置-openmediavault"><a href="#配置-openmediavault" class="headerlink" title="配置 openmediavault"></a>配置 openmediavault</h2><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><p>OMV里的主机名和网络配置就配置成和上面配置文件里的一样，防止OMV的服务工作异常</p><ol><li><p>修改主机名，防止WSL默认主机名过长（必须小于15位），导致samba配置失败<br> <img src="http://image.runjf.com/mweb/2021-01-02-2021-01-02_180911.png" alt="2021-01-02_180911"></p></li><li><p>打开<code>系统 -&gt; 网络 -&gt; 添加 -&gt; 以太网</code>，配置网口ip，这里配置为DHCP自动获取<br> <img src="http://image.runjf.com/mweb/2021-01-02-2021-01-02_181342.png" alt="2021-01-02_181342"></p></li><li><p>打开<code>系统 -&gt; 常规设置 -&gt; Web管理员密码</code>，修改管理员密码，默认密码为<code>admin:openmediavault</code></p></li></ol><h3 id="共享文件夹配置"><a href="#共享文件夹配置" class="headerlink" title="共享文件夹配置"></a>共享文件夹配置</h3><p>由于WSL2读写本机硬盘是使用的微软的驱动，OMV并不支持，默认只能识别到根目录的虚拟硬盘。</p><p>又因为WSL2的本地硬盘都挂载在<code>/mnt/</code>路径下，所以只要能将<code>/mnt/</code>目录共享就ok了</p><p>这里参考<a href="https://github.com/openmediavault/openmediavault/blob/master/deb/openmediavault-sharerootfs/debian/openmediavault-sharerootfs.postinst" target="_blank" rel="noopener">openmediavault-sharerootfs</a>的实现</p><p>修改<code>/etc/openmediavault/config.xml</code>配置文件， 在<code>fstab</code>标签下增加<code>mntent</code>挂载点配置，修改完如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--省略其他部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fstab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mntent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uuid</span>&gt;</span>79684322-3eac-11ea-a974-63a080abab18<span class="tag">&lt;/<span class="name">uuid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fsname</span>&gt;</span>/dev/sdb<span class="tag">&lt;/<span class="name">fsname</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>ext4<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">opts</span>&gt;</span>errors=remount-ro<span class="tag">&lt;/<span class="name">opts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">freq</span>&gt;</span>0<span class="tag">&lt;/<span class="name">freq</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">passno</span>&gt;</span>1<span class="tag">&lt;/<span class="name">passno</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hidden</span>&gt;</span>1<span class="tag">&lt;/<span class="name">hidden</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mntent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fstab</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>打开<code>访问权限管理 -&gt; 共享文件夹 -&gt; 添加</code>，添加D盘（/mnt/d）作为共享文件夹，然后在samba服务中就能引用这个共享文件夹了<br><img src="http://image.runjf.com/mweb/2021-01-02-2021-01-02_183349.png" alt="2021-01-02_183349"></p><p><img src="http://image.runjf.com/mweb/2021-01-02-2021-01-02_183046.png" alt="2021-01-02_183046"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/arkane-systems/genie" target="_blank" rel="noopener">https://github.com/arkane-systems/genie</a></li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/install/linux-debian#debian-10-" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/dotnet/core/install/linux-debian#debian-10-</a></li><li><a href="https://openmediavault.readthedocs.io/en/5.x/installation/on_debian.html" target="_blank" rel="noopener">https://openmediavault.readthedocs.io/en/5.x/installation/on_debian.html</a></li><li><a href="https://forum.openmediavault.org/index.php?thread/5549-omv-extras-org-plugin/" target="_blank" rel="noopener">https://forum.openmediavault.org/index.php?thread/5549-omv-extras-org-plugin/</a></li><li><a href="https://github.com/openmediavault/openmediavault/blob/master/deb/openmediavault-sharerootfs/debian/openmediavault-sharerootfs.postinst" target="_blank" rel="noopener">https://github.com/openmediavault/openmediavault/blob/master/deb/openmediavault-sharerootfs/debian/openmediavault-sharerootfs.postinst</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NAS的文件系统一直是我比较纠结的一个点。NAS的系统基本上是基于Linux(Unix)，文件系统不是ntfs，数据迁移不方便，数据恢复工具也没那么全。&lt;/p&gt;
&lt;p&gt;WSL就完美解决了这个问题，用Linux提供服务，数据最终还是落在ntfs上，而且重要的是everything也能用上。&lt;/p&gt;
&lt;p&gt;openmediavault(OMV)是一个基于Debian的NAS系统，而且能在原生Debian系统上自行安装，正好能够实现我们的功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="工作生活" scheme="http://ponder.work/categories/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Linux" scheme="http://ponder.work/tags/Linux/"/>
    
      <category term="WSL" scheme="http://ponder.work/tags/WSL/"/>
    
      <category term="NAS" scheme="http://ponder.work/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>WSL2开启桥接网络</title>
    <link href="http://ponder.work/2021/01/02/WSL2-bridge-mode/"/>
    <id>http://ponder.work/2021/01/02/WSL2-bridge-mode/</id>
    <published>2021-01-02T07:00:00.000Z</published>
    <updated>2021-03-25T11:55:09.345Z</updated>
    
    <content type="html"><![CDATA[<p>Windows Subsystem for Linux(WSL)从<code>Version 1 (WSL1)</code>升级到<code>Version 2 (WSL2)</code> 之后，底层实现方式发生了改变。</p><p>由于使用Hyper-V来实现WSL2，使得WSL更像虚拟机，一个能访问本地硬盘的虚拟机。<br>这带来一些便利，能够把它当做独立服务器来使用，可玩性就增强很多。当然，这也导致WSL上的端口不能从外部访问到，总之有利有弊。</p><p>虽然能够配置端口转发，曲线救国突破这个缺陷，但是有些服务的端口是约定俗成的（比如samba），更换端口号（原端口号被windows占用）之后其他设备可能识别不到服务。</p><p>经过一番思考后，觉得给WSL2开启桥接模式，直接连接物理网络才是相对最好的方案。</p><a id="more"></a><h2 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2</h2><p>参考<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#manual-installation-steps" target="_blank" rel="noopener">官方文档</a>安装WSL2</p><p>在PowerShell中执行以下命令</p><ol><li><p>启用WSL2</p> <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe <span class="string">/online</span> <span class="string">/enable-feature</span> <span class="string">/featurename</span><span class="function">:Microsoft-Windows-Subsystem-Linux</span> <span class="string">/all</span> <span class="string">/norestart</span></span><br></pre></td></tr></table></figure></li><li><p>启用虚拟机平台</p> <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe <span class="string">/online</span> <span class="string">/enable-feature</span> <span class="string">/featurename</span><span class="function">:VirtualMachinePlatform</span> <span class="string">/all</span> <span class="string">/norestart</span></span><br></pre></td></tr></table></figure></li><li><p>启用Hyper-V</p> <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe <span class="string">/online</span> <span class="string">/enable-feature</span> <span class="string">/featurename</span><span class="function">:VirtualMachinePlatform</span> <span class="string">/all</span> <span class="string">/norestart</span></span><br></pre></td></tr></table></figure></li><li><p>设置WSL2为默认</p> <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="keyword">set</span>-<span class="keyword">default</span>-version <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><p>然后重启系统, 安装<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener">适用于 x64 计算机的 WSL2 Linux 内核更新包</a></p><h2 id="安装Linux发行版"><a href="#安装Linux发行版" class="headerlink" title="安装Linux发行版"></a>安装Linux发行版</h2><p>这里选择Debian作为示例</p><ol><li>在<code>Microsoft Store</code>中搜索Debian并安装</li><li>启动Debian应用，并根据提示初始化系统</li><li><p>在PowerShell执行<code>wsl -l --all -v</code>确认WSL版本为2</p> <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\ruan&gt; wsl -l --<span class="built_in">all</span> -v</span><br><span class="line"><span class="keyword">NAME</span>      STATE           VERSION</span><br><span class="line">* Debian    Running         <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>如果VERSION不为为2，在PowerShell执行<code>wsl --set-version Debian 2</code>进行升级</p></li></ol><h2 id="修改WSL2默认网络为桥接"><a href="#修改WSL2默认网络为桥接" class="headerlink" title="修改WSL2默认网络为桥接"></a>修改WSL2默认网络为桥接</h2><p>由于WSL2底层使用的是Hyper-V虚拟机，所以我们可以修改虚拟交换机的类型，来启用桥接网络<br>打开<code>Hyper-V管理器 -&gt; 操作 -&gt; 虚拟交换机管理器</code>， 修改WSL的连接类型为“外部网络”<br><img src="http://image.runjf.com/mweb/2021-01-02-2021-01-02_171339.png" alt="2021-01-02_171339"></p><h2 id="修复Debian网络"><a href="#修复Debian网络" class="headerlink" title="修复Debian网络"></a>修复Debian网络</h2><p>由于WSL2默认网络模式是NAT，我们把虚拟交换机改为桥接后，默认的ip和路由以及DNS解析将会失效</p><p>以下操作在Debian系统内执行</p><h3 id="修复ip和路由"><a href="#修复ip和路由" class="headerlink" title="修复ip和路由"></a>修复ip和路由</h3><ol><li>清除原网卡ip <code>ip addr flush dev eth0</code></li><li>添加新ip <code>ip addr add 192.168.123.31/24 dev eth0</code></li><li>清除原默认路由 <code>ip route delete default</code></li><li>添加默认路由 <code>ip route add default via 192.168.123.1 dev eth0</code></li></ol><p>这些操作在重启WSL2虚拟机后会失效，如果需要永久修改，请配置静态ip</p><h3 id="修复DNS解析"><a href="#修复DNS解析" class="headerlink" title="修复DNS解析"></a>修复DNS解析</h3><ol><li><p>新建<code>/etc/wsl.conf</code>，防止WSL2覆盖DNS配置文件</p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[network]</span></span><br><span class="line"><span class="attr">generateResolvConf</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>编辑<code>/etc/resolv.conf</code>， 清除原配置，添加以下内容</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nameserver</span> 192<span class="selector-class">.168</span><span class="selector-class">.123</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="已知缺陷"><a href="#已知缺陷" class="headerlink" title="已知缺陷"></a>已知缺陷</h2><h3 id="重启Windows10后桥接失败"><a href="#重启Windows10后桥接失败" class="headerlink" title="重启Windows10后桥接失败"></a>重启Windows10后桥接失败</h3><p>重启后桥接可能会失败，而且上不了网，可以取消勾选外网网口的“Hyper-V可扩展的虚拟交换机”选项，然后重新配置桥接<br><img src="http://image.runjf.com/mweb/2021-01-11-%E6%8D%95%E8%8E%B71.png" alt="捕获1"></p><h3 id="WSL2的MAC地址不固定"><a href="#WSL2的MAC地址不固定" class="headerlink" title="WSL2的MAC地址不固定"></a>WSL2的MAC地址不固定</h3><p>由于WSL2的MAC地址每次重启后都会变化，所以桥接后DHCP的ip也是非固定的，参考<a href="https://github.com/microsoft/WSL/issues/5352" target="_blank" rel="noopener">issue</a>。</p><p>目前没有好的解决办法，一些依赖MAC地址的服务，可能会工作不正常。如samba的域名访问。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#manual-installation-steps" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#manual-installation-steps</a></li><li><a href="https://github.com/microsoft/WSL/issues/4928#issuecomment-646703350" target="_blank" rel="noopener">https://github.com/microsoft/WSL/issues/4928#issuecomment-646703350</a></li><li><a href="https://github.com/microsoft/WSL/issues/4150#issuecomment-747152240" target="_blank" rel="noopener">https://github.com/microsoft/WSL/issues/4150#issuecomment-747152240</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows Subsystem for Linux(WSL)从&lt;code&gt;Version 1 (WSL1)&lt;/code&gt;升级到&lt;code&gt;Version 2 (WSL2)&lt;/code&gt; 之后，底层实现方式发生了改变。&lt;/p&gt;
&lt;p&gt;由于使用Hyper-V来实现WSL2，使得WSL更像虚拟机，一个能访问本地硬盘的虚拟机。&lt;br&gt;这带来一些便利，能够把它当做独立服务器来使用，可玩性就增强很多。当然，这也导致WSL上的端口不能从外部访问到，总之有利有弊。&lt;/p&gt;
&lt;p&gt;虽然能够配置端口转发，曲线救国突破这个缺陷，但是有些服务的端口是约定俗成的（比如samba），更换端口号（原端口号被windows占用）之后其他设备可能识别不到服务。&lt;/p&gt;
&lt;p&gt;经过一番思考后，觉得给WSL2开启桥接模式，直接连接物理网络才是相对最好的方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工作生活" scheme="http://ponder.work/categories/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Linux" scheme="http://ponder.work/tags/Linux/"/>
    
      <category term="WSL" scheme="http://ponder.work/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>2020年终总结</title>
    <link href="http://ponder.work/2020/12/31/summary-of-year-2020/"/>
    <id>http://ponder.work/2020/12/31/summary-of-year-2020/</id>
    <published>2020-12-31T12:14:00.000Z</published>
    <updated>2021-01-02T12:42:30.916Z</updated>
    
    <content type="html"><![CDATA[<p>非常时期，三观频繁受到冲击，估计以后历史会说今年是美利坚由盛转衰的一年。</p><p>年初疫情到年尾还没消停，却也是多了时间积累，多磨砺自己。君子藏器于身，待时而动。</p><p>另一个，依然常年与懈怠和懦弱斗争，不说屡战屡败，已不远矣。戒之戒之</p><a id="more"></a><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>工作的新地图已然熟悉，平稳，需要居安思危。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>总体比较有长进，毕竟时间多了一些，进步速度比2016-2017慢，远强于2018，与2019年相当但是侧重不同，更偏重长期发展的技能。</p><p>学习的热情较前几年有所降低，兴趣变弱了</p><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><h4 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h4><ul><li>精通Python设计模式</li><li>重构</li><li>调试九法</li><li>代码整洁之道</li><li>七周七语言</li><li>redis设计与实现</li><li>python性能分析与优化</li><li>重构手册</li><li>unix环境高级编程</li></ul><h4 id="非技术"><a href="#非技术" class="headerlink" title="非技术"></a>非技术</h4><ul><li>英语语法要点解析</li><li>庄子喃华</li><li>霍乱时期的爱情</li><li>图解维摩诘经</li><li>每天一首古诗词</li></ul><h3 id="视频文章"><a href="#视频文章" class="headerlink" title="视频文章"></a>视频文章</h3><ul><li>计算机网络微课堂</li><li>程序员练级攻略</li></ul><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol><li>C、C++基本熟练</li><li>阅读了redis源码，实现redis-server-py</li><li>重构与设计模式进步较大，单元测试更为熟练</li><li>对Linux理解加深</li><li>算法，基本无进步</li></ol><h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><ol><li>货币基金占大半，每个平台分一点</li><li>基金跟上E大的车，后续观察下</li><li>A股收益10%，基本上炒了个寂寞</li><li>港股，心态还是太差，小米没拿住，炒了个寂寞</li></ol><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><ol><li>动漫：《黄金神威》和《来自深渊》相当不错；《异度侵入》虎头蛇尾；《咒术回战》很燃；好番还是太少</li><li>游戏：和平精英上不了两次王牌，已弃坑；原神，浅尝辄止；总之是游戏越玩越少</li><li>电影看得不多，花木兰（刘亦菲可以），其他没印象了</li><li>网络小说接近无书可看，重看了凡人</li><li>抖音接近弃坑</li><li>NAS，树莓派，软路由，IPv6是深坑</li><li>。。。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>博客：水了44篇，简直高产</li><li>运动：间断性地把跑步捡回来了，然而敌不过新冠和寒冷（当然懒惰随身）</li><li>熬夜：略有改善，熬得比以前少了</li><li>身体：智齿-2，体重+5KG（涨不动了）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非常时期，三观频繁受到冲击，估计以后历史会说今年是美利坚由盛转衰的一年。&lt;/p&gt;
&lt;p&gt;年初疫情到年尾还没消停，却也是多了时间积累，多磨砺自己。君子藏器于身，待时而动。&lt;/p&gt;
&lt;p&gt;另一个，依然常年与懈怠和懦弱斗争，不说屡战屡败，已不远矣。戒之戒之&lt;/p&gt;
    
    </summary>
    
    
      <category term="工作生活" scheme="http://ponder.work/categories/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="http://ponder.work/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用gdb调试Python程序</title>
    <link href="http://ponder.work/2020/12/29/debug-python-with-gdb/"/>
    <id>http://ponder.work/2020/12/29/debug-python-with-gdb/</id>
    <published>2020-12-29T01:48:00.000Z</published>
    <updated>2020-12-30T13:17:50.095Z</updated>
    
    <content type="html"><![CDATA[<p>由于Python解释器是由C语言编写，我们可以使用GDB来调试Python进程，对于程序卡死等异常情况调试比较有帮助。</p><a id="more"></a><p>用gdb调试Python程序，主要有两个部分</p><ol><li>原生的gdb命令，调试的的Python解释器的C代码</li><li><code>py-bt</code>等以py-为前缀的Python扩展命令，可以调试Python程序</li></ol><p>我们需要通过原生gdb命令，如<code>n</code>(next)，<code>b</code>(break)等，使Python程序运行到我们需要调试的位置。<br>然后，通过<code>py-print</code>等命令输出我们想要的变量信息</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>不同的Python环境，配置方法不太一样，这里推荐ubuntu 20.04以上版本</p><h3 id="ubuntu-20-04"><a href="#ubuntu-20-04" class="headerlink" title="ubuntu 20.04"></a>ubuntu 20.04</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdb <span class="keyword">python3</span> <span class="keyword">python3</span>-dbg</span><br></pre></td></tr></table></figure><h2 id="gdb命令速查"><a href="#gdb命令速查" class="headerlink" title="gdb命令速查"></a>gdb命令速查</h2><h3 id="gdb原生命令"><a href="#gdb原生命令" class="headerlink" title="gdb原生命令"></a>gdb原生命令</h3><p>run or r –&gt; executes the program from start to end.<br>break or b –&gt; sets breakpoint on a particular line.<br>disable -&gt; disable a breakpoint.<br>enable –&gt; enable a disabled breakpoint.<br>next or n -&gt; executes next line of code, but don’t dive into functions.<br>step –&gt; go to next instruction, diving into the function.<br>list or l –&gt; displays the code.<br>print or p –&gt; used to display the stored value.<br>quit or q –&gt; exits out of gdb.<br>clear –&gt; to clear all breakpoints.<br>continue –&gt; continue normal execution.</p><h3 id="gdb-python命令"><a href="#gdb-python命令" class="headerlink" title="gdb python命令"></a>gdb python命令</h3><p>py-bt: 输出Python调用栈<br>py-bt-full: 输出Python调用栈<br>py-down: 在调用栈向下一级<br>py-list: 显示代码<br>py-locals: 输出locals变量<br>py-print: 输出<br>py-up: 在调用栈向上一级</p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>一个斐波那契数列函数<code>fib.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">fib(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><h3 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h3><ol><li><code>python3 fib.py &amp;</code></li><li><code>gdb python3 148</code>, 148为Python的进程id</li></ol><p>gdb输出，注意所需要的symbols是否都加载了<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">GNU gdb (Ubuntu <span class="number">9.2</span>-<span class="number">0</span>ubuntu1~<span class="number">20.04</span>) <span class="number">9.2</span></span><br><span class="line">Copyright (C) <span class="number">2020</span> Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version <span class="number">3</span> or later &lt;<span class="symbol">http:</span>/<span class="regexp">/gnu.org/licenses</span><span class="regexp">/gpl.html&gt;</span></span><br><span class="line"><span class="regexp">This is free software: you are free to change and redistribute it.</span></span><br><span class="line"><span class="regexp">There is NO WARRANTY, to the extent permitted by law.</span></span><br><span class="line"><span class="regexp">Type "show copying" and "show warranty" for details.</span></span><br><span class="line"><span class="regexp">This GDB was configured as "x86_64-linux-gnu".</span></span><br><span class="line"><span class="regexp">Type "show configuration" for configuration details.</span></span><br><span class="line"><span class="regexp">For bug reporting instructions, please see:</span></span><br><span class="line"><span class="regexp">&lt;http:/</span><span class="regexp">/www.gnu.org/software</span><span class="regexp">/gdb/bugs</span><span class="regexp">/&gt;.</span></span><br><span class="line"><span class="regexp">Find the GDB manual and other documentation resources online at:</span></span><br><span class="line"><span class="regexp">    &lt;http:/</span><span class="regexp">/www.gnu.org/software</span><span class="regexp">/gdb/documentation</span><span class="regexp">/&gt;.</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">For help, type "help".</span></span><br><span class="line"><span class="regexp">Type "apropos word" to search for commands related to "word"...</span></span><br><span class="line"><span class="regexp">Reading symbols from python3...</span></span><br><span class="line"><span class="regexp">Reading symbols from /usr</span><span class="regexp">/lib/debug</span><span class="regexp">/.build-id/</span><span class="number">0</span>2/<span class="number">526282e</span>a6c4d6eec743ad74a1eeefd035346a3.debug...</span><br><span class="line">Attaching to <span class="symbol">program:</span> /usr/bin/python3, process <span class="number">148</span></span><br><span class="line">Reading symbols from /<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libc</span>.<span class="title">so</span>.6...</span></span><br><span class="line">Reading symbols from /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">debug</span>//<span class="title">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libc</span>-2.31.<span class="title">so</span>...</span></span><br><span class="line">Reading symbols from /<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libpthread</span>.<span class="title">so</span>.0...</span></span><br><span class="line">Reading symbols from /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">debug</span>/.<span class="title">build</span>-<span class="title">id</span>/4<span class="title">f</span>/<span class="title">c5fc33f4429136a494c640b113d76f610e4abc</span>.<span class="title">debug</span>...</span></span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">"/lib/x86_64-linux-gnu/libthread_db.so.1"</span>.</span><br><span class="line">Reading symbols from /<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libdl</span>.<span class="title">so</span>.2...</span></span><br><span class="line">Reading symbols from /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">debug</span>//<span class="title">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libdl</span>-2.31.<span class="title">so</span>...</span></span><br><span class="line">Reading symbols from /<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libutil</span>.<span class="title">so</span>.1...</span></span><br><span class="line">Reading symbols from /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">debug</span>//<span class="title">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libutil</span>-2.31.<span class="title">so</span>...</span></span><br><span class="line">Reading symbols from /<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libm</span>.<span class="title">so</span>.6...</span></span><br><span class="line">Reading symbols from /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">debug</span>//<span class="title">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libm</span>-2.31.<span class="title">so</span>...</span></span><br><span class="line">Reading symbols from /<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libexpat</span>.<span class="title">so</span>.1...</span></span><br><span class="line">(No debugging symbols found in /<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libexpat</span>.<span class="title">so</span>.1)</span></span><br><span class="line">Reading symbols from /<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libz</span>.<span class="title">so</span>.1...</span></span><br><span class="line">(No debugging symbols found in /<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libz</span>.<span class="title">so</span>.1)</span></span><br><span class="line">Reading symbols from /lib64/ld-linux-x86-<span class="number">64</span>.so.<span class="number">2</span>...</span><br><span class="line">(No debugging symbols found in /lib64/ld-linux-x86-<span class="number">64</span>.so.<span class="number">2</span>)</span><br><span class="line"><span class="number">0x00007fec057c10da</span> in __GI___select (nfds=nfds@entry=<span class="number">0</span>, readfds=readfds@entry=<span class="number">0x0</span>, writefds=writefds@entry=<span class="number">0x0</span>, exceptfds=exceptfds@entry=<span class="number">0x0</span>, timeout=timeout@entry=<span class="number">0x7fff99ce33a0</span>) at ../sysdeps/unix/sysv/linux/<span class="keyword">select</span>.<span class="symbol">c:</span><span class="number">41</span></span><br><span class="line"><span class="number">41</span>../sysdeps/unix/sysv/linux/<span class="keyword">select</span>.<span class="symbol">c:</span> No such file or directory.</span><br></pre></td></tr></table></figure></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>gdb调试Python没有pdb那么方便，主要是没法直接给python代码打断点，断点都是打在解释器代码中的。<br>所以，定位到脚本对应位置比较麻烦，需要一点耐心。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">(gdb) py-list</span><br><span class="line">   <span class="number">1</span>    import <span class="built_in">time</span></span><br><span class="line">   <span class="number">2</span>    def <span class="built_in">fib</span>(n):</span><br><span class="line">  &gt;<span class="number">3</span>        <span class="built_in">time</span>.sleep(<span class="number">0.01</span>)</span><br><span class="line">   <span class="number">4</span>        <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">0</span>:</span><br><span class="line">   <span class="number">5</span>            <span class="built_in">return</span> <span class="number">1</span></span><br><span class="line">   <span class="number">6</span>        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">   <span class="number">7</span>            <span class="built_in">return</span> <span class="built_in">fib</span>(n-<span class="number">1</span>) + <span class="built_in">fib</span>(n-<span class="number">2</span>)</span><br><span class="line">   <span class="number">8</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">4970</span><span class="keyword">in</span> ../Python/ceval.c</span><br><span class="line">(gdb) py-locals</span><br><span class="line">n = <span class="number">4</span></span><br><span class="line">(gdb) b</span><br><span class="line">Breakpoint <span class="number">2</span> <span class="built_in">at</span> <span class="number">0x56acbe</span>: file ../Include/object.h, line <span class="number">459</span>.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">2</span>, _PyEval_EvalFrameDefault (f=&lt;optimized out&gt;, throwflag=&lt;optimized out&gt;) <span class="built_in">at</span> ../Include/object.h:<span class="number">459</span></span><br><span class="line"><span class="number">459</span><span class="keyword">in</span> ../Include/object.h</span><br><span class="line">... # 省略一些c命令</span><br><span class="line">(gdb) py-locals</span><br><span class="line">n = <span class="number">3</span></span><br><span class="line">(gdb) py-bt</span><br><span class="line">Traceback (most recent call <span class="built_in">first</span>):</span><br><span class="line">  File <span class="string">"fib.py"</span>, line <span class="number">4</span>, <span class="keyword">in</span> <span class="built_in">fib</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">0</span>:</span><br><span class="line">  File <span class="string">"fib.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> <span class="built_in">fib</span></span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">fib</span>(n-<span class="number">1</span>) + <span class="built_in">fib</span>(n-<span class="number">2</span>)</span><br><span class="line">   ... 省略一些输出</span><br><span class="line">(gdb)</span><br><span class="line">(gdb) py-up</span><br><span class="line">#<span class="number">6</span> Frame <span class="number">0x7fec0531a580</span>, <span class="keyword">for</span> file <span class="built_in">fib</span>.py, line <span class="number">7</span>, <span class="keyword">in</span> <span class="built_in">fib</span> (n=<span class="number">4</span>, i=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">fib</span>(n-<span class="number">1</span>) + <span class="built_in">fib</span>(n-<span class="number">2</span>)</span><br><span class="line">(gdb) py-locals</span><br><span class="line">n = <span class="number">4</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">(gdb) py-up</span><br><span class="line">#<span class="number">18</span> Frame <span class="number">0x7fec0531c040</span>, <span class="keyword">for</span> file <span class="built_in">fib</span>.py, line <span class="number">7</span>, <span class="keyword">in</span> <span class="built_in">fib</span> (n=<span class="number">7</span>, i=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">fib</span>(n-<span class="number">1</span>) + <span class="built_in">fib</span>(n-<span class="number">2</span>)</span><br><span class="line">(gdb) py-<span class="built_in">print</span> i</span><br><span class="line"><span class="built_in">local</span> 'i' = <span class="number">0</span></span><br><span class="line">(gdb) py-<span class="built_in">print</span> n</span><br><span class="line"><span class="built_in">local</span> 'n' = <span class="number">7</span></span><br><span class="line">(gdb) py-down</span><br><span class="line">#<span class="number">12</span> Frame <span class="number">0x7fec0531a900</span>, <span class="keyword">for</span> file <span class="built_in">fib</span>.py, line <span class="number">7</span>, <span class="keyword">in</span> <span class="built_in">fib</span> (n=<span class="number">6</span>, i=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">fib</span>(n-<span class="number">1</span>) + <span class="built_in">fib</span>(n-<span class="number">2</span>)</span><br><span class="line">(gdb) py-<span class="built_in">print</span> n</span><br><span class="line"><span class="built_in">local</span> 'n' = <span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://wiki.python.org/moin/DebuggingWithGdb" target="_blank" rel="noopener">https://wiki.python.org/moin/DebuggingWithGdb</a></li><li><a href="https://www.geeksforgeeks.org/gdb-step-by-step-introduction/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/gdb-step-by-step-introduction/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Python解释器是由C语言编写，我们可以使用GDB来调试Python进程，对于程序卡死等异常情况调试比较有帮助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt执行自定义CGI脚本</title>
    <link href="http://ponder.work/2020/11/26/openwrt-run-custom-cgi-script/"/>
    <id>http://ponder.work/2020/11/26/openwrt-run-custom-cgi-script/</id>
    <published>2020-11-26T12:17:00.000Z</published>
    <updated>2021-01-02T12:42:30.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>我家里的路由器是矿渣newifi3, 刷了OpenWrt系统，可玩性还是非常强的。<br>而且路由器作为24小时在线的设备，很适合作为网络设备的控制中心，比如使用<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E5%96%9A%E9%86%92" target="_blank" rel="noopener">WOL</a>唤醒其他设备。<br>之前就写过一个Python服务，用来控制其他设备的唤醒和睡眠。但是由于newifi3的rom空间十分有限，usb又十分不稳定，Python环境在路由器上还是太重了。<br>所以就想到了利用路由器默认的uhttpd网页服务器，自己编写CGI脚本来实现相应功能。<br><a id="more"></a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>以下操作均需要ssh登陆到路由器后台</p><h3 id="uhttpd添加lua执行功能"><a href="#uhttpd添加lua执行功能" class="headerlink" title="uhttpd添加lua执行功能"></a>uhttpd添加lua执行功能</h3><p>编辑<code>/etc/config/uhttpd</code>文件<br>在<code>config uhttpd main</code>部分添加<code>list interpreter &quot;.lua=/usr/bin/lua&quot;</code>， 使uhttpd能够执行lua文件</p><p>重启uhttp服务：<code>/etc/init.d/uhttpd restart</code></p><p>修改后的配置大致如下<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Server configuration</span></span><br><span class="line">config uhttpd main</span><br><span class="line"></span><br><span class="line"># HTTP listen addresses, multiple allowed</span><br><span class="line">list listen_http0.0.0.0:80</span><br><span class="line">list listen_http[::]:80</span><br><span class="line"></span><br><span class="line"># HTTPS listen addresses, multiple allowed</span><br><span class="line">list listen_https0.0.0.0:443</span><br><span class="line">list listen_https[::]:443</span><br><span class="line"></span><br><span class="line"># Redirect HTTP requests <span class="keyword">to</span> HTTPS <span class="keyword">if</span> possible</span><br><span class="line">option redirect_https1</span><br><span class="line"></span><br><span class="line">#<span class="built_in"> Server </span>document root</span><br><span class="line">option home/www</span><br><span class="line"></span><br><span class="line"># 此处省略其他配置</span><br><span class="line"></span><br><span class="line"># List of extension-&gt;interpreter mappings.</span><br><span class="line"># Files with an associated interpreter can</span><br><span class="line"># be called outside of the CGI<span class="built_in"> prefix </span><span class="keyword">and</span> <span class="keyword">do</span></span><br><span class="line"># <span class="keyword">not</span> need <span class="keyword">to</span> be executable.</span><br><span class="line"><span class="comment">#list interpreter".php=/usr/bin/php-cgi"</span></span><br><span class="line"><span class="comment">#list interpreter".cgi=/usr/bin/perl"</span></span><br><span class="line">list interpreter <span class="string">".lua=/usr/bin/lua"</span>  # 我们添加的内容</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处省略其他配置</span></span><br></pre></td></tr></table></figure></p><h3 id="添加CGI脚本"><a href="#添加CGI脚本" class="headerlink" title="添加CGI脚本"></a>添加CGI脚本</h3><p>从上面的配置可以看到，web的默认路径在<code>/www</code><br>我们就在这里新建一个文件夹<code>ctl</code>，来存放我们的CGI脚本, 用于实现NAS的睡眠和唤醒。</p><p>目录信息如下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/www/</span><br><span class="line">├── cgi-bin</span><br><span class="line">│   └── luci</span><br><span class="line">├── ctl</span><br><span class="line">│   ├── sleep.lua</span><br><span class="line">│   └── wakeup.lua</span><br><span class="line">├── index.html</span><br></pre></td></tr></table></figure></p><p>下面开始编写CGI脚本，需要复习以下CGI协议，可以参考<a href="http://ponder.work/2019/09/28/python-web-development/#CGI">本人的文章</a><br>再花几分钟熟悉一下<a href="https://www.runoob.com/lua/lua-tutorial.html" target="_blank" rel="noopener">lua语法</a></p><h4 id="NAS睡眠脚本"><a href="#NAS睡眠脚本" class="headerlink" title="NAS睡眠脚本"></a>NAS睡眠脚本</h4><p>睡眠的实现是在NAS上写了个简单的Web服务，基于<code>systemctl suspend</code>来实现睡眠<br>然后访问Web服务，触发NAS的睡眠。这里为了和下面的唤醒统一处理，所以通过路由器的CGI转发了一道，直接访问也是可以的。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/lua</span><br><span class="line"><span class="comment">-- /www/ctl/sleep.lua</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">stdout</span>:<span class="built_in">write</span>(<span class="string">"Content-Type: text/plain\r\n\r\n"</span>)</span><br><span class="line"><span class="keyword">local</span> <span class="built_in">status</span> = <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"wget -q -O - --timeout 1 -t 1  http://192.168.123.100:8888/ctl/sleep &gt; /dev/null"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">status</span> == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">stdout</span>:<span class="built_in">write</span>(<span class="string">"sleep succ\n"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">stdout</span>:<span class="built_in">write</span>(<span class="string">"sleep fail, already sleep?\n"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>使用：<code>curl http://192.168.123.1/ctl/sleep.lua</code></p><h4 id="NAS唤醒脚本"><a href="#NAS唤醒脚本" class="headerlink" title="NAS唤醒脚本"></a>NAS唤醒脚本</h4><p>唤醒是基于WOL，原理是在网络上广播特定格式的网络包，目标机器的网卡接受到以后唤醒机器。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/lua</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">stdout</span>:<span class="built_in">write</span>(<span class="string">"Content-Type: text/plain\r\n\r\n"</span>)</span><br><span class="line"><span class="comment">-- /usr/bin/etherwake -i &lt;网口&gt; &lt;MAC&gt;</span></span><br><span class="line"><span class="comment">-- 网口需要是和目标机器同网段的接口，在OpenWrt中通常是br-lan</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">status</span> = <span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">"/usr/bin/etherwake -i br-lan 00:12:34:56:78:90"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">status</span> == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">stdout</span>:<span class="built_in">write</span>(<span class="string">"wakeup succ\n"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">stdout</span>:<span class="built_in">write</span>(<span class="string">"wakeup fail\n"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>使用：<code>curl http://192.168.123.1/ctl/wakeup.lua</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E5%96%9A%E9%86%92" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E5%96%9A%E9%86%92</a></li><li><a href="https://www.zhihu.com/question/31579325/answer/283425839" target="_blank" rel="noopener">https://www.zhihu.com/question/31579325/answer/283425839</a></li><li><a href="https://www.runoob.com/lua/lua-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/lua/lua-tutorial.html</a></li><li><a href="https://openwrt.org/docs/guide-user/services/webserver/uhttpd" target="_blank" rel="noopener">https://openwrt.org/docs/guide-user/services/webserver/uhttpd</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;我家里的路由器是矿渣newifi3, 刷了OpenWrt系统，可玩性还是非常强的。&lt;br&gt;而且路由器作为24小时在线的设备，很适合作为网络设备的控制中心，比如使用&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E5%96%9A%E9%86%92&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WOL&lt;/a&gt;唤醒其他设备。&lt;br&gt;之前就写过一个Python服务，用来控制其他设备的唤醒和睡眠。但是由于newifi3的rom空间十分有限，usb又十分不稳定，Python环境在路由器上还是太重了。&lt;br&gt;所以就想到了利用路由器默认的uhttpd网页服务器，自己编写CGI脚本来实现相应功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="CGI" scheme="http://ponder.work/tags/CGI/"/>
    
      <category term="OpenWrt" scheme="http://ponder.work/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>树莓派系统备份</title>
    <link href="http://ponder.work/2020/10/31/raspi-system-backup/"/>
    <id>http://ponder.work/2020/10/31/raspi-system-backup/</id>
    <published>2020-10-31T12:17:00.000Z</published>
    <updated>2020-11-05T02:21:46.721Z</updated>
    
    <content type="html"><![CDATA[<p>在玩树莓派的过程中难免会碰到如何高效的备份系统的问题。</p><p>由于树莓派用的是Linux系统，所以常见的有两种备份方式</p><ol><li>基于文件的备份，比如tar，rsync</li><li>基于磁盘的备份，比如dd</li></ol><p>这两种备份方式各有利弊：<br>基于文件的备份占用空间小，而且可以在系统在线时操作，比较方便，但是当要还原整个系统时就会比较麻烦（引导重建等等）。<br>基于磁盘的备份就比较简单粗暴了，直接克隆硬盘，恢复时直接还原映像文件就好了，但是由于是整盘备份，空间占用比较大。</p><a id="more"></a><p>我这里是采用的第二种备份方式，通过缩减分区大小，排除未使用空间来减小备份文件大小</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>首先需要将树莓派的SD取下，插入到一台Linux机器上。</p><h3 id="使用Gparted缩小分区"><a href="#使用Gparted缩小分区" class="headerlink" title="使用Gparted缩小分区"></a>使用Gparted缩小分区</h3><p>这一步操作比较耗时，跟SD卡大小和速度有关，基本在几分钟到几十分钟不等。</p><p><img src="http://image.runjf.com/mweb/2020-11-01-16041166087052.jpg" alt="-w761"><br><img src="http://image.runjf.com/mweb/2020-11-01-16041166419441.jpg" alt="-w764"><br><img src="http://image.runjf.com/mweb/2020-11-01-16041167175534.jpg" alt="-w760"><br><img src="http://image.runjf.com/mweb/2020-11-01-16041167579651.jpg" alt="-w756"><br><img src="http://image.runjf.com/mweb/2020-11-01-16041167920279.jpg" alt="-w764"><br><img src="http://image.runjf.com/mweb/2020-11-01-16041169311741.jpg" alt="-w708"></p><h3 id="挂载网络存储"><a href="#挂载网络存储" class="headerlink" title="挂载网络存储"></a>挂载网络存储</h3><p>如果不想把备份文件存到网络存储上，该步骤可以忽略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo  mount.cifs -o vers=2.0,user=$&#123;nas_user&#125;,password=$&#123;nas_password&#125;,uid=$(id -u),gid=$(id -g) \</span><br><span class="line">//192.168.123.100/D-soft/ /mnt/</span><br></pre></td></tr></table></figure><h3 id="使用DD备份硬盘"><a href="#使用DD备份硬盘" class="headerlink" title="使用DD备份硬盘"></a>使用DD备份硬盘</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd if=/dev/sda of=/mnt/backup.img bs=1M count=6000 status=progress</span><br></pre></td></tr></table></figure><p>备份耗时跟SD卡大小和速度有关，基本在几分钟到几十分钟不等。</p><p>bs参数代表备份文件大小的单位，这里是1M</p><p>count代表有多少bs，也就是备份大小是<code>count*bs=6000M</code><br>这个数值需要根据你磁盘使用空间来计算，取一个大于已使用空间的值就好了。</p><p>例如，我这个SD卡已使用的空间是 <code>4M + 256M + 5.24GiB = 5625.76M</code>，则备份大小取6000M</p><h3 id="还原系统"><a href="#还原系统" class="headerlink" title="还原系统"></a>还原系统</h3><p>还原系统和新安装系统是一样的，用官方的<a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">Raspberry Pi Imager</a>还原备份镜像文件即可</p><p>还原完成之后，还需要使用Gparted将缩小的分区还原到原来的大小，耗时大概十几秒。</p><p>然后插卡开机即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在玩树莓派的过程中难免会碰到如何高效的备份系统的问题。&lt;/p&gt;
&lt;p&gt;由于树莓派用的是Linux系统，所以常见的有两种备份方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于文件的备份，比如tar，rsync&lt;/li&gt;
&lt;li&gt;基于磁盘的备份，比如dd&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两种备份方式各有利弊：&lt;br&gt;基于文件的备份占用空间小，而且可以在系统在线时操作，比较方便，但是当要还原整个系统时就会比较麻烦（引导重建等等）。&lt;br&gt;基于磁盘的备份就比较简单粗暴了，直接克隆硬盘，恢复时直接还原映像文件就好了，但是由于是整盘备份，空间占用比较大。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工作生活" scheme="http://ponder.work/categories/%E5%B7%A5%E4%BD%9C%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="Linux" scheme="http://ponder.work/tags/Linux/"/>
    
      <category term="树莓派" scheme="http://ponder.work/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>学习《重构手册》</title>
    <link href="http://ponder.work/2020/10/15/%E5%AD%A6%E4%B9%A0%E3%80%8A%E9%87%8D%E6%9E%84%E6%89%8B%E5%86%8C%E3%80%8B/"/>
    <id>http://ponder.work/2020/10/15/%E5%AD%A6%E4%B9%A0%E3%80%8A%E9%87%8D%E6%9E%84%E6%89%8B%E5%86%8C%E3%80%8B/</id>
    <published>2020-10-15T13:48:00.000Z</published>
    <updated>2020-10-18T14:38:06.066Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://image.runjf.com/mweb/2020-10-18-%E9%87%8D%E6%9E%84%E6%89%8B%E5%86%8C-%E5%BC%82%E5%91%B3.png" alt></p><a id="more"></a><style type="text/css">    .fancybox {        display: inline-block;        border-bottom: 0;    }    img[alt="before"] {        width: 350px;        height: 600px;        object-fit: contain;    }    img[alt="after"] {        width: 350px;        height: 600px;        object-fit: contain;    }</style><h2 id="类中的异味"><a href="#类中的异味" class="headerlink" title="类中的异味"></a>类中的异味</h2><h3 id="可度量的异味"><a href="#可度量的异味" class="headerlink" title="可度量的异味"></a>可度量的异味</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><strong>症状</strong></p><ul><li>代码中出现注释</li></ul><p><strong>原因</strong><br>作者认为某些内容没有说清楚</p><ul><li>采用某种做法的原因</li><li>某种复杂的算法的实现</li></ul><p><strong>措施</strong></p><ul><li>对一个代码块的注释：<a href="#Extract-Method：抽取方法">抽取方法</a>，并用注释为新方法取名</li><li>对方法所做工作的注释：<a href="#Rename-Method：重命名方法">重命名方法</a>，用注释为方法重命名</li><li>注释描述的是前提条件或边界：<a href="#Introduce-Assertion：引入断言">引入断言</a></li></ul><p><strong>收益</strong><br>可以增强表述能力，有可能暴露出重复性</p><p><strong>例外</strong><br>有些注释是必要的，比如需求文档的链接</p><h4 id="过长的方法"><a href="#过长的方法" class="headerlink" title="过长的方法"></a>过长的方法</h4><p><strong>症状</strong></p><ul><li>代码块行数很多（个人感觉超过屏幕的高度为多）</li></ul><p><strong>原因</strong><br>没有及时分解代码块，只是一味地在原来的位置增加代码</p><p><strong>措施</strong></p><ul><li>根据代码块的注释和空行和空格，分析前后语义，<a href="#Extract-Method：抽取方法">抽取方法</a>。</li><li>找到一些重构技术，用于清理直线式代码（ 即大量代码都放在一行上） 、条件式和变量</li></ul><p><strong>收益</strong><br>可以增强表述能力，有可能暴露出重复性，通常有助于建立新的类和抽象。</p><p><strong>例外</strong><br>有些复杂的算法需求，天然需求很多行</p><h4 id="过大的类"><a href="#过大的类" class="headerlink" title="过大的类"></a>过大的类</h4><p><strong>症状</strong></p><ul><li>代码行数很多</li><li>大量实例变量</li><li>大量方法</li></ul><p><strong>原因</strong><br>没有及时根据职责拆分类，只是一味地在原来的类上增加代码。</p><p><strong>措施</strong></p><ul><li>优先解决过长的方法</li><li>一个新类能承担此类部分职责, <a href="#Extract-Class：抽取类">抽取类</a></li><li>可以划分类和新子类之间的功能的话, <a href="#Extract-Subclass：抽取子类">抽取子类</a></li><li>可以确定客户所用的特性子集, <a href="#Extract-Interface：抽取接口">抽取接口</a></li></ul><p><strong>收益</strong><br>可以增强表述能力，有可能暴露出重复性</p><p><strong>例外</strong><br>无</p><h4 id="过长的参数表"><a href="#过长的参数表" class="headerlink" title="过长的参数表"></a>过长的参数表</h4><p><strong>症状</strong></p><ul><li>方法有1个或2个以上的参数（个人觉得3个以上）</li></ul><p><strong>原因</strong><br>可能是为了尽量减少对象之间的耦合。这样做不是由被调用对象来了解类之间的关系，而是让调用者来确定所有一切。<br>也有可能是程序员对例程进行了通用化</p><p><strong>措施</strong></p><ul><li>参数可由已知对象得到：<a href="#Replace-Parameter-with-Method-Call：以函数调用取代参数">参数替换为方法</a>（调用方法获取改参数）</li><li>参数来自一个对象：<a href="#Preserve-Whole-Object：保持对象完整">保持对象完整</a>（传递完整对象作为参数）</li><li>数据不是来自一个逻辑对象：<a href="#Introduce-Parameter-Object：引入参数对象">引入参数对象</a>，将其分组（将长参数表变为少量参数对象）</li></ul><p><strong>收益</strong><br>可以增强表述能力，有可能暴露出重复性。通常可以缩小规模。</p><p><strong>例外</strong></p><ul><li>不希望两个类出现依赖</li><li>参数不存在有意义的分组</li></ul><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><h4 id="名字中包含类型"><a href="#名字中包含类型" class="headerlink" title="名字中包含类型"></a>名字中包含类型</h4><p><strong>症状</strong></p><ul><li>名字采用复合词，包含类型信息</li><li>匈牙利记法，如iCount</li><li>变量名反映的是类型，而不是其用途</li></ul><p><strong>原因</strong></p><ul><li>没有ide的时代，命令包含类型增加了可读性</li></ul><p><strong>措施</strong></p><ul><li><a href="#Rename-Method：重命名方法">重命名方法</a></li><li>重命名字段</li></ul><p><strong>收益</strong><br>可以增强表述能力，有可能暴露出重复性</p><p><strong>例外</strong><br>有些场景命名中的类型是有帮助的，如sql的字段</p><h4 id="表达力差的名字"><a href="#表达力差的名字" class="headerlink" title="表达力差的名字"></a>表达力差的名字</h4><p><strong>症状</strong></p><ul><li>单字符或双字符</li><li>无元音的名字</li><li>带编号的变量，如panel1，panel2</li><li>奇怪的缩写</li><li>容易误导的名称</li></ul><p><strong>原因</strong><br>取名没有规范，过于随意</p><p><strong>措施</strong></p><ul><li><a href="#Rename-Method：重命名方法">重命名方法</a></li><li>重命名字段</li></ul><p><strong>收益</strong><br>可以增强表述能力</p><p><strong>例外</strong></p><ul><li>i,j,k等循环变量</li><li>只在几行代码中起作用的单字符变量</li><li>函数的多个版本实现</li></ul><h4 id="不一致的名字"><a href="#不一致的名字" class="headerlink" title="不一致的名字"></a>不一致的名字</h4><p><strong>症状</strong></p><ul><li>同一个对象却有多个名字</li></ul><p><strong>原因</strong><br>不同的人会在不同时刻创建类, 但作用是相同的, 导致名称不一样</p><p><strong>措施</strong></p><ul><li><a href="#Rename-Method：重命名方法">重命名方法</a></li><li>重命名字段</li></ul><p><strong>收益</strong><br>可以增强表述能力, 有可能暴露出重复性</p><p><strong>例外</strong><br>无</p><h3 id="不必要的复杂性"><a href="#不必要的复杂性" class="headerlink" title="不必要的复杂性"></a>不必要的复杂性</h3><h4 id="死代码"><a href="#死代码" class="headerlink" title="死代码"></a>死代码</h4><p><strong>症状</strong></p><ul><li>变量、参数、字段、代码段、方法或类未在任何地方使用(除了测试)</li></ul><p><strong>原因</strong></p><ul><li>需求变更, 或采用了新方法, 未充分清理</li><li>简化代码时未发现冗余的逻辑</li></ul><p><strong>措施</strong></p><ul><li>删除相关代码并测试</li></ul><p><strong>收益</strong><br>降低规模。可以增强表述能力，代码更简单。</p><p><strong>例外</strong></p><ul><li>为子类或者调用方提供的hook等方法</li></ul><h4 id="过分一般性"><a href="#过分一般性" class="headerlink" title="过分一般性"></a>过分一般性</h4><p><strong>症状</strong></p><ul><li>未使用的变量、参数、字段、代码段、方法或类; 没有实际作用的继承体系和调用链</li><li>就当前需求来说, 代码实现过于复杂</li></ul><p><strong>原因</strong></p><ul><li>预先设计, 但是实际需求并没有用到该设计, 或者不符合该设计</li></ul><p><strong>措施</strong></p><ul><li>不必要的类: <a href="#Collapse-Hierarchy：折叠继承关系">折叠继承关系</a>, <a href="#Inline-Class：内联类">内联类</a></li><li>不必要的方法: <a href="#Inline-Method：内联方法">内联方法</a>, 移除方法</li><li>不必要的字段: 删除</li><li>不必要的参数: <a href="#Remove-Parameter：移除参数">移除参数</a></li></ul><p><strong>收益</strong><br>降低规模。可以增强表述能力，代码更简单。</p><p><strong>例外</strong></p><ul><li>框架代码</li><li>为测试提供的接口</li></ul><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><h4 id="魔法数"><a href="#魔法数" class="headerlink" title="魔法数"></a>魔法数</h4><p><strong>症状</strong></p><ul><li>代码里出现了数值常量或者字符串常量</li></ul><p><strong>原因</strong></p><ul><li>第一次添加常量时, 错误地认为该常量只会在该处使用</li></ul><p><strong>措施</strong></p><ul><li>特殊值: <a href="#Replace-Magic-Number-with-Symbolic-Constant：以符号常量取代魔法数">以符号常量取代魔法数</a></li><li>可根据规则生成: 替换为函数</li></ul><p><strong>收益</strong><br>减少重复。可以增强表述能力，代码更简单。</p><p><strong>例外</strong></p><ul><li>为了提高测试代码的可读性</li></ul><h4 id="重复代码"><a href="#重复代码" class="headerlink" title="重复代码"></a>重复代码</h4><p><strong>症状</strong></p><ul><li>简单形式: 代码实现几乎相同</li><li>复杂形式: 代码作用几乎相同</li></ul><p><strong>原因</strong></p><ul><li>不同的程序员独立开发产生</li><li>懒惰, 常见于不愿意理解原代码的逻辑, 直接复制原代码少量修改</li></ul><p><strong>措施</strong></p><ul><li>两段代码部分重复: <a href="#Extract-Method：抽取方法">抽取方法</a></li><li>兄弟类之间的重复: 抽取公共部分, <a href="#Pull-Up-Field：上移字段">上移字段</a>或<a href="#Pull-Up-Method：上移方法">上移方法</a></li><li>无关类之间的重复: 采用<a href="#Extract-Class：抽取类">抽取类</a>, 抽取公共部分</li><li>重复代码不完全相同: 采用替代算法</li></ul><p><strong>收益</strong><br>减少重复, 降低规模，代码更简单。</p><p><strong>例外</strong></p><ul><li>重复代码可读性更好</li><li>只是恰好实现相同, 代码的作用并没有什么关系</li></ul><h4 id="具有不同接口的相似类"><a href="#具有不同接口的相似类" class="headerlink" title="具有不同接口的相似类"></a>具有不同接口的相似类</h4><p><strong>症状</strong></p><ul><li>两个类的作用似乎相同, 但是使用了不同的方法名</li></ul><p><strong>原因</strong></p><ul><li>开发代码时, 没有注意到已有类似代码</li></ul><p><strong>措施</strong><br>协调各个类, 使他们一致, 从而去除其中一个</p><ol><li>采用<a href="#Rename-Method：重命名方法">重命名方法</a>使方法名类似。</li><li>使用<a href="#Move-Method：搬移方法">搬移方法</a>、<a href="#Add-Parameter：添加参数">添加参数</a>和令方法参数化来使协议（即方法签名和实现途径）类似。</li><li>如果两个类只是相似而并非相同，在对它们进行合理协调后，可<a href="#Extract-Superclass：抽取超类">抽取超类</a></li><li>尽量删除多余的类</li></ol><p><strong>收益</strong><br>减少重复, 降低规模，可能增强表述能力。</p><p><strong>例外</strong></p><ul><li>有时这些类无法修改, 比如在不同的库中</li></ul><h3 id="条件逻辑"><a href="#条件逻辑" class="headerlink" title="条件逻辑"></a>条件逻辑</h3><h4 id="Null检查"><a href="#Null检查" class="headerlink" title="Null检查"></a>Null检查</h4><p><strong>症状</strong></p><ul><li>反复出现Null检查代码</li></ul><p><strong>原因</strong></p><ul><li>没有正确初始化对象和设置默认值</li></ul><p><strong>措施</strong></p><ul><li>采用默认值</li><li><a href="#Introduce-Null-Object：引入Null对象">引入Null对象</a></li></ul><p><strong>收益</strong><br>减少重复, 减少逻辑错误。</p><p><strong>例外</strong></p><ul><li>只出现一次的Null检查</li><li>Null对象的方法必须实现安全且符合逻辑的行为</li><li>Null有多种含义</li></ul><h4 id="复杂的布尔表达式"><a href="#复杂的布尔表达式" class="headerlink" title="复杂的布尔表达式"></a>复杂的布尔表达式</h4><p><strong>症状</strong></p><ul><li>复杂的and, or, not表达式</li></ul><p><strong>原因</strong></p><ul><li>复杂的业务逻辑</li><li>逻辑多次修改叠加</li></ul><p><strong>措施</strong></p><ul><li><a href="https://zh.wikipedia.org/wiki/德摩根定律" target="_blank" rel="noopener">DeMorgan法则</a>化简逻辑</li><li>引入解释变量</li><li><a href="#Replace-Nested-Conditional-with-Guard-Clauses：以卫语句取代嵌套条件式">以卫语句取代嵌套条件式</a>, 提前剔除某些条件</li><li><a href="#Decompose-Conditional：分解条件表达式">分解条件表达式</a>将各个部分置于它自己的方法中。</li></ul><p><strong>收益</strong><br>可能增强表述能力</p><p><strong>例外</strong></p><ul><li>某些本质上复杂的逻辑, 改善不大</li></ul><h4 id="特殊用例"><a href="#特殊用例" class="headerlink" title="特殊用例"></a>特殊用例</h4><p><strong>症状</strong></p><ul><li>复杂的if语句</li><li>在工作前某些特定值的检查</li></ul><p><strong>原因</strong><br>没有对要判断的对象进行很好的分析和抽象</p><p><strong>措施</strong></p><ul><li>条件式替换为多态</li><li>如果过个if子句的内容类似, 修改语句使之适用于多种情况(用变量控制不同的部分)</li></ul><p><strong>收益</strong><br>可以增强表述能力, 可能暴露重复性问题</p><p><strong>例外</strong></p><ul><li>递归代码的退出判断</li><li>有时if子句反而是最简单的</li></ul><h4 id="模拟继承-switch语句"><a href="#模拟继承-switch语句" class="headerlink" title="模拟继承(switch语句)"></a>模拟继承(switch语句)</h4><p><strong>症状</strong></p><ul><li>switch语句</li><li>多条if, elif</li><li>instanceof类型判断</li></ul><p><strong>原因</strong><br>懒得引入类型</p><p><strong>措施</strong><br>相同条件的switch语句多处出现</p><ol><li><a href="#Extract-Method：抽取方法">抽取方法</a>。抽出每个分支的代码</li><li><a href="#Move-Method：搬移方法">搬移方法</a>。将相关代码搬移至适当的类</li><li><a href="#Replace-Type-Code-with-Subclasses：以子类取代类型码">以子类取代类型码</a>或<a href="#Replace-Type-Code-with-State/Strategy：以状态/策略取代类型码">以状态/策略取代类型码</a>。建立继承体系结构</li><li><a href="#Replace-Conditional-with-Polymorphism：以多态取代条件表达式">以多态取代条件表达式</a>, 去除条件式</li></ol><p>如果条件式出现在一个单独的类中，可以通过将参数替换为显式方法或<a href="#Introduce-Null-Object：引入Null对象">引入Null对象</a>来取代条件逻辑。</p><p><strong>收益</strong><br>可以增强表述能力, 可能暴露重复性问题</p><p><strong>例外</strong></p><ul><li>仅出现一次的switch</li><li>工厂方法的switch</li></ul><h2 id="类之间的异味"><a href="#类之间的异味" class="headerlink" title="类之间的异味"></a>类之间的异味</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><h4 id="基本类型困扰"><a href="#基本类型困扰" class="headerlink" title="基本类型困扰"></a>基本类型困扰</h4><p><strong>症状</strong></p><ul><li>使用了基本类型或接近基本类型的类型（int,float,String,等等）</li><li>存在表示小整数的常量和枚举</li><li>存在表示字段名的字符串常量</li></ul><p><strong>原因</strong><br>当ArrayList(或其他一些通用结构）被滥用时，会出现这类紧密相关问题。</p><ul><li>没有使用类</li><li>模拟类型</li><li>模拟字段访问函数</li></ul><p><strong>措施</strong><br>对于缺失对象</p><ul><li>参见的”数据泥团”，解决数据泥团问题后通常可以封装基本类型。</li><li>通过<a href="#Replace-Data-Value-with-Object：以对象取代数据值">以对象取代数据值</a>，建立首类（first-class)数据值。</li></ul><p>对于模拟类型，一个整型类型码对应一个类</p><ul><li>对于该类型码，如果行为没有条件，则它更像是一个枚举，因此可以<a href="#Replace-Type-Code-with-Class：以类取代类型码">以类取代类型码</a>。</li><li>如果此类型码是不可变的，而且该类还没有子类，则将<a href="#Replace-Type-Code-with-Subclasses：以子类取代类型码">以子类取代类型码</a>。</li><li>如果类型码改变，或者类已经有子类了，就<a href="#Replace-Type-Code-with-State/Strategy：以状态/策略取代类型码">以状态/策略取代类型码</a></li></ul><p>对于模拟字段访问函数</p><ul><li>如果基本类型专门用于处理某些数组元素，<a href="#Replace-Array-with-Object：以对象取代数组">以对象取代数组</a>。</li></ul><p><strong>收益</strong><br>可以增强表述能力, 可能暴露重复性问题, 通常能表明还需要使用其他重构技术。</p><p><strong>例外</strong></p><ul><li>对象替换基本类型, 会增加开销</li></ul><h4 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h4><p><strong>症状</strong></p><ul><li>类只包含数据成员</li></ul><p><strong>原因</strong><br>类还未重复开发, 还没有抽象出行为</p><p><strong>措施</strong></p><ol><li>使用<a href="#Encapsulate-Field：封装字段">封装字段</a>防止直接访问字段</li><li>对方法尽可能采用<a href="#Remove-Setting-Method：移除设值方法">移除设值方法</a></li><li>使用<a href="#Encapsulate-Collection：封装集合">封装集合</a>防止直接访问任何集合类型的字段。</li><li>査看对象的各个客户。可以对客户使用<a href="#Extract-Method：抽取方法">抽取方法</a>，取出与类相关的代码，然后釆用<a href="#Move-Method：搬移方法">搬移方法</a>将其置于类中。</li><li>在完成上述工作后，你可能会发现类中还有多个相似的方法。使用<a href="#Rename-Method：重命名方法">重命名方法</a>、<a href="#Extract-Method：抽取方法">抽取方法</a>、<a href="#Add-Parameter：添加参数">添加参数</a>或<a href="#Remove-Parameter：移除参数">移除参数</a>等重构技术来协调签名并消除重复。</li><li>对字段的大多数访问都不再需要了，因为搬移的方法涵盖了实际使用。此时便可以使用<a href="#Hide-Method：隐藏方法">隐藏方法</a>来消除对获取方法和设置方法的访问</li></ol><p><strong>收益</strong><br>可以增强表述能力，可能会暴露重复性问题</p><p><strong>例外</strong></p><ul><li><a href="#Encapsulate-Field：封装字段">封装字段</a>对性能有影响</li></ul><h4 id="数据泥团"><a href="#数据泥团" class="headerlink" title="数据泥团"></a>数据泥团</h4><p><strong>症状</strong></p><ul><li>两到三个同样的项频繁地一同出现在类和参数表中。</li><li>在类中同时存在多组字段和方法</li><li>各组字段名以类似的子字符串开头或结尾</li></ul><p><strong>原因</strong><br>这些字段和方法, 往往应该属于另一个类, 但是没有人发现类缺失</p><p><strong>措施</strong></p><ol><li>是类的字段: 抽取字段</li><li>在方法签名中: [引入参数对象](Introduce #Parameter-Object：引入参数对象-, 保持参数对象完整</li><li>查看调用, 利用<a href="#Move-Method：搬移方法">搬移方法</a>等重构方法</li></ol><p><strong>收益</strong><br>可以增强表述能力，可能会暴露重复性问题, 通常会降低规模</p><p><strong>例外</strong></p><ul><li>传递对象会带来额外的依赖性</li></ul><h4 id="临时字段"><a href="#临时字段" class="headerlink" title="临时字段"></a>临时字段</h4><p><strong>症状</strong></p><ul><li>字段仅在某些时候进行设置，而在其余时间为Null(或不使用）</li></ul><p><strong>原因</strong><br>通过字段而不是参数来传递信息</p><p><strong>措施</strong></p><ul><li><a href="#Extract-Class：抽取类">抽取类</a>, 移出字段及相关代码</li></ul><p><strong>收益</strong><br>增强了表述能力并提高了清晰性。可能会减少重复，特别是在其他位置可以使用新类时。</p><p><strong>例外</strong></p><ul><li>有时新对象不是一个有用的对象</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="拒收的遗赠"><a href="#拒收的遗赠" class="headerlink" title="拒收的遗赠"></a>拒收的遗赠</h4><p><strong>症状</strong></p><ul><li>坦率的拒绝: 一个类继承自其父类，但是抛出了一个异常而不是支持一个方法</li><li>隐式的拒绝: 某个继承的方法不能正常工作</li><li>客户试图通过子类的句柄而不是父类的句柄来访问类。</li><li>继承没有什么实际意义，子类并不是父类的一个例子。</li></ul><p><strong>原因</strong><br>某个类之所以继承自另一个类，可能只是为了实现方便，而不是真的想用这个类来取代其父类。</p><p><strong>措施</strong></p><ul><li>如果不会导致混淆，可以不去管它。</li><li>如果找不到共享某个类关系的理由，就<a href="#Replace-Inheritance-with-Delegation：以委托取代继承">以委托取代继承</a></li><li>如果父子关系确实有意义，则可以通过<a href="#Extract-Subclass：抽取子类">抽取子类</a>、下移字段和下移方法来创建一个新的子类让这个类拥有非拒绝行为，并将父类的客户修改为这个新类的客户</li></ul><p><strong>收益</strong><br>可增强表述能力，能改善可测试性</p><p><strong>例外</strong></p><ul><li>有时拒收的遗赠可用于避免新类型的爆炸（通过拒绝特定的方法，就不需要为各种拒绝组合创建一种类型继承体系了）</li></ul><h4 id="不当的紧密性"><a href="#不当的紧密性" class="headerlink" title="不当的紧密性"></a>不当的紧密性</h4><p><strong>症状</strong></p><ul><li>一个类访问了它父类的内部（本应是私有的）部分</li></ul><p><strong>原因</strong><br>子类过分依赖了父类的一些信息, 过度耦合</p><p><strong>措施</strong></p><ul><li>如果子类以一种非受控方式访问父类的字段，则使用自<a href="#Encapsulate-Field：封装字段">封装字段</a></li><li>如果父类可以定义一个子类能插入其中的通用算法，则使用<a href="#Form-Template-Method：塑造模板函数">塑造模板函数</a></li><li>如果父类和子类需要进一步解耦合，则采用<a href="#Replace-Inheritance-with-Delegation：以委托取代继承">以委托取代继承</a></li></ul><p><strong>收益</strong><br>可以减少重复。通常能够增强表述能力，还可能会降低规模。</p><p><strong>例外</strong><br>无</p><h4 id="懒惰类"><a href="#懒惰类" class="headerlink" title="懒惰类"></a>懒惰类</h4><p><strong>症状</strong></p><ul><li>类没有做什么工作，似乎是它的父类、子类或者调用者完成了所有相关工作</li></ul><p><strong>原因</strong></p><ul><li>过度设计</li><li>重构过程中，类的所有职责都移到了其他位置</li></ul><p><strong>措施</strong></p><ul><li>如果一个类的父类或子类更适合用来完成该类的行为，则通过<a href="#Collapse-Hierarchy：折叠继承关系">折叠继承关系</a>将该类与其父类或子类合并。</li><li>否则，通过<a href="#Inline-Class：内联类">内联类</a>将其行为合并到它的调用者中。</li></ul><p><strong>收益</strong><br>可降低规模。能增强表述能力，代码更简单</p><p><strong>例外</strong></p><ul><li>有时使用懒惰类是为了传达意图</li></ul><h3 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h3><h4 id="依恋情节"><a href="#依恋情节" class="headerlink" title="依恋情节"></a>依恋情节</h4><p><strong>症状</strong></p><ul><li>一个方法似乎过于强调处理其他类的数据,而不是它自己的数据</li></ul><p><strong>原因</strong><br>常见的现象, 一般是因为代码的迭代, 类的职责发生了便宜</p><p><strong>措施</strong></p><ul><li>使用<a href="#Move-Method：搬移方法">搬移方法</a>将动作放在适当的类中</li></ul><p><strong>收益</strong><br>可减少重复。通常会增强表述能力,暴露需重构的问题</p><p><strong>例外</strong></p><ul><li>策略模式或者访问者模式</li></ul><p><strong>说明</strong><br>区分依恋情结和不当的紧密性有时并不简单。<br>依恋情结是指，一个类自身所做甚少，需要借助大量其他类才能完成自己的工作。<br>不当的紧密性则是指，一个类为了访问某些本不该访问的内容，过于深入到其他类中。</p><h4 id="不当的紧密性-一般形式"><a href="#不当的紧密性-一般形式" class="headerlink" title="不当的紧密性(一般形式)"></a>不当的紧密性(一般形式)</h4><p><strong>症状</strong></p><ul><li>一个类访问了另一个类的内部部分(而这一部分本应是私有的)</li></ul><p><strong>原因</strong><br>两个类之间有时可能会稍有关联。等你意识到存在问题时，这两个类已经过于耦合了</p><p><strong>措施</strong></p><ul><li>如果两个独立的类彼此“纠缠”，则使用<a href="#Move-Method：搬移方法">搬移方法</a>和搬移字段将适当的部分放在适当的类中。</li><li>如果纠缠的部分看上去是一个被遗漏的类，则使用<a href="#Extract-Class：抽取类">抽取类</a>和隐藏委托引入这个新类。</li><li>如果类相互指向对方，则使用将<a href="#Change-Bidirectional-Association-to-Unidirectional：将双向关联改为单向">将双向关联改为单向</a></li><li>如果子类与父类过于耦合, 参考“不当的紧密性（子类形式）”</li></ul><p><strong>收益</strong><br>可以减少重复。通常能够增强表述能力，还可能会降低规模。</p><p><strong>例外</strong><br>无</p><h4 id="消息链"><a href="#消息链" class="headerlink" title="消息链"></a>消息链</h4><p><strong>症状</strong></p><ul><li>a.b().c().d()形式的调用</li></ul><p><strong>原因</strong><br>一个对象必须与其他对象协作才能完成工作，这是自然，问题在于这不仅会使对象相互耦合，还会使获得这些对象的路径存在耦合。<br>方法不应与“陌生人”说话，也就是说，它应当只与其自身、其参数、它自己的字段或者它创建的对象有信息传递。</p><p><strong>措施</strong></p><ul><li>如果处理实际针对的是目标对象（即消息链最末端的对象），则使用<a href="#Extract-Method：抽取方法">抽取方法</a>和<a href="#Move-Method：搬移方法">搬移方法</a>将处理置于该对象中。</li><li>使用隐藏委托使方法仅依赖于一个对象（因此应将d()方法置于a对象中。这可能还需要为b()和c()对象增加一个d()方法）。</li></ul><p><strong>收益</strong><br>可以减少重复或者暴露重复性问题</p><p><strong>例外</strong><br>如果过分应用隐藏委托，那么对象都去忙着委托，就会没有一个真正做实事的</p><h4 id="中间人"><a href="#中间人" class="headerlink" title="中间人"></a>中间人</h4><p><strong>症状</strong></p><ul><li>类的大多数方法都是在调用另一个对象的同一个（或类似的）方法</li><li>如果一个类的任务主要是将工作委托出去，这样的类就称为中间人</li></ul><p><strong>原因</strong><br>可能是因为应用了隐藏委托来解决消息链引起的。<br>可能在此之后其他一些特性已经被移除了，剩下的主要就是委托方法了。</p><p><strong>措施</strong></p><ul><li>一般来说，可以通过让客户直接调用委托来<a href="#Remove-Middle-Man：移除中间人">移除中间人</a></li><li>如果委托被中间人所有，或者是不可变的，而且中间人还有增加的行为，那么此中间人可以看做委托的一个示例，此时可以<a href="#Replace-Delegation-with-Inheritance：以继承取代委托">以继承取代委托</a></li></ul><p><strong>收益</strong><br>可降低规模，还可能增强表述能力</p><p><strong>例外</strong></p><ul><li>有些模式[如代理模式（Proxy)和装饰器模式（Decorator)]会有意地创建委托</li><li>要在中间人和消息链之间权衡。</li></ul><h3 id="相关改变"><a href="#相关改变" class="headerlink" title="相关改变"></a>相关改变</h3><h4 id="发散式改变"><a href="#发散式改变" class="headerlink" title="发散式改变"></a>发散式改变</h4><p><strong>症状</strong></p><ul><li>尽管每次原因各异，但发现自己所修改的是同一个类</li></ul><p><strong>原因</strong><br>类在发展过程中会承担越来越多的职责，但没有人注意到这会涉及两种截然不同的决策</p><p><strong>措施</strong></p><ul><li>如果类既要找到对象，又要对其做一些处理，则让调用者査找对象并将该对象传入，或者让类返回调用者使用的值。</li><li>釆用<a href="#Extract-Class：抽取类">抽取类</a>为不同的决策抽取不同的类。</li><li>如果几个类共享相同类型的决策，则可以考虑合并这些新类(例如，通过<a href="#Extract-Superclass：抽取超类">抽取超类</a>或<a href="#Extract-Subclass：抽取子类">抽取子类</a>)</li></ul><p><strong>收益</strong><br>可增强表述能力（更好地传达意图），还可以提高健壮性以备将来修改。</p><p><strong>例外</strong><br>无</p><h4 id="霰弹式修改"><a href="#霰弹式修改" class="headerlink" title="霰弹式修改"></a>霰弹式修改</h4><p><strong>症状</strong></p><ul><li>仅做一个简单的修改就要更改多个类。</li></ul><p><strong>原因</strong></p><ul><li>将多个类分离是代码的一大职责。你可能缺失一个通晓全部职责的类（而大量修改本应通过这个类来完成）。</li><li>也有可能是因为你过度去除发散式改变而导致了这个异味。</li></ul><p><strong>措施</strong></p><ul><li>找出一个负责这些修改的类。这可能是一个现有类，也可能需要你通过应用<a href="#Extract-Class：抽取类">抽取类</a>来创建一个新类。</li><li>使用搬移字段和<a href="#Move-Method：搬移方法">搬移方法</a>将功能置于所选类中。让未选中的类足够简单后，使用<a href="#Inline-Class：内联类">内联类</a>将该类去除。</li></ul><p><strong>收益</strong><br>可以减少重复，增强表达能力，并能改进可维护性（将来的修改将更为本地化）。</p><p><strong>例外</strong><br>无</p><h4 id="并行继承体系"><a href="#并行继承体系" class="headerlink" title="并行继承体系"></a>并行继承体系</h4><p><strong>症状</strong></p><ul><li>在一个继承体系中建立了一个新子类后，却发现还需要在另一个继承体系中创建一个相关的子类。</li><li>可能发现两个继承体系中的子类有着相同的前缀（命名可以反映出协调继承体系的需求）。</li><li>这是霰弹式修改的一个特例</li></ul><p><strong>原因</strong><br>这样两个类并不是无关的, 而是体现了同一决策的不同方面(维度)。</p><p><strong>措施</strong></p><ul><li>使用搬移字段和<a href="#Move-Method：搬移方法">搬移方法</a>来重新分配特性，以便能去除某个继承体系。</li></ul><p><strong>收益</strong><br>可以减少重复。可能会增强表述能力，也可能会降低规模</p><p><strong>例外</strong><br>无</p><h4 id="组合爆炸"><a href="#组合爆炸" class="headerlink" title="组合爆炸"></a>组合爆炸</h4><p><strong>症状</strong></p><ul><li>你本来希望只引入一个单一的新类，但是最后却发现必须在继承体系的不同位置引入多个类。</li><li>你发现继承体系的各个层使用了一组常见的词（例如，一层增加了样式信息，下一层增加了可变性）</li></ul><p><strong>原因</strong><br>这与并行继承体系相关，但是所有内容都折叠到了一个继承体系中 。<br>原本应当是独立的决策却通过一个继承体系实现了。</p><p><strong>措施</strong></p><ul><li>如果问题不严重，可以釆用<a href="#Replace-Inheritance-with-Delegation：以委托取代继承">以委托取代继承</a>, 通过为各种变化提供同样的接口，可以创建一个装饰器设计模式示例。</li><li>如果情况已经变得相当复杂了，则有必要考虑进行大型重构了，可能还需要梳理并分解继承体系</li></ul><p><strong>收益</strong><br>可以减少重复, 降低规模</p><p><strong>例外</strong><br>无</p><h3 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h3><h4 id="不完备的类库"><a href="#不完备的类库" class="headerlink" title="不完备的类库"></a>不完备的类库</h4><p><strong>症状</strong></p><ul><li>你正在使用一个库类，希望该类具有某种功能，但它没有。</li></ul><p><strong>原因</strong><br>库类的作者未能满足你的要求</p><p><strong>措施</strong></p><ul><li>弄清类或库的所有者是否会考虑增加你所需要的支持。</li><li>如果仅仅是一两个方法，可以对库类的客户应用<a href="#Introduce-Foreign-Method：引入外加函数">引入外加函数</a></li><li>如果有多个方法需要增加，则应<a href="#Introduce-Local-Extension：引入本地扩展">引入本地扩展</a></li><li>可能需要引入一个层来覆盖这个库</li></ul><p><strong>收益</strong><br>可以减少重复</p><p><strong>例外</strong><br>如果有多个项目，每个项目都使用不兼容的方式来扩展一个类，那么在改变库时就会导致额外的工作</p><h2 id="重构技法"><a href="#重构技法" class="headerlink" title="重构技法"></a>重构技法</h2><h3 id="Composing-Methods：优化函数的构成"><a href="#Composing-Methods：优化函数的构成" class="headerlink" title="Composing Methods：优化函数的构成"></a>Composing Methods：优化函数的构成</h3><h4 id="Extract-Method：抽取方法"><a href="#Extract-Method：抽取方法" class="headerlink" title="Extract Method：抽取方法"></a>Extract Method：抽取方法</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOwing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  printBanner();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print details.</span></span><br><span class="line">  System.out.println(<span class="string">"name: "</span> + name);</span><br><span class="line">  System.out.println(<span class="string">"amount: "</span> + getOutstanding());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOwing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  printBanner();</span><br><span class="line">  printDetails(getOutstanding());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDetails</span><span class="params">(<span class="keyword">double</span> outstanding)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"name: "</span> + name);</span><br><span class="line">  System.out.println(<span class="string">"amount: "</span> + outstanding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Inline-Method：内联方法"><a href="#Inline-Method：内联方法" class="headerlink" title="Inline Method：内联方法"></a>Inline Method：内联方法</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaDelivery</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getRating</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> moreThanFiveLateDeliveries() ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">moreThanFiveLateDeliveries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numberOfLateDeliveries &gt; <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PizzaDelivery</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getRating</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numberOfLateDeliveries &gt; <span class="number">5</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Extract-Variable：提炼变量"><a href="#Extract-Variable：提炼变量" class="headerlink" title="Extract Variable：提炼变量"></a>Extract Variable：提炼变量</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">renderBanner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((platform.toUpperCase().indexOf(<span class="string">"MAC"</span>) &gt; -<span class="number">1</span>) &amp;&amp;</span><br><span class="line">       (browser.toUpperCase().indexOf(<span class="string">"IE"</span>) &gt; -<span class="number">1</span>) &amp;&amp;</span><br><span class="line">        wasInitialized() &amp;&amp; resize &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">renderBanner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">boolean</span> isMacOs = platform.toUpperCase().indexOf(<span class="string">"MAC"</span>) &gt; -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">boolean</span> isIE = browser.toUpperCase().indexOf(<span class="string">"IE"</span>) &gt; -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">boolean</span> wasResized = resize &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isMacOs &amp;&amp; isIE &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Inline-Temp：内联临时变量"><a href="#Inline-Temp：内联临时变量" class="headerlink" title="Inline Temp：内联临时变量"></a>Inline Temp：内联临时变量</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasDiscount</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> basePrice = order.basePrice();</span><br><span class="line">  <span class="keyword">return</span> basePrice &gt; <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasDiscount</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> order.basePrice() &gt; <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Replace-Temp-with-Query：以查询取代临时变量"><a href="#Replace-Temp-with-Query：以查询取代临时变量" class="headerlink" title="Replace Temp with Query：以查询取代临时变量"></a>Replace Temp with Query：以查询取代临时变量</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculateTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> basePrice = quantity * itemPrice;</span><br><span class="line">  <span class="keyword">if</span> (basePrice &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> basePrice * <span class="number">0.95</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> basePrice * <span class="number">0.98</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculateTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (basePrice() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> basePrice() * <span class="number">0.95</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> basePrice() * <span class="number">0.98</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">basePrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> quantity * itemPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Split-Temporary-Variable：拆分临时变量"><a href="#Split-Temporary-Variable：拆分临时变量" class="headerlink" title="Split Temporary Variable：拆分临时变量"></a>Split Temporary Variable：拆分临时变量</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> temp = <span class="number">2</span> * (height + width);</span><br><span class="line">System.out.println(temp);</span><br><span class="line">temp = height * width;</span><br><span class="line">System.out.println(temp);</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> perimeter = <span class="number">2</span> * (height + width);</span><br><span class="line">System.out.println(perimeter);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> area = height * width;</span><br><span class="line">System.out.println(area);</span><br></pre></td></tr></table></figure></p><h4 id="Remove-Assignments-to-Parameters：移除参数赋值"><a href="#Remove-Assignments-to-Parameters：移除参数赋值" class="headerlink" title="Remove Assignments to Parameters：移除参数赋值"></a>Remove Assignments to Parameters：移除参数赋值</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">discount</span><span class="params">(<span class="keyword">int</span> inputVal, <span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inputVal &gt; <span class="number">50</span>) &#123;</span><br><span class="line">    inputVal -= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">discount</span><span class="params">(<span class="keyword">int</span> inputVal, <span class="keyword">int</span> quantity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = inputVal;</span><br><span class="line">  <span class="keyword">if</span> (inputVal &gt; <span class="number">50</span>) &#123;</span><br><span class="line">    result -= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Replace-Method-with-Method-Object：以方法对象替代方法"><a href="#Replace-Method-with-Method-Object：以方法对象替代方法" class="headerlink" title="Replace Method with Method Object：以方法对象替代方法"></a>Replace Method with Method Object：以方法对象替代方法</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> primaryBasePrice;</span><br><span class="line">    <span class="keyword">double</span> secondaryBasePrice;</span><br><span class="line">    <span class="keyword">double</span> tertiaryBasePrice;</span><br><span class="line">    <span class="comment">// Perform long computation.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PriceCalculator(<span class="keyword">this</span>).compute();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriceCalculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> primaryBasePrice;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> secondaryBasePrice;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> tertiaryBasePrice;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PriceCalculator</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Copy relevant information from the</span></span><br><span class="line">    <span class="comment">// order object.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Perform long computation.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Substitute-Algorithm：替换算法"><a href="#Substitute-Algorithm：替换算法" class="headerlink" title="Substitute Algorithm：替换算法"></a>Substitute Algorithm：替换算法</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">foundPerson</span><span class="params">(String[] people)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; people.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (people[i].equals(<span class="string">"Don"</span>))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Don"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (people[i].equals(<span class="string">"John"</span>))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"John"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (people[i].equals(<span class="string">"Kent"</span>))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Kent"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">foundPerson</span><span class="params">(String[] people)</span></span>&#123;</span><br><span class="line">  List candidates =</span><br><span class="line">    Arrays.asList(<span class="keyword">new</span> String[] &#123;<span class="string">"Don"</span>, <span class="string">"John"</span>, <span class="string">"Kent"</span>&#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; people.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (candidates.contains(people[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> people[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Moving-Features-between-Objects：在对象之间搬移特性"><a href="#Moving-Features-between-Objects：在对象之间搬移特性" class="headerlink" title="Moving Features between Objects：在对象之间搬移特性"></a>Moving Features between Objects：在对象之间搬移特性</h3><h4 id="Move-Method：搬移方法"><a href="#Move-Method：搬移方法" class="headerlink" title="Move Method：搬移方法"></a>Move Method：搬移方法</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-move-method-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-move-method-after.png" alt="after"></p><h4 id="Move-Field：搬移字段"><a href="#Move-Field：搬移字段" class="headerlink" title="Move Field：搬移字段"></a>Move Field：搬移字段</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-move-field-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-move-field-after.png" alt="after"></p><h4 id="Extract-Class：抽取类"><a href="#Extract-Class：抽取类" class="headerlink" title="Extract Class：抽取类"></a>Extract Class：抽取类</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-extract-class-before.png" alt="before"><img src="http://image.runjf.com/mweb/2020-10-18-extract-class-after.png" alt="after"></p><h4 id="Inline-Class：内联类"><a href="#Inline-Class：内联类" class="headerlink" title="Inline Class：内联类"></a>Inline Class：内联类</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-inline-class-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-inline-class-after.png" alt="after"></p><h4 id="Hide-Delegate：隐藏委托"><a href="#Hide-Delegate：隐藏委托" class="headerlink" title="Hide Delegate：隐藏委托"></a>Hide Delegate：隐藏委托</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-hide-delegate-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-hide-delegate-after.png" alt="after"></p><h4 id="Remove-Middle-Man：移除中间人"><a href="#Remove-Middle-Man：移除中间人" class="headerlink" title="Remove Middle Man：移除中间人"></a>Remove Middle Man：移除中间人</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-remove-middle-man-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-remove-middle-man-after.png" alt="after"></p><h4 id="Introduce-Foreign-Method：引入外加函数"><a href="#Introduce-Foreign-Method：引入外加函数" class="headerlink" title="Introduce Foreign Method：引入外加函数"></a>Introduce Foreign Method：引入外加函数</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Report</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sendReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Date nextDay = <span class="keyword">new</span> Date(previousEnd.getYear(),</span><br><span class="line">      previousEnd.getMonth(), previousEnd.getDate() + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Report</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sendReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Date newStart = nextDay(previousEnd);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Date <span class="title">nextDay</span><span class="params">(Date arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date(arg.getYear(), arg.getMonth(), arg.getDate() + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Introduce-Local-Extension：引入本地扩展"><a href="#Introduce-Local-Extension：引入本地扩展" class="headerlink" title="Introduce Local Extension：引入本地扩展"></a>Introduce Local Extension：引入本地扩展</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-introduce-local-extension-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-introduce-local-extension-after.png" alt="after"></p><h3 id="Organizing-Data：重新组织数据"><a href="#Organizing-Data：重新组织数据" class="headerlink" title="Organizing Data：重新组织数据"></a>Organizing Data：重新组织数据</h3><h4 id="Change-Value-to-Reference：将值对象改为引用对象"><a href="#Change-Value-to-Reference：将值对象改为引用对象" class="headerlink" title="Change Value to Reference：将值对象改为引用对象"></a>Change Value to Reference：将值对象改为引用对象</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-change-value-to-reference-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-change-value-to-reference-after.png" alt="after"></p><h4 id="Change-Reference-to-Value：将引用对象改为值对象"><a href="#Change-Reference-to-Value：将引用对象改为值对象" class="headerlink" title="Change Reference to Value：将引用对象改为值对象"></a>Change Reference to Value：将引用对象改为值对象</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-change-reference-to-value-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-change-reference-to-value-after.png" alt="after"></p><h4 id="Duplicate-Observed-Data：复制被监视数据"><a href="#Duplicate-Observed-Data：复制被监视数据" class="headerlink" title="Duplicate Observed Data：复制被监视数据"></a>Duplicate Observed Data：复制被监视数据</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-duplicate-observed-data-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-duplicate-observed-data-after.png" alt="after"></p><h4 id="Self-Encapsulate-Field：自封装字段"><a href="#Self-Encapsulate-Field：自封装字段" class="headerlink" title="Self Encapsulate Field：自封装字段"></a>Self Encapsulate Field：自封装字段</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Range</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> low, high;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">includes</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg &gt;= low &amp;&amp; arg &lt;= high;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Range</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> low, high;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">includes</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg &gt;= getLow() &amp;&amp; arg &lt;= getHigh();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getLow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getHigh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> high;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Replace-Data-Value-with-Object：以对象取代数据值"><a href="#Replace-Data-Value-with-Object：以对象取代数据值" class="headerlink" title="Replace Data Value with Object：以对象取代数据值"></a>Replace Data Value with Object：以对象取代数据值</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-replace-data-value-with-object-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-replace-data-value-with-object-after.png" alt="after"></p><h4 id="Replace-Array-with-Object：以对象取代数组"><a href="#Replace-Array-with-Object：以对象取代数组" class="headerlink" title="Replace Array with Object：以对象取代数组"></a>Replace Array with Object：以对象取代数组</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] row = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">row[<span class="number">0</span>] = <span class="string">"Liverpool"</span>;</span><br><span class="line">row[<span class="number">1</span>] = <span class="string">"15"</span>;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Performance row = <span class="keyword">new</span> Performance();</span><br><span class="line">row.setName(<span class="string">"Liverpool"</span>);</span><br><span class="line">row.setWins(<span class="string">"15"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="Change-Unidirectional-Association-to-Bidirectional：将单向关联改为双向"><a href="#Change-Unidirectional-Association-to-Bidirectional：将单向关联改为双向" class="headerlink" title="Change Unidirectional Association to Bidirectional：将单向关联改为双向"></a>Change Unidirectional Association to Bidirectional：将单向关联改为双向</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-change-unidirectional-association-to-bidirectional-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-change-unidirectional-association-to-bidirectional-after.png" alt="after"></p><h4 id="Change-Bidirectional-Association-to-Unidirectional：将双向关联改为单向"><a href="#Change-Bidirectional-Association-to-Unidirectional：将双向关联改为单向" class="headerlink" title="Change Bidirectional Association to Unidirectional：将双向关联改为单向"></a>Change Bidirectional Association to Unidirectional：将双向关联改为单向</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-change-bidirectional-association-to-unidirectional-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-change-bidirectional-association-to-unidirectional-after.png" alt="after"></p><h4 id="Encapsulate-Field：封装字段"><a href="#Encapsulate-Field：封装字段" class="headerlink" title="Encapsulate Field：封装字段"></a>Encapsulate Field：封装字段</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">    name = arg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Encapsulate-Collection：封装集合"><a href="#Encapsulate-Collection：封装集合" class="headerlink" title="Encapsulate Collection：封装集合"></a>Encapsulate Collection：封装集合</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-encapsulate-collection-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-encapsulate-collection-after.png" alt="after"></p><h4 id="Replace-Magic-Number-with-Symbolic-Constant：以符号常量取代魔法数"><a href="#Replace-Magic-Number-with-Symbolic-Constant：以符号常量取代魔法数" class="headerlink" title="Replace Magic Number with Symbolic Constant：以符号常量取代魔法数"></a>Replace Magic Number with Symbolic Constant：以符号常量取代魔法数</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">potentialEnergy</span><span class="params">(<span class="keyword">double</span> mass, <span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mass * height * <span class="number">9.81</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> GRAVITATIONAL_CONSTANT = <span class="number">9.81</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">potentialEnergy</span><span class="params">(<span class="keyword">double</span> mass, <span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mass * height * GRAVITATIONAL_CONSTANT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Replace-Type-Code-with-Class：以类取代类型码"><a href="#Replace-Type-Code-with-Class：以类取代类型码" class="headerlink" title="Replace Type Code with Class：以类取代类型码"></a>Replace Type Code with Class：以类取代类型码</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-replace-type-code-with-class-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-replace-type-code-with-class-after.png" alt="after"></p><h4 id="Replace-Type-Code-with-Subclasses：以子类取代类型码"><a href="#Replace-Type-Code-with-Subclasses：以子类取代类型码" class="headerlink" title="Replace Type Code with Subclasses：以子类取代类型码"></a>Replace Type Code with Subclasses：以子类取代类型码</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-replace-type-code-with-subclasses-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-replace-type-code-with-subclasses-after.png" alt="after"></p><h4 id="Replace-Type-Code-with-State-Strategy：以状态-策略取代类型码"><a href="#Replace-Type-Code-with-State-Strategy：以状态-策略取代类型码" class="headerlink" title="Replace Type Code with State/Strategy：以状态/策略取代类型码"></a>Replace Type Code with State/Strategy：以状态/策略取代类型码</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-replace-type-code-with-state-strategy-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-replace-type-code-with-state-strategy-after.png" alt="after"></p><h4 id="Replace-Subclass-with-Fields：以字段取代子类"><a href="#Replace-Subclass-with-Fields：以字段取代子类" class="headerlink" title="Replace Subclass with Fields：以字段取代子类"></a>Replace Subclass with Fields：以字段取代子类</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-replace-subclass-with-fields-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-replace-subclass-with-fields-after.png" alt="after"></p><h3 id="Simplifying-Conditional-Expressions：简化条件表达式"><a href="#Simplifying-Conditional-Expressions：简化条件表达式" class="headerlink" title="Simplifying Conditional Expressions：简化条件表达式"></a>Simplifying Conditional Expressions：简化条件表达式</h3><h4 id="Consolidate-Conditional-Expression：合并条件表达式"><a href="#Consolidate-Conditional-Expression：合并条件表达式" class="headerlink" title="Consolidate Conditional Expression：合并条件表达式"></a>Consolidate Conditional Expression：合并条件表达式</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disabilityAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (seniority &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (monthsDisabled &gt; <span class="number">12</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isPartTime) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Compute the disability amount.</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">disabilityAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isNotEligibleForDisability()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Compute the disability amount.</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Consolidate-Duplicate-Conditional-Fragments：合并重复条件片断"><a href="#Consolidate-Duplicate-Conditional-Fragments：合并重复条件片断" class="headerlink" title="Consolidate Duplicate Conditional Fragments：合并重复条件片断"></a>Consolidate Duplicate Conditional Fragments：合并重复条件片断</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isSpecialDeal()) &#123;</span><br><span class="line">  total = price * <span class="number">0.95</span>;</span><br><span class="line">  send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  total = price * <span class="number">0.98</span>;</span><br><span class="line">  send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isSpecialDeal()) &#123;</span><br><span class="line">  total = price * <span class="number">0.95</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  total = price * <span class="number">0.98</span>;</span><br><span class="line">&#125;</span><br><span class="line">send();</span><br></pre></td></tr></table></figure></p><h4 id="Decompose-Conditional：分解条件表达式"><a href="#Decompose-Conditional：分解条件表达式" class="headerlink" title="Decompose Conditional：分解条件表达式"></a>Decompose Conditional：分解条件表达式</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (date.before(SUMMER_START) || date.after(SUMMER_END)) &#123;</span><br><span class="line">  charge = quantity * winterRate + winterServiceCharge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  charge = quantity * summerRate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isSummer(date)) &#123;</span><br><span class="line">  charge = summerCharge(quantity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  charge = winterCharge(quantity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Replace-Conditional-with-Polymorphism：以多态取代条件表达式"><a href="#Replace-Conditional-with-Polymorphism：以多态取代条件表达式" class="headerlink" title="Replace Conditional with Polymorphism：以多态取代条件表达式"></a>Replace Conditional with Polymorphism：以多态取代条件表达式</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> EUROPEAN:</span><br><span class="line">        <span class="keyword">return</span> getBaseSpeed();</span><br><span class="line">      <span class="keyword">case</span> AFRICAN:</span><br><span class="line">        <span class="keyword">return</span> getBaseSpeed() - getLoadFactor() * numberOfCoconuts;</span><br><span class="line">      <span class="keyword">case</span> NORWEGIAN_BLUE:</span><br><span class="line">        <span class="keyword">return</span> (isNailed) ? <span class="number">0</span> : getBaseSpeed(voltage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Should be unreachable"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">European</span> <span class="keyword">extends</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getBaseSpeed();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">African</span> <span class="keyword">extends</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getBaseSpeed() - getLoadFactor() * numberOfCoconuts;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NorwegianBlue</span> <span class="keyword">extends</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (isNailed) ? <span class="number">0</span> : getBaseSpeed(voltage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Somewhere in client code</span></span><br><span class="line">speed = bird.getSpeed();</span><br></pre></td></tr></table></figure></p><h4 id="Remove-Control-Flag：移除控制标记"><a href="#Remove-Control-Flag：移除控制标记" class="headerlink" title="Remove Control Flag：移除控制标记"></a>Remove Control Flag：移除控制标记</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">foundMiscreant</span><span class="params">(String[] people)</span></span>&#123;</span><br><span class="line">    String found = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; people.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (found.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (people[i].equals (<span class="string">"John"</span>))&#123;</span><br><span class="line">                sendAlert();</span><br><span class="line">                found = <span class="string">"John"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> found;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">foundMiscreant</span><span class="params">(String[] people)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; people.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (found.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (people[i].equals (<span class="string">"John"</span>))&#123;</span><br><span class="line">                sendAlert();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"John"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Replace-Nested-Conditional-with-Guard-Clauses：以卫语句取代嵌套条件式"><a href="#Replace-Nested-Conditional-with-Guard-Clauses：以卫语句取代嵌套条件式" class="headerlink" title="Replace Nested Conditional with Guard Clauses：以卫语句取代嵌套条件式"></a>Replace Nested Conditional with Guard Clauses：以卫语句取代嵌套条件式</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPayAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> result;</span><br><span class="line">  <span class="keyword">if</span> (isDead)&#123;</span><br><span class="line">    result = deadAmount();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isSeparated)&#123;</span><br><span class="line">      result = separatedAmount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isRetired)&#123;</span><br><span class="line">        result = retiredAmount();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        result = normalPayAmount();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPayAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isDead)&#123;</span><br><span class="line">    <span class="keyword">return</span> deadAmount();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isSeparated)&#123;</span><br><span class="line">    <span class="keyword">return</span> separatedAmount();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isRetired)&#123;</span><br><span class="line">    <span class="keyword">return</span> retiredAmount();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> normalPayAmount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Introduce-Null-Object：引入Null对象"><a href="#Introduce-Null-Object：引入Null对象" class="headerlink" title="Introduce Null Object：引入Null对象"></a>Introduce Null Object：引入Null对象</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (customer == <span class="keyword">null</span>) &#123;</span><br><span class="line">  plan = BillingPlan.basic();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  plan = customer.getPlan();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NullCustomer</span> <span class="keyword">extends</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">Plan <span class="title">getPlan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> NullPlan();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Some other NULL functionality.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace null values with Null-object.</span></span><br><span class="line">customer = (order.customer != <span class="keyword">null</span>) ?</span><br><span class="line">  order.customer : <span class="keyword">new</span> NullCustomer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Null-object as if it's normal subclass.</span></span><br><span class="line">plan = customer.getPlan();</span><br></pre></td></tr></table></figure></p><h4 id="Introduce-Assertion：引入断言"><a href="#Introduce-Assertion：引入断言" class="headerlink" title="Introduce Assertion：引入断言"></a>Introduce Assertion：引入断言</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getExpenseLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Should have either expense limit or</span></span><br><span class="line">  <span class="comment">// a primary project.</span></span><br><span class="line">  <span class="keyword">return</span> (expenseLimit != NULL_EXPENSE) ?</span><br><span class="line">    expenseLimit :</span><br><span class="line">    primaryProject.getMemberExpenseLimit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getExpenseLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Assert.isTrue(expenseLimit != NULL_EXPENSE || primaryProject != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (expenseLimit != NULL_EXPENSE) ?</span><br><span class="line">    expenseLimit:</span><br><span class="line">    primaryProject.getMemberExpenseLimit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Simplifying-Method-Calls：简化方法调用"><a href="#Simplifying-Method-Calls：简化方法调用" class="headerlink" title="Simplifying Method Calls：简化方法调用"></a>Simplifying Method Calls：简化方法调用</h3><h4 id="Add-Parameter：添加参数"><a href="#Add-Parameter：添加参数" class="headerlink" title="Add Parameter：添加参数"></a>Add Parameter：添加参数</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-add-parameter-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-add-parameter-after.png" alt="after"></p><h4 id="Remove-Parameter：移除参数"><a href="#Remove-Parameter：移除参数" class="headerlink" title="Remove Parameter：移除参数"></a>Remove Parameter：移除参数</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-remove-parameter-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-remove-parameter-after.png" alt="after"></p><h4 id="Rename-Method：重命名方法"><a href="#Rename-Method：重命名方法" class="headerlink" title="Rename Method：重命名方法"></a>Rename Method：重命名方法</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-rename-method-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-rename-method-after.png" alt="after"></p><h4 id="Separate-Query-from-Modifier：将查询方法和修改方法分离"><a href="#Separate-Query-from-Modifier：将查询方法和修改方法分离" class="headerlink" title="Separate Query from Modifier：将查询方法和修改方法分离"></a>Separate Query from Modifier：将查询方法和修改方法分离</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-separate-query-from-modifier-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-separate-query-from-modifier-after.png" alt="after"></p><h4 id="Parameterize-Method：让方法携带参数"><a href="#Parameterize-Method：让方法携带参数" class="headerlink" title="Parameterize Method：让方法携带参数"></a>Parameterize Method：让方法携带参数</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-parameterize-method-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-parameterize-method-after.png" alt="after"></p><h4 id="Introduce-Parameter-Object：引入参数对象"><a href="#Introduce-Parameter-Object：引入参数对象" class="headerlink" title="Introduce Parameter Object：引入参数对象"></a>Introduce Parameter Object：引入参数对象</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-introduce-parameter-object-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-introduce-parameter-object-after.png" alt="after"></p><h4 id="Preserve-Whole-Object：保持对象完整"><a href="#Preserve-Whole-Object：保持对象完整" class="headerlink" title="Preserve Whole Object：保持对象完整"></a>Preserve Whole Object：保持对象完整</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> low = daysTempRange.getLow();</span><br><span class="line"><span class="keyword">int</span> high = daysTempRange.getHigh();</span><br><span class="line"><span class="keyword">boolean</span> withinPlan = plan.withinRange(low, high);</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> withinPlan = plan.withinRange(daysTempRange);</span><br></pre></td></tr></table></figure></p><h4 id="Remove-Setting-Method：移除设值方法"><a href="#Remove-Setting-Method：移除设值方法" class="headerlink" title="Remove Setting Method：移除设值方法"></a>Remove Setting Method：移除设值方法</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-remove-setting-method-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-remove-setting-method-after.png" alt="after"></p><h4 id="Replace-Parameter-with-Explicit-Methods：以明确函数取代参数"><a href="#Replace-Parameter-with-Explicit-Methods：以明确函数取代参数" class="headerlink" title="Replace Parameter with Explicit Methods：以明确函数取代参数"></a>Replace Parameter with Explicit Methods：以明确函数取代参数</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String name, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (name.equals(<span class="string">"height"</span>)) &#123;</span><br><span class="line">    height = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (name.equals(<span class="string">"width"</span>)) &#123;</span><br><span class="line">    width = value;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Assert.shouldNeverReachHere();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">  height = arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">  width = arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Replace-Parameter-with-Method-Call：以函数调用取代参数"><a href="#Replace-Parameter-with-Method-Call：以函数调用取代参数" class="headerlink" title="Replace Parameter with Method Call：以函数调用取代参数"></a>Replace Parameter with Method Call：以函数调用取代参数</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> basePrice = quantity * itemPrice;</span><br><span class="line"><span class="keyword">double</span> seasonDiscount = <span class="keyword">this</span>.getSeasonalDiscount();</span><br><span class="line"><span class="keyword">double</span> fees = <span class="keyword">this</span>.getFees();</span><br><span class="line"><span class="keyword">double</span> finalPrice = discountedPrice(basePrice, seasonDiscount, fees);</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> basePrice = quantity * itemPrice;</span><br><span class="line"><span class="keyword">double</span> finalPrice = discountedPrice(basePrice);</span><br></pre></td></tr></table></figure></p><h4 id="Hide-Method：隐藏方法"><a href="#Hide-Method：隐藏方法" class="headerlink" title="Hide Method：隐藏方法"></a>Hide Method：隐藏方法</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-hide-method-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-hide-method-after.png" alt="after"></p><h4 id="Replace-Constructor-with-Factory-Method：以工厂方法取代构造函数"><a href="#Replace-Constructor-with-Factory-Method：以工厂方法取代构造函数" class="headerlink" title="Replace Constructor with Factory Method：以工厂方法取代构造函数"></a>Replace Constructor with Factory Method：以工厂方法取代构造函数</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  Employee(<span class="keyword">int</span> type) &#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Employee <span class="title">create</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    employee = <span class="keyword">new</span> Employee(type);</span><br><span class="line">    <span class="comment">// do some heavy lifting.</span></span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Replace-Error-Code-with-Exception：以异常取代错误码"><a href="#Replace-Error-Code-with-Exception：以异常取代错误码" class="headerlink" title="Replace Error Code with Exception：以异常取代错误码"></a>Replace Error Code with Exception：以异常取代错误码</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (amount &gt; _balance) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    balance -= amount;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">int</span> amount)</span> <span class="keyword">throws</span> BalanceException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (amount &gt; _balance) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BalanceException();</span><br><span class="line">  &#125;</span><br><span class="line">  balance -= amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Replace-Exception-with-Test：以测试取代异常"><a href="#Replace-Exception-with-Test：以测试取代异常" class="headerlink" title="Replace Exception with Test：以测试取代异常"></a>Replace Exception with Test：以测试取代异常</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getValueForPeriod</span><span class="params">(<span class="keyword">int</span> periodNumber)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> values[periodNumber];</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getValueForPeriod</span><span class="params">(<span class="keyword">int</span> periodNumber)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (periodNumber &gt;= values.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> values[periodNumber];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Pull-Up-Field：上移字段"><a href="#Pull-Up-Field：上移字段" class="headerlink" title="Pull Up Field：上移字段"></a>Pull Up Field：上移字段</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-pull-up-field-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-pull-up-field-after.png" alt="after"></p><h4 id="Pull-Up-Method：上移方法"><a href="#Pull-Up-Method：上移方法" class="headerlink" title="Pull Up Method：上移方法"></a>Pull Up Method：上移方法</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-pull-up-method-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-pull-up-method-after.png" alt="after"></p><h4 id="Pull-Up-Constructor-Body：上移构造函数本体"><a href="#Pull-Up-Constructor-Body：上移构造函数本体" class="headerlink" title="Pull Up Constructor Body：上移构造函数本体"></a>Pull Up Constructor Body：上移构造函数本体</h4><p>before<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, String id, <span class="keyword">int</span> grade)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>after<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, String id, <span class="keyword">int</span> grade)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name, id);</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Dealing-with-Generalization：处理概括关系"><a href="#Dealing-with-Generalization：处理概括关系" class="headerlink" title="Dealing with Generalization：处理概括关系"></a>Dealing with Generalization：处理概括关系</h3><h4 id="Push-Down-Field：下移字段"><a href="#Push-Down-Field：下移字段" class="headerlink" title="Push Down Field：下移字段"></a>Push Down Field：下移字段</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-push-down-field-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-push-down-field-after.png" alt="after"></p><h4 id="Push-Down-Method：下移方法"><a href="#Push-Down-Method：下移方法" class="headerlink" title="Push Down Method：下移方法"></a>Push Down Method：下移方法</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-push-down-method-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-push-down-method-after.png" alt="after"></p><h4 id="Extract-Subclass：抽取子类"><a href="#Extract-Subclass：抽取子类" class="headerlink" title="Extract Subclass：抽取子类"></a>Extract Subclass：抽取子类</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-extract-subclass-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-extract-subclass-after.png" alt="after"></p><h4 id="Extract-Superclass：抽取超类"><a href="#Extract-Superclass：抽取超类" class="headerlink" title="Extract Superclass：抽取超类"></a>Extract Superclass：抽取超类</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-extract-superclass-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-extract-superclass-after.png" alt="after"></p><h4 id="Extract-Interface：抽取接口"><a href="#Extract-Interface：抽取接口" class="headerlink" title="Extract Interface：抽取接口"></a>Extract Interface：抽取接口</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-extract-interface-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-extract-interface-after.png" alt="after"></p><h4 id="Collapse-Hierarchy：折叠继承关系"><a href="#Collapse-Hierarchy：折叠继承关系" class="headerlink" title="Collapse Hierarchy：折叠继承关系"></a>Collapse Hierarchy：折叠继承关系</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-collapse-hierarchy-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-collapse-hierarchy-after.png" alt="after"></p><h4 id="Form-Template-Method：塑造模板函数"><a href="#Form-Template-Method：塑造模板函数" class="headerlink" title="Form Template Method：塑造模板函数"></a>Form Template Method：塑造模板函数</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-form-template-method-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-form-template-method-after.png" alt="after"></p><h4 id="Replace-Inheritance-with-Delegation：以委托取代继承"><a href="#Replace-Inheritance-with-Delegation：以委托取代继承" class="headerlink" title="Replace Inheritance with Delegation：以委托取代继承"></a>Replace Inheritance with Delegation：以委托取代继承</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-replace-inheritance-with-delegation-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-replace-inheritance-with-delegation-after.png" alt="after"></p><h4 id="Replace-Delegation-with-Inheritance：以继承取代委托"><a href="#Replace-Delegation-with-Inheritance：以继承取代委托" class="headerlink" title="Replace Delegation with Inheritance：以继承取代委托"></a>Replace Delegation with Inheritance：以继承取代委托</h4><p><img src="http://image.runjf.com/mweb/2020-10-18-replace-delegation-with-inheritance-before.png" alt="before"> <img src="http://image.runjf.com/mweb/2020-10-18-replace-delegation-with-inheritance-after.png" alt="after"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://book.douban.com/subject/1173730/" target="_blank" rel="noopener">重构手册</a></li><li><a href="https://refactoring.guru/refactoring/techniques" target="_blank" rel="noopener">https://refactoring.guru/refactoring/techniques</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://image.runjf.com/mweb/2020-10-18-%E9%87%8D%E6%9E%84%E6%89%8B%E5%86%8C-%E5%BC%82%E5%91%B3.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="重构" scheme="http://ponder.work/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>午睡时的梦</title>
    <link href="http://ponder.work/2020/09/19/%E5%8D%88%E7%9D%A1%E6%97%B6%E7%9A%84%E6%A2%A6/"/>
    <id>http://ponder.work/2020/09/19/%E5%8D%88%E7%9D%A1%E6%97%B6%E7%9A%84%E6%A2%A6/</id>
    <published>2020-09-19T06:46:13.000Z</published>
    <updated>2020-09-28T02:13:54.333Z</updated>
    
    <content type="html"><![CDATA[<p>平时例行午睡时间是下午1:20-1:50，今天也一样，只是闹钟响的时候感觉没睡够。<br>于是想再眯一会儿，然后我睡朦了，做了一个让我哭笑不得的梦。</p><p>下面描述下这个梦</p><p>在梦中，我被一阵持续的噪音惊醒，声音类似老式空调压缩机的声音，嘈杂而持久，整个房间都有一点震动的感觉。我在房间里仔细搜寻噪音的源头，好让自己再次入眠。</p><p>找来找去，发现我的冲牙器在不停震动，声音也很是类似，还以为忘记关开关了。于是准备把开关关了，一阵手忙脚乱开关还是没能关掉（梦中这种细致的操作不好实现？）。于是我把冲牙器的插头拔下了，但是它好像没有停下来的意思，还在不停震动着，而且冲牙器的位置也不是现实中的位置，我好似也坦然接受了这无须电源的震动（这好像不是重点），但是又无法确定噪音的源头就是它。</p><p>然后，富有逻辑的操作来了，我找了个桶把冲牙器盖起来，发现噪音并没有减弱，于是我排除了它的嫌疑。</p><p>接着就发现应该是空调的压缩机在响，我就认定是它了，然后空调的指示灯变清晰了，原来是我误开了空调，我笃定开得是制热，只有制热需要这么大的功率，空气也燥热起来，一切是那么符合逻辑。</p><p>心满意足找到答案之后，我醒了，发现噪音来源是外面修路的水泵。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时例行午睡时间是下午1:20-1:50，今天也一样，只是闹钟响的时候感觉没睡够。&lt;br&gt;于是想再眯一会儿，然后我睡朦了，做了一个让我哭笑不得的梦。&lt;/p&gt;
&lt;p&gt;下面描述下这个梦&lt;/p&gt;
&lt;p&gt;在梦中，我被一阵持续的噪音惊醒，声音类似老式空调压缩机的声音，嘈杂而持久，整个
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://ponder.work/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://ponder.work/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="梦" scheme="http://ponder.work/tags/%E6%A2%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用line_profiler分析Python程序耗时情况</title>
    <link href="http://ponder.work/2020/09/15/python-time-consuming-analysis-with-line_profiler/"/>
    <id>http://ponder.work/2020/09/15/python-time-consuming-analysis-with-line_profiler/</id>
    <published>2020-09-15T13:48:00.000Z</published>
    <updated>2020-09-28T02:13:54.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>最近发生了一个服务故障，在一个同事对日志服务做了改动后，服务的耗时就变大了很多，数据大量积压。<br>通过观察监控报表，我们发现从他的改动上线后，服务器的CPU使用率大幅增加，基本处于满载状态。<br>粗略审查代码并没有发现问题，我们只能紧急回滚了服务，日志消费也恢复到正常状态了。<br>但是根本问题还没有找到，所以我请出了line_profiler来分析程序的具体耗时情况。</p><p><a href="https://github.com/pyutils/line_profiler" target="_blank" rel="noopener">line_profiler</a>是个代码耗时分析器，可以逐行分析代码的耗时情况。<br><a id="more"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>line_profiler包含两个部分</p><ul><li>kernprof：代码执行和耗时记录</li><li>line_profiler：耗时报告解析和展示</li></ul><p>首先，安装：<code>pip install line_profiler -U</code></p><p>给需要分析的代码加上<code>@profile</code>装饰器, <code>@profile</code>装饰器不需要被import，kernprof在运行时会注入依赖，kernprof会记录被装饰函数的耗时情况，有多个函数也可以都加上装饰器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(run_type)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=f.readline()</span><br><span class="line">    input_data = json.loads(data)</span><br><span class="line">    source = input_data.get(<span class="string">'source'</span>, <span class="string">''</span>)</span><br><span class="line">    service = input_data.get(<span class="string">'service'</span>, <span class="number">0</span>)</span><br><span class="line">    apply_no = input_data.get(<span class="string">'applyNo'</span>, <span class="number">0</span>)</span><br><span class="line">    info = input_data.get(<span class="string">'info'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    cust_no = input_data.get(<span class="string">'cust_no'</span>, <span class="number">0</span>)</span><br><span class="line">    job.run(source, service, apply_no, info, run_type)</span><br></pre></td></tr></table></figure></p><p>然后，运行代码：<code>kernprof -l service.py</code>, 统计耗时情况, 执行完成后生成耗时报告文件<code>service.py.lprof</code></p><p>最后，耗时报告解析：<code>python -m line_profiler service.py.lprof</code>，会生成可阅读的耗时报告。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>耗时报告示例<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Timer unit: 1e-06 s</span><br><span class="line"></span><br><span class="line">Total time: 4.18908 s</span><br><span class="line">File: service.py</span><br><span class="line">Function: main at line 38</span><br><span class="line"></span><br><span class="line">Line <span class="comment">#      Hits         Time  Per Hit   % Time  Line Contents</span></span><br><span class="line">==============================================================</span><br><span class="line">   <span class="number"> 38 </span>                                              @profile</span><br><span class="line">   <span class="number"> 39 </span>                                              def main(run_type):</span><br><span class="line">   <span class="number"> 40 </span>       <span class="number"> 1 </span>        45.0     45.0      0.0          with open('data.txt','r') as f:</span><br><span class="line">   <span class="number"> 41 </span>       <span class="number"> 1 </span>       517.0    517.0      0.0              data=f.readline()</span><br><span class="line">   <span class="number"> 42 </span>       <span class="number"> 1 </span>      6564.0   6564.0      0.2          input_data = json.loads(data)</span><br><span class="line">   <span class="number"> 43 </span>       <span class="number"> 1 </span>        20.0     20.0      0.0          source = input_data.get('source', '')</span><br><span class="line">   <span class="number"> 44 </span>       <span class="number"> 1 </span>         6.0      6.0      0.0          service = input_data.get('service', 0</span><br><span class="line">   <span class="number"> 45 </span>       <span class="number"> 1 </span>         5.0      5.0      0.0          apply_no = input_data.get('applyNo', </span><br><span class="line">   <span class="number"> 46 </span>       <span class="number"> 1 </span>         5.0      5.0      0.0          info = input_data.get('info', '')</span><br><span class="line">    47</span><br><span class="line">   <span class="number"> 48 </span>       <span class="number"> 1 </span>         1.0      1.0      0.0          cust_no = input_data.get('cust_no', 0)</span><br><span class="line">   <span class="number"> 49 </span>                                                  </span><br><span class="line">   <span class="number"> 50 </span>       <span class="number"> 1 </span>   4181914.0 4181914.0     99.8         job.run(source, service, apply_no, info, run_type)</span><br></pre></td></tr></table></figure></p><p>耗时报告会逐行显示代码耗时和调用情况</p><ul><li>Timer unit: 耗时单位，这里是微秒</li><li>Total time：总耗时</li><li>Line #：行号</li><li>Hits：函数被调用次数</li><li>Time：函数总耗时</li><li>Per Hit：函数每次调用耗时</li><li>% Time：耗时占比</li></ul><p>可以看到，总耗时4.18908秒，<code>job.run</code>占用了<code>99.8%</code>的时间。</p><p>接下来我们分析下<code>job.run</code>的耗时情况<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Timer unit: <span class="number">1e-06</span> s</span><br><span class="line"></span><br><span class="line">Total <span class="built_in">time</span>: <span class="number">4.16909</span> s</span><br><span class="line"><span class="keyword">File</span>: job.py</span><br><span class="line"><span class="keyword">Function</span>: <span class="keyword">inout</span> at <span class="literal">line</span> <span class="number">69</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Line</span> #      Hits         <span class="built_in">Time</span>  Per Hit   % <span class="built_in">Time</span>  <span class="literal">Line</span> Contents</span><br><span class="line">==============================================================</span><br><span class="line">    <span class="number">69</span>                                               @profile</span><br><span class="line">    <span class="number">70</span>                                               def run(self, apply_no, info, req_type, run_type):</span><br><span class="line">    ... 省略部分逻辑</span><br><span class="line">   <span class="number">112</span>         <span class="number">1</span>          <span class="number">2.0</span>      <span class="number">2.0</span>      <span class="number">0.0</span>          <span class="keyword">if</span> req_type == <span class="symbol">'credit</span>':</span><br><span class="line">   <span class="number">113</span>         <span class="number">1</span>    <span class="number">3370673.0</span> <span class="number">3370673.0</span>     <span class="number">80.8</span>              sql = db_utils.generate_sql(info1, sql, val, columns)</span><br><span class="line">   <span class="number">114</span>                                                   <span class="keyword">else</span>:</span><br><span class="line">   <span class="number">115</span>                                                       sql = db_utils.generate_sql(info1, sql, val, columns)</span><br><span class="line">   <span class="number">116</span>         <span class="number">1</span>       <span class="number">6948.0</span>   <span class="number">6948.0</span>      <span class="number">0.2</span>          safe3_db.executor(sql)</span><br></pre></td></tr></table></figure></p><p>可以看到，113行的生成SQL语句占用了80%的时间，SQL反倒不怎么耗时，显然是不正常的。</p><p>再看下<code>db_utils.generate_sql</code>函数的具体代码<br>可以发现遍历字段列表(item_list)的时候，调用了<code>get_json_value</code>，该函数每次都会调用<code>copy.deepcopy</code>。<br>众所周知，对象的深拷贝是十分消耗cpu资源的，并且这里深拷贝的次数会随着字段数的增加而线性增长。</p><p>把深拷贝行为去除后，服务耗时和cpu占用都回归到了正常水准。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_sql</span><span class="params">(info, sql, val, item_list)</span>:</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    length = len(item_list)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        buf = get_json_value(info,item)</span><br><span class="line">        <span class="keyword">if</span> index &lt; length:</span><br><span class="line">            sql = sql + <span class="string">', `'</span> + str(item) + <span class="string">'`'</span></span><br><span class="line">            val = val + <span class="string">', \''</span> + MySQLdb.escape_string(str(buf)) + <span class="string">'\''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql = sql + <span class="string">', `'</span> + str(item) + <span class="string">'`) '</span></span><br><span class="line">            val = val + <span class="string">', \''</span> + MySQLdb.escape_string(str(buf)) + <span class="string">'\')'</span></span><br><span class="line">    <span class="keyword">return</span> sql + val</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json_value</span><span class="params">(js,term)</span>:</span></span><br><span class="line">    tsplit=term.split(<span class="string">'|'</span>)</span><br><span class="line">    result=<span class="string">''</span></span><br><span class="line">    buf=copy.deepcopy(js)</span><br><span class="line">    <span class="comment"># 省略逻辑代码</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;最近发生了一个服务故障，在一个同事对日志服务做了改动后，服务的耗时就变大了很多，数据大量积压。&lt;br&gt;通过观察监控报表，我们发现从他的改动上线后，服务器的CPU使用率大幅增加，基本处于满载状态。&lt;br&gt;粗略审查代码并没有发现问题，我们只能紧急回滚了服务，日志消费也恢复到正常状态了。&lt;br&gt;但是根本问题还没有找到，所以我请出了line_profiler来分析程序的具体耗时情况。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pyutils/line_profiler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;line_profiler&lt;/a&gt;是个代码耗时分析器，可以逐行分析代码的耗时情况。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>开发Python库并发布到PyPI指南</title>
    <link href="http://ponder.work/2020/09/10/develop-python-library-and-upload-it-to-pypi-guide/"/>
    <id>http://ponder.work/2020/09/10/develop-python-library-and-upload-it-to-pypi-guide/</id>
    <published>2020-09-10T12:03:00.000Z</published>
    <updated>2020-09-11T07:36:34.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PyPI"><a href="#PyPI" class="headerlink" title="PyPI"></a>PyPI</h2><p><a href="https://pypi.org/" target="_blank" rel="noopener">PyPI</a>（英语：Python Package Index，简称PyPI）是一个用于存储Python写成的软件包的软件存储库，我们平时用pip安装的库就是来自于PyPI</p><p>而且，通过PyPI我们可以把自己写的库代码分享给别人，这也是开源的乐趣之一。<br><a id="more"></a></p><h2 id="用到的库代码"><a href="#用到的库代码" class="headerlink" title="用到的库代码"></a>用到的库代码</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── MANIFEST.<span class="keyword">in</span></span><br><span class="line">├── README.md</span><br><span class="line">├── dingtalk_log_handler</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">├── setup.py</span><br></pre></td></tr></table></figure><p>整体代码结构，其中<a href="https://github.com/ruanima/dingtalk-log-handler" target="_blank" rel="noopener">dingtalk_log_handler</a>是我写的一个用于发日志到钉钉群的库，也是这次要发布的库。</p><p>先看下库的主体代码<code>dingtalk_log_handler/__init__.py</code>, 由于功能比较简单，逻辑就都写在<code>__init__.py</code>里了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># 其他import略去</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'ruan.lj'</span></span><br><span class="line">__version__ = <span class="string">'0.0.2'</span></span><br><span class="line">__all__ = (</span><br><span class="line">    <span class="string">'OAPI_DOMAIN'</span>,</span><br><span class="line">    <span class="string">'DingTalkHandler'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">OAPI_DOMAIN = <span class="string">'oapi.dingtalk.com'</span>   <span class="comment"># dingtalk open api domain</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingdingApiError</span><span class="params">(RuntimeError)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingTalkHandler</span><span class="params">(logging.Handler)</span>:</span></span><br><span class="line">    <span class="string">"""Handler for logging message to dingtalk"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 略去逻辑代码</span></span><br></pre></td></tr></table></figure><h2 id="编写-setup-py"><a href="#编写-setup-py" class="headerlink" title="编写 setup.py"></a>编写 setup.py</h2><p>setup.py指引了打包工具如何打包我们的库，功能与类似Makefile</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"><span class="keyword">from</span> dingtalk_log_handler <span class="keyword">import</span> __author__, __version__</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the contents of your README file</span></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line">this_directory = path.abspath(path.dirname(__file__))</span><br><span class="line"><span class="keyword">with</span> open(path.join(this_directory, <span class="string">'README.md'</span>), encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    long_description = f.read()</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">'dingtalk-log-handler'</span>,</span><br><span class="line">    version=__version__,</span><br><span class="line">    author=__author__,</span><br><span class="line">    author_email=<span class="string">'xxx@foxmail.com'</span>,</span><br><span class="line">    description=<span class="string">'log handler for send message to dingtalk'</span>,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">'text/markdown'</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">'Development Status :: 4 - Beta'</span>,</span><br><span class="line">        <span class="string">'Intended Audience :: Developers'</span>,</span><br><span class="line">        <span class="string">'Topic :: Software Development :: Libraries'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3'</span>,</span><br><span class="line">        <span class="comment"># 省略一下</span></span><br><span class="line">    ],</span><br><span class="line">    packages=find_packages(),</span><br><span class="line">    python_requires=<span class="string">'&gt;=3.5'</span>,</span><br><span class="line">    install_requires=[],</span><br><span class="line">    project_urls=&#123;</span><br><span class="line">        <span class="string">'Source'</span>: <span class="string">'https://github.com/ruanima/dingtalk-log-handler'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>具体打包的功能由<code>setuptools.setup</code>函数实现，我们只需要修改对应的参数即可</p><p>这些参数影响打包的行为，以及在PyPI页面上显示的信息</p><p>主要的参数说明，详细信息参考<a href="https://packaging.python.org/guides/distributing-packages-using-setuptools" target="_blank" rel="noopener">文档</a></p><ul><li>name: 库名，也就是<code>pip install xxx</code>时的名称</li><li>version: 版本，我们这里是复用了库代码里的版本号</li><li>author: 作者，同上</li><li>author_email: 作者邮箱</li><li>description: 库说明，在<code>pip search xxx</code>的时候可以看到</li><li>long_description: 库详细说明，显示在PyPI完整上，我们这里从<code>README.md</code>文件中读取具体内容</li><li>long_description: 库详细说明的格式，这里使用markdown</li><li>classifiers: 库的类别信息，<a href="https://pypi.org/classifiers/" target="_blank" rel="noopener">所有可选值参考</a></li><li>packages: 库包含的python包，通过find_packages自动添加</li><li>py_modules: 库包含的顶级Python模块，我们这里没有</li><li>python_requires: 支持的Python版本</li><li>install_requires: 依赖的其他库，格式与<code>pip freeze</code>输出的格式相同</li><li>project_urls: 项目的一些链接信息，<a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/?#project-urls" target="_blank" rel="noopener">可选值列表</a></li></ul><h2 id="编写-MANIFEST-in"><a href="#编写-MANIFEST-in" class="headerlink" title="编写 MANIFEST.in"></a>编写 MANIFEST.in</h2><p>打包时默认只会包含包代码和一些必要的文件，见<a href="https://packaging.python.org/guides/using-manifest-in/#how-files-are-included-in-an-sdist" target="_blank" rel="noopener">列表</a><br>如果要包含其他资源文件，必须编写<code>MANIFEST.in</code>来说明说明</p><p>MANIFEST.in<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> README.md</span><br><span class="line">recursive-<span class="keyword">include</span> dingtalk_log_handler *</span><br><span class="line">global-<span class="keyword">exclude</span> __pycache__</span><br><span class="line">global-<span class="keyword">exclude</span> tmp</span><br><span class="line">global-<span class="keyword">exclude</span> *.py[co]</span><br></pre></td></tr></table></figure></p><p>语法和shell的通配符语法类似</p><ul><li><code>include &lt;pattern&gt; &lt;pattern2&gt; ...</code>: 包含项目根目录匹配通配符的文件</li><li><code>recursive-include &lt;dir-pattern&gt; &lt;pattern&gt; &lt;pattern2&gt; ...</code>: 递归地包含指定目录匹配通配符的文件</li><li><code>global-exclude &lt;pattern&gt; &lt;pattern2&gt; ...</code>: 递归地排除匹配通配符的文件</li></ul><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>执行: <code>python3 setup.py sdist bdist_wheel</code></p><p>输出文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dist</span></span><br><span class="line">├── <span class="selector-tag">dingtalk-log-handler-0</span><span class="selector-class">.0</span><span class="selector-class">.2</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">└── <span class="selector-tag">dingtalk_log_handler-0</span><span class="selector-class">.0</span><span class="selector-class">.2-py3-none-any</span><span class="selector-class">.whl</span></span><br></pre></td></tr></table></figure></p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>我们可以通过<a href="https://test.pypi.org" target="_blank" rel="noopener">PyPI的测试站点</a> 来练习库文件的上传，并测试效果</p><ol><li><a href="https://test.pypi.org/account/register/" target="_blank" rel="noopener">注册账户</a> </li><li>安装上传工具：<code>pip install twine -U</code></li><li>上传文件：<code>twine upload --repository testpypi dist/*</code> </li></ol><p>熟悉流程之后，就可以换成<a href="https://pypi.org" target="_blank" rel="noopener">正式站点</a>，指定正式仓库(–repository pypi)上传文件</p><p>这样全世界的人都能看到你的库了。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>可以在<a href="https://pypi.org/project/dingtalk-log-handler/" target="_blank" rel="noopener">这里</a>找到我这次上传的库</p><p>可以看到 setup.py 文件里的很多信息会对应体现在PyPI网页上<br><img src="http://image.runjf.com/mweb/2020-09-11-15997969319299.jpg" alt></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://packaging.python.org/guides/distributing-packages-using-setuptools" target="_blank" rel="noopener">https://packaging.python.org/guides/distributing-packages-using-setuptools</a></li><li><a href="https://packaging.python.org/guides/using-manifest-in/" target="_blank" rel="noopener">https://packaging.python.org/guides/using-manifest-in/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PyPI&quot;&gt;&lt;a href=&quot;#PyPI&quot; class=&quot;headerlink&quot; title=&quot;PyPI&quot;&gt;&lt;/a&gt;PyPI&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://pypi.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PyPI&lt;/a&gt;（英语：Python Package Index，简称PyPI）是一个用于存储Python写成的软件包的软件存储库，我们平时用pip安装的库就是来自于PyPI&lt;/p&gt;
&lt;p&gt;而且，通过PyPI我们可以把自己写的库代码分享给别人，这也是开源的乐趣之一。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="PyPI" scheme="http://ponder.work/tags/PyPI/"/>
    
  </entry>
  
  <entry>
    <title>使用SWIG实现Python调用c++</title>
    <link href="http://ponder.work/2020/08/05/python-connect-cpp-programs-with-SWIG/"/>
    <id>http://ponder.work/2020/08/05/python-connect-cpp-programs-with-SWIG/</id>
    <published>2020-08-05T12:17:00.000Z</published>
    <updated>2021-03-25T11:52:53.984Z</updated>
    
    <content type="html"><![CDATA[<p> <strong><a href="http://www.swig.org" target="_blank" rel="noopener">SWIG</a></strong> (Simplified Wrapper and Interface Generator) 是一个开源工具，用于让C/C++的程序和库可以被其他语言调用。</p><p>支持的非常多语言，有Lua, Perl, PHP, Python, R, Ruby, C#, Java, JavaScript, Go, Scheme 等。<br><a id="more"></a></p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ol><li>定义SWIG接口文件</li><li>生成C/C++和目标语言的包装代码</li><li>编译位置无关的C/C++包装代码和功能代码，并链接为动态库</li></ol><p><img src="http://image.runjf.com/mweb/2020-08-06-Untitled%20Diagram.svg" alt></p><h2 id="c-示例代码"><a href="#c-示例代码" class="headerlink" title="c++示例代码"></a>c++示例代码</h2><p>下面用到的C++代码</p><p>头文件<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* utils.h */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _H_UTILS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _H_UTILS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Utils();</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Float2String</span><span class="params">(<span class="keyword">float</span> Num)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>具体实现代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* utils.cpp */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils.h"</span></span></span><br><span class="line"></span><br><span class="line">Utils::Utils() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> Utils::Float2String(<span class="keyword">float</span> Num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ostringstream</span> oss;</span><br><span class="line">oss&lt;&lt;Num;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(oss.str())</span></span>;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SWIG-接口文件"><a href="#SWIG-接口文件" class="headerlink" title="SWIG 接口文件"></a>SWIG 接口文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* example.i */</span></span><br><span class="line"> %<span class="keyword">module</span> model_engine</span><br><span class="line"> %include <span class="string">"std_string.i"</span></span><br><span class="line"> %&#123;</span><br><span class="line"> <span class="comment">/* Put header files here or function declarations like below */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils.h"</span></span></span><br><span class="line"> %&#125;</span><br><span class="line"></span><br><span class="line">%include <span class="string">"utils.h"</span></span><br></pre></td></tr></table></figure><p>其中<code>%include &quot;std_string.i&quot;</code>, 实现了c++的string自动转python的str</p><h2 id="生成动态库"><a href="#生成动态库" class="headerlink" title="生成动态库"></a>生成动态库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swig -c++ -python  example.i</span><br><span class="line">g++ -O2 -fPIC -std=c++0x -c utils.cpp</span><br><span class="line">g++ -O2 -fPIC -std=c++0x -c example_wrap.cxx -I/usr/include/python3.8/</span><br><span class="line">g++ -shared utils.o example_wrap.o -o _example.so</span><br></pre></td></tr></table></figure><p>注意编译<code>example_wrap.cxx</code>时引入对应版本的python头文件，不同系统的路径可能有所不同。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> example</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ul = example.Utils()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ul.Float2String(<span class="number">1.111</span>)</span><br><span class="line"><span class="string">'1.111'</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://segmentfault.com/a/1190000013219667" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013219667</a></li><li><a href="http://www.swig.org/Doc4.0/SWIGDocumentation.html#Python" target="_blank" rel="noopener">http://www.swig.org/Doc4.0/SWIGDocumentation.html#Python</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;&lt;a href=&quot;http://www.swig.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SWIG&lt;/a&gt;&lt;/strong&gt; (Simplified Wrapper and Interface Generator) 是一个开源工具，用于让C/C++的程序和库可以被其他语言调用。&lt;/p&gt;
&lt;p&gt;支持的非常多语言，有Lua, Perl, PHP, Python, R, Ruby, C#, Java, JavaScript, Go, Scheme 等。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://ponder.work/tags/Python/"/>
    
      <category term="C++" scheme="http://ponder.work/tags/C/"/>
    
      <category term="SWIG" scheme="http://ponder.work/tags/SWIG/"/>
    
  </entry>
  
  <entry>
    <title>IEEE 754 与浮点数的二进制表示</title>
    <link href="http://ponder.work/2020/08/03/ieee754-floating-point-representation/"/>
    <id>http://ponder.work/2020/08/03/ieee754-floating-point-representation/</id>
    <published>2020-08-03T12:17:00.000Z</published>
    <updated>2020-08-05T06:51:02.412Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，浮点（英语：floating point，缩写为FP）是一种对于实数的近似值数值表现法, 类似于十进制的<a href="https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E8%AE%B0%E6%95%B0%E6%B3%95" target="_blank" rel="noopener">科学计数法</a>.<br><a id="more"></a></p><h2 id="科学记数法"><a href="#科学记数法" class="headerlink" title="科学记数法"></a>科学记数法</h2><p>在科学记数法中，一个数被写成一个”实数”与一个10的<code>n</code>次幂的积<br>$$\pm a \times 10 ^ n$$<br>其中：</p><ul><li>$n$ 必须是一个整数, 可称之为指数。</li><li>$a$ 必须是<code>[1, 10)</code>区间内的实数，可称为有效数或尾数。</li></ul><p>类似的，二进制的科学计数法则是 $\pm a \times 2 ^ n$ ，不同的是 $a$ 必须是<code>[1, 2)</code>区间内的实数。</p><p>所以浮点数的二进制表示，就是用二进制位表示为 $\pm a \times 2 ^ n$ 。</p><h2 id="IEEE-754浮点数表示"><a href="#IEEE-754浮点数表示" class="headerlink" title="IEEE 754浮点数表示"></a>IEEE 754浮点数表示</h2><p>所以，我们可以将一定长度的二进制位分成三个部分，用来分别表示 $\pm$、$n$、$a$ ，而IEEE 754就是具体实现的标准。</p><p>IEEE二进制浮点数算术标准（IEEE 754）是20世纪80年代以来最广泛使用的浮点数运算标准，为许多CPU与浮点运算器所采用。</p><p>IEEE 754规定，对于32位的浮点数，最高的1位表示符号 $\pm$ 记为<code>s</code>(sign)，接着的8位表示指数 $n$ 记为<code>E</code>(exponent)，剩下的23位为有效数 $a$ 记为<code>M</code>(fraction)。</p><p>8位二进制位，能表示的256个数值，由于指数有正有负，标准规定从-127开始计数，也就是-127到128（与有符号数的实现不同），而且-127和128被用作特殊值处理，见下方<a href="#特殊值">特殊值</a>。</p><p>同时，由于M的整数部分永远是1，我们可以只表示其小数部分，记为<code>N</code>。</p><p>也就是最终可表示为 $s \times 2 ^ E \times (1+N)$ 。</p><p>具体各部分拆解如下，其中 $a_0$ 到 $a_{31}$ 对应32个二进制位的值，为<code>0</code>或者<code>1</code>。</p><p>$$s = (-1)^{a_{0}}$$<br>$$E = -127 + a_{1}\times 2^{7} + a_{2}\times 2^{6} + \dots + a_{8}\times2^0$$<br>$$N = a_{9}\times 2^{-1} + a_{10}\times 2^{-2} + \dots + a_{31}\times2^{-23}$$</p><p>以十进制的 $-5.0$ 为例，可表示为 $-1.25 \times 2 ^ 2$。那么，s=1，N=0.25，E=2。<br>具体来说<br>$$s=(-1)^1=-1$$<br>$$E=-127 + 2^7 + 2^0 = 2$$<br>$$N=2^{-2}=0.25$$</p><p><img src="http://image.runjf.com/mweb/2020-08-04-15965370742818.jpg" alt></p><h2 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h2><p>这里有三个特殊值需要指出：</p><ul><li>如果指数是0并且尾数的小数部分是0，这个数±0（和符号位相关）</li><li>如果指数的二进制位<code>全为1</code>并且尾数的小数部分是0，这个数是±∞（同样和符号位相关）</li><li>如果指数的二进制位<code>全为1</code>并且尾数的小数部分非0，这个数表示为非数（NaN）。</li></ul><p>单精度浮点数各种极值情况：</p><table><thead><tr><th>类别</th><th>正负号</th><th>实际指数</th><th>有偏移指数</th><th>指数域</th><th>尾数域</th><th>数值</th></tr></thead><tbody><tr><td>零</td><td>0</td><td>-127</td><td>0</td><td>0000 0000</td><td>000 0000 0000 0000 0000 0000</td><td>0.0</td></tr><tr><td>负零</td><td>1</td><td>-127</td><td>0</td><td>0000 0000</td><td>000 0000 0000 0000 0000 0000</td><td>−0.0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>127</td><td>0111 1111</td><td>000 0000 0000 0000 0000 0000</td><td>1.0</td></tr><tr><td>-1</td><td>1</td><td>0</td><td>127</td><td>0111 1111</td><td>000 0000 0000 0000 0000 0000</td><td>−1.0</td></tr><tr><td>最小的非规约数</td><td>*</td><td>-126</td><td>0</td><td>0000 0000</td><td>000 0000 0000 0000 0000 0001</td><td>±2−23 × 2−126 = ±2−149 ≈ ±1.4×10-45</td></tr><tr><td>中间大小的非规约数</td><td>*</td><td>-126</td><td>0</td><td>0000 0000</td><td>100 0000 0000 0000 0000 0000</td><td>±2−1 × 2−126 = ±2−127 ≈ ±5.88×10-39</td></tr><tr><td>最大的非规约数</td><td>*</td><td>-126</td><td>0</td><td>0000 0000</td><td>111 1111 1111 1111 1111 1111</td><td>±(1−2−23) × 2−126 ≈ ±1.18×10-38</td></tr><tr><td>最小的规约数</td><td>*</td><td>-126</td><td>1</td><td>0000 0001</td><td>000 0000 0000 0000 0000 0000</td><td>±2−126 ≈ ±1.18×10-38</td></tr><tr><td>最大的规约数</td><td>*</td><td>127</td><td>254</td><td>1111 1110</td><td>111 1111 1111 1111 1111 1111</td><td>±(2−2−23) × 2127 ≈ ±3.4×1038</td></tr><tr><td>正无穷</td><td>0</td><td>128</td><td>255</td><td>1111 1111</td><td>000 0000 0000 0000 0000 0000</td><td>+∞</td></tr><tr><td>负无穷</td><td>1</td><td>128</td><td>255</td><td>1111 1111</td><td>000 0000 0000 0000 0000 0000</td><td>−∞</td></tr><tr><td>NaN</td><td>*</td><td>128</td><td>255</td><td>1111 1111</td><td>non zero</td><td>NaN</td></tr><tr><td>* 符号位可以为0或1 .</td></tr></tbody></table><h2 id="浮点数与二进制字符串转换"><a href="#浮点数与二进制字符串转换" class="headerlink" title="浮点数与二进制字符串转换"></a>浮点数与二进制字符串转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_to_float</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(data) == <span class="number">32</span></span><br><span class="line">    sign = (<span class="number">-1</span>) ** int(data[<span class="number">0</span>])</span><br><span class="line">    exponent = <span class="number">2</span> ** (<span class="number">-127</span> + sum(int(a) * <span class="number">2</span> ** b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(data[<span class="number">1</span>:<span class="number">9</span>], range(<span class="number">7</span>, <span class="number">-1</span>, <span class="number">-1</span>))))</span><br><span class="line">    fraction = <span class="number">1</span> + sum(int(a) * <span class="number">2</span> ** b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(data[<span class="number">9</span>:], range(<span class="number">-1</span>, <span class="number">-24</span>, <span class="number">-1</span>)))</span><br><span class="line">    <span class="keyword">return</span> sign * exponent * fraction</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">float_to_binary</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> struct</span><br><span class="line">    bins = struct.pack(<span class="string">'&gt;f'</span>, data)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(<span class="string">'&#123;:0&gt;8&#125;'</span>.format(bin(i)[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> bins)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/IEEE_754</a></li><li><a href="https://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E8%AE%B0%E6%95%B0%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E8%AE%B0%E6%95%B0%E6%B3%95</a></li><li>《深入理解计算机系统》</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在计算机科学中，浮点（英语：floating point，缩写为FP）是一种对于实数的近似值数值表现法, 类似于十进制的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E8%AE%B0%E6%95%B0%E6%B3%95&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;科学计数法&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="浮点数" scheme="http://ponder.work/tags/%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>variable-precision SWAR 算法详解</title>
    <link href="http://ponder.work/2020/08/01/variable-precision-SWAR-algorithm/"/>
    <id>http://ponder.work/2020/08/01/variable-precision-SWAR-algorithm/</id>
    <published>2020-08-01T06:03:00.000Z</published>
    <updated>2020-08-04T10:40:20.363Z</updated>
    
    <content type="html"><![CDATA[<p>在学习redis源码时，发现<code>BITCOUNT</code>命令实现用到了variable-precision SWAR 算法。</p><p><code>BITCOUNT</code>命令要解决的问题：<strong>统计一个位数组中非0二进制位的数量</strong>。在数学上被称为“计算汉明重量（Hamming Weight)” </p><p>目前已知效率最好的通用算法为variable-precision SWAR 算法。<br>该算法通过一系列位移和位运算操作，可以在常数时间内计算多个字节的汉明重量，并且不需要使用任何额外的内存。<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>以下是一个处理32位长度位数组的算法实现，一共分4步。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint32_t</span> swar(<span class="keyword">uint32_t</span> i)&#123;</span><br><span class="line">    i = (i &amp; <span class="number">0x55555555</span>) + ((i&gt;&gt;<span class="number">1</span>) &amp; <span class="number">0x55555555</span>);  <span class="comment">// 步骤1</span></span><br><span class="line">    i = (i &amp; <span class="number">0x33333333</span>) + ((i&gt;&gt;<span class="number">2</span>) &amp; <span class="number">0x33333333</span>);  <span class="comment">// 步骤2</span></span><br><span class="line">    i = (i &amp; <span class="number">0x0F0F0F0F</span>) + ((i&gt;&gt;<span class="number">4</span>) &amp; <span class="number">0x0F0F0F0F</span>);  <span class="comment">// 步骤3</span></span><br><span class="line">    i = (i * <span class="number">0x01010101</span>) &gt;&gt; <span class="number">24</span>;                    <span class="comment">// 步骤4</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>这里我们以<code>i=0x12345678</code>(二进制位为<code>00010010001101000101011001111000</code>)为例，讲解算法过程<br>我们可以把i的二进制位理解成：长度为32的数组，每个元素取值区间[0,1]，每个元素正好能代表这个位是不是1.</p><p>所以，问题就可以转化为，求这个数组的和。<br>根据分治法的思想，我们可以把相邻的两个数字相加，得到长度为16的数组，每个元素取值区间[0,2]。<br>并以此类推，最终求出总和。</p><p><img src="http://image.runjf.com/mweb/2020-08-01-15962704953270.jpg" alt><br><img src="http://image.runjf.com/mweb/2020-08-01-15962705553725.jpg" alt></p><h3 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h3><p>这一步用到<code>0x55555555</code>作为掩码，其二进制表示为<code>01010101010101010101010101010101</code><br>此时i可理解为长度为32的数组，每个元素取值区间[0,1]，元素宽度1bit。</p><p>通过<code>i &amp; 0x55555555</code>运算，取得了i的奇数位置元素，存储为16个2bit整数；<br>通过<code>(i&gt;&gt;1) &amp; 0x55555555</code>运算，取得了i的偶数位置元素，存储为16个2bit整数；</p><p>两者相加，相当于16组2bit整数按位相加，问题就转化成了2bit的二进制加法。<br>由于原数组每个元素取值区间[0,1]，所以每组相加的结果会在[0,2]区间内，2bit刚好存储。<br>最终得到长度为16的数组，每个元素取值区间[0,2]。<br><img src="http://image.runjf.com/mweb/2020-08-01-15962660065367.jpg" alt></p><h3 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h3><p>这一步用到<code>0x33333333</code>作为掩码，其二进制表示为<code>00110011001100110011001100110011</code><br>此时i可理解表示为长度为16的数组，每个元素取值区间[0,2]，元素宽度2bit。</p><p>通过<code>i &amp; 0x33333333</code>运算，取得了i的奇数位置元素，存储为8个4bit整数；<br>通过<code>(i&gt;&gt;1) &amp; 0x33333333</code>运算，取得了i的偶数位置元素，存储为8个4bit整数；</p><p>两者相加，相当于8组4bit整数按位相加，问题就转化成了4bit的二进制加法。<br>由于原数组每个元素取值区间[0,2]，所以每组相加的结果会在[0,4]区间内，4bit刚好存储。<br>最终得到长度为8的数组，每个元素取值区间[0,4]。</p><h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><p>这一步用到<code>0x0F0F0F0F</code>作为掩码，其二进制表示为<code>00001111000011110000111100001111</code><br>此时i可理解表示为长度为8的数组，每个元素取值区间[0,4]，元素宽度4bit。</p><p>通过<code>i &amp; 0x0F0F0F0F</code>运算，取得了i的奇数位置元素，存储为4个8bit整数；<br>通过<code>(i&gt;&gt;1) &amp; 0x33333333</code>运算，取得了i的偶数位置元素，存储为4个8bit整数；</p><p>两者相加，相当于4组8bit整数按位相加, 问题就转化成了8bit的二进制加法。<br>由于原数组每个元素取值区间[0,4]，所以每组相加的结果会在<code>[0,8]</code>区间内，8bit足够存储。<br>最终得到长度为4的数组，每个元素取值区间[0,8]。</p><h3 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h3><p>按照上面的思路，本来应该继续将长度为4的数组转换为长度为2的数组。<br>但是这里由于4个8bit整数相加存在简便运算，就不继续往下合并了。</p><p>到这一步是时<code>i=0x02030404</code>，为了求出最终结果，我们可以想到位移的办法将每8bit取出（参考ip掩码计算），然后再依次相加。<br>最终结果也就是 <code>(i &amp; 0xFF) + ((i&gt;&gt;8) &amp; 0xFF) + ((i&gt;&gt;16) &amp; 0xFF) + ((i&gt;&gt;24) &amp; 0xFF)</code></p><p>为了理解算法里的做法，这里需要简单的数学推导<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将0x01010101转化成多项式表达</span></span><br><span class="line">          <span class="number">0x01010101</span> == <span class="number">2</span>**<span class="number">24</span> + <span class="number">2</span>**<span class="number">16</span> + <span class="number">2</span>**<span class="number">8</span> + <span class="number">2</span>**<span class="number">0</span> </span><br><span class="line"><span class="comment">// 两边同乘以i</span></span><br><span class="line">      i * <span class="number">0x01010101</span> == i * <span class="number">2</span>**<span class="number">24</span> + i * <span class="number">2</span>**<span class="number">16</span> + i * <span class="number">2</span>**<span class="number">8</span> + i * <span class="number">2</span>**<span class="number">0</span></span><br><span class="line"><span class="comment">// 2的乘方运算转化为位移运算</span></span><br><span class="line">      i * <span class="number">0x01010101</span> == (i&lt;&lt;<span class="number">24</span>) + (i&lt;&lt;<span class="number">16</span>) + (i&lt;&lt;<span class="number">8</span>) + (i&lt;&lt;<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 两边同时右移24位</span></span><br><span class="line">(i * <span class="number">0x01010101</span>)&gt;&gt;<span class="number">24</span> == ((i&lt;&lt;<span class="number">24</span>)&gt;&gt;<span class="number">24</span>) + ((i&lt;&lt;<span class="number">16</span>)&gt;&gt;<span class="number">24</span>) + ((i&lt;&lt;<span class="number">8</span>)&gt;&gt;<span class="number">24</span>) + ((i&lt;&lt;<span class="number">0</span>)&gt;&gt;<span class="number">24</span>)</span><br><span class="line"><span class="comment">// 将左移和右移合并，并考虑溢出，最终结果一致</span></span><br><span class="line">(i * <span class="number">0x01010101</span>)&gt;&gt;<span class="number">24</span> == (i &amp; <span class="number">0xFF</span>) + ((i&gt;&gt;<span class="number">8</span>) &amp; <span class="number">0xFF</span>) + ((i&gt;&gt;<span class="number">16</span>) &amp; <span class="number">0xFF</span>) + ((i&gt;&gt;<span class="number">24</span>) &amp; <span class="number">0xFF</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习redis源码时，发现&lt;code&gt;BITCOUNT&lt;/code&gt;命令实现用到了variable-precision SWAR 算法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BITCOUNT&lt;/code&gt;命令要解决的问题：&lt;strong&gt;统计一个位数组中非0二进制位的数量&lt;/strong&gt;。在数学上被称为“计算汉明重量（Hamming Weight)” &lt;/p&gt;
&lt;p&gt;目前已知效率最好的通用算法为variable-precision SWAR 算法。&lt;br&gt;该算法通过一系列位移和位运算操作，可以在常数时间内计算多个字节的汉明重量，并且不需要使用任何额外的内存。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://ponder.work/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://ponder.work/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《庄子諵哗》读书笔记</title>
    <link href="http://ponder.work/2020/08/01/%E5%BA%84%E5%AD%90%E8%AB%B5%E5%93%97-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://ponder.work/2020/08/01/%E5%BA%84%E5%AD%90%E8%AB%B5%E5%93%97-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-01T02:17:00.000Z</published>
    <updated>2020-08-12T08:47:29.855Z</updated>
    
    <content type="html"><![CDATA[<p>从高中接触庄子开始，就觉得太难懂了，无论原著还是翻译。直到大学发现南老师讲的这本，才算是勉强能看下去。</p><p>从14年开始，晚上时不时看一点，到现在看完，正好六年。</p><p>人生又有多少个六年呢</p><a id="more"></a><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>第一个主题，就是人生要“具见”，见地具备，就是普通讲的见解，再普通一点讲，就是眼光、思想。</p><p>物与物之间互相在变化，所以叫“物化”</p><blockquote><p>阮云：庄周化蝶，就是物化</p></blockquote><p>“野马”不是一匹马喔，“野马”就是佛经上讲的“阳焰”，太阳光的幻影，古书叫做“海市蜃楼”。</p><p>人类的见解、知识和生活经验都是“比量”，不是真实的。同样一个气候，同样一个空间，一个时间，一个颜色，因人而产生的感受各异。</p><blockquote><p>阮云：因为人和真实的世界，中间总是隔着一层感官，所以每个人的感受是不一样的。</p></blockquote><p>“循业发现”。每一个人根据他自己的生活经历、思想见解、智慧境界等，看一个东西的观念都不同。</p><blockquote><p>阮云：这也是为什么人们很难相互理解</p></blockquote><p>世味尝来浑是蜡，莫教开口向人提。</p><blockquote><p>阮云：大抵是真实而又乏味吧，而且生活的苦不要对他人讲，因为别人体会不了，徒增笑料</p></blockquote><p>依他而起，属于“比量”的境界，通过比较而产生的，都是“依他而起”</p><blockquote><p>阮云：人类的见解、知识和生活经验都是“依他而起”，这个“他”，类似佛家的本性</p></blockquote><p>以神仙丹道家学说来讲，认为生时魄在肉体生命活力中普遍存在。不经过修炼，不能和魂凝聚为一，死后魄就归沉于地。因此，魂就是鬼影，魄是鬼形。</p><p>人世间哪个是真理？哪个是是？哪个是非？哪个是黑？哪个是白？其实对与不对，都是人的“师心自用”。就是说一个人有“成见”，有主观的观念，自以为对就对，叫“师心自用”。</p><blockquote><p>阮云：人总以为自己的经验，能够放之四海，可笑啊</p></blockquote><p>会万物于己者，其惟圣人乎。</p><blockquote><p>阮云：所谓物我混而为一</p></blockquote><p>庄子说：是非观念所产生可以不可以，是从我们的主观来的，我们的认识，你认为可以就可以，你认为不可以就不可以，宇宙间没有一个真正的离开身心以外的是非观念。</p><blockquote><p>阮云：所以说，真正的客观是不存在的。</p></blockquote><p>“物固有所然，”天地万物它有它的所以然，既然宇宙形成了万物，电就是电，电通过灯时，它发亮；通过录音机收音机时，它发声。这个物体有它所以然的特别的性能。“物固有所可。”所以万物有它适宜应该的本位，有它适宜应该的立场。</p><blockquote><p>阮云：一个物有造就它的原因，自然也限制了它能适用的地方。如果这些变了，这物就变为他物了吧</p></blockquote><p>“不用而寓诸庸”呢？“庸”不是马虎，不是差不多，是“得其环中”，</p><blockquote><p>阮云：无用之用是谓大用，道家来讲是无为，佛家是随缘</p></blockquote><p>把自己的精神、聪明向一点上钻。这个“劳神明为一”的“一”，不是“道通为一”的“一”的意思，不要搞错了。只向一点上钻牛角尖，他认为自己最高明，不晓得向大同方面钻，</p><p>形而上之道无是也无非，无善也无恶，形而下之道，有是非，有善恶。</p><blockquote><p>阮云：世界万物本来应该是中性的，因为人的观念介入，而有了高下，有了分别</p></blockquote><p>“未始有封也”，并没有界线。</p><blockquote><p>阮云：物于物之间不存在界限，一直在转化</p></blockquote><p>物质文明越发达，社会越复杂，思想之混乱，是非善恶观念之复杂，都是障道的因缘</p><blockquote><p>阮云：这些就是五蕴，色受想行识。</p></blockquote><p>我再提一下全篇的宗旨，道体，宇宙万有的本体，本来是绝对、同一的。当道体起作用的时候，一切万类的现象不同，作用不同，但道体是一样的。</p><blockquote><p>阮云：一以贯之的就是道体吧</p></blockquote><p>道体是“一”的。因为大家自己的观念不同，被现象骗了，所以各家有各家的看法，儒家有儒家的看法，墨家有墨家的看法 道家有道家的看法，各种说法都不同，应用的方法也不同。因此，被现象迷住了，忘记了本来。</p><p>人要晓得“知几”，把握自己生命的重点，不“知几”，对于自己是在开玩笑，没有用</p><blockquote><p>阮云：几通机，因为物化，事物总在变动之中，所以要知晓关键时机</p></blockquote><p>不管是宗教的，哲学的、科学的、古代诸子百家的，现在的科学分门别类，都有一个大原则，一切学问与人身心性命没有关系的，它不会成立不会存在。</p><p>天地是与我同存的，万物是与我同一的，我们跟万物同样都是那个东西的一份子，并非天地就是我，也不是我就是天地，物是物，我是我，天还是天，地还是地。</p><p>佛学里的有一句名言“如人饮水，冷暖自知”，就是“圣人怀之”，到了那个程度，那个境界，“圣人”只有自己知道</p><p>“是非以不辩为解脱”，禅宗注重的行为，不完全是打坐，所以百丈禅师讲“疾病以减食为汤药”，有了病最好少吃东西，肠胃清理一下，</p><p>上古我们的老祖宗是吃狗肉的，现在广东人保持了这一习俗，上古祭祖宗都要用狗肉来祭，大约到了商、周以后，在祭祀中，才渐渐免除了狗肉这项祭品，但在某些祀典中，仍然须用草扎一个象形的狗，替代一头真的狗，这就是刍狗的来源。</p><blockquote><p>阮云：以万物为刍狗，把万物当成草扎的狗，在祭祀的时候，很庄重，把草狗当成真狗，当祭祀完，就可以扔掉了。</p></blockquote><p>“大廉不嗛”的道理，我经常说一个笑话，拿什么来比呢？拿猪来比，实际世界上最爱干净的是猪，研究生物学的都懂。你看猪一天到晚用嘴东拱西拱，人们以为猪脏，其实它最爱清洁了，脏东西一点都看不惯，看到脏东西就把它拱开，结果是越拱越脏。</p><blockquote><p>阮云：嗛通谦，真正的大廉没有谦让，并不是不谈钱。</p></blockquote><p>啮缺问：你知不知道，天地万物有一个到了最高处基本是相同的，绝对的，同一的那个东西？王倪答复：我哪里知道？换一句话说，我不知道。啮缺又问：你为什么不知道？你知不知道你那个时候你不知道的？王倪说我也不知道，我也不懂。那么啮缺就问：既然这样，宇宙万物的最高处是无知吗？王倪又说，那我也不知道。我们中国文化有一个成语，叫“一问三不知”</p><p>“吊诡”就是佛家禅宗所谓“机锋”。中国学武的有一句话：“弓在弦上，不得不发”，弓拉满了，箭在弦上，不得不发，这是“机”。彼此两个机关相对，非常锋利，很快，不可以用思想，来不及用思想</p><blockquote><p>阮云：所谓势，物理中的势能就是来自此处</p></blockquote><p>“不可思议”，最高的真理就这四个字。不可以用思想知识去推测，不可用逻辑思辩来断定。</p><p>知其不可奈何而安之若命，德之至也。</p><p>凡交近则必相靡以信，远则必忠之以言。言必或传之。</p><p>夫两喜必多溢美之言，两怒必多溢恶之言。凡溢之类妄，妄则其信之也莫，莫则传言者殃。</p><blockquote><p>阮云：所以君子之交淡如水</p></blockquote><p>克核太至，则必有不肖之心应之，而不知其然也。</p><p>我们常常看到办事的，做公务员的“迁令”。譬如我发现有跟我做事的同学，我说：“请你帮我把下面那一本书拿上来。”结果他到了下面对另一人说，“某某人，老师叫你把那本书拿上去。”这就叫“迁令”，已经不对了。做人要“不迁令”。</p><blockquote><p>阮云：然而现在企业在中层都是这种人，可笑可笑</p></blockquote><p>“美成在久，”就是我们平时所讲的，好事不在忙。成就好的事情，不是一时做得到的。坏的事情却容易成就，一成就了以往，来不及改正。所以作人处事要慎重地考虑。</p><p>“有人于此，其德天杀。与之为无方，则危吾国，与之为有方，则危吾身。</p><blockquote><p>阮云：与暴君相处，如果任由放纵他，危害国家，如果约束他，危害自身性命</p></blockquote><p>形就而入，且为颠为灭，为崩为蹶；心和而出，且为声为名，为妖为孽。</p><blockquote><p>阮云：讲得是要和光同尘，如果顺从本心，反而被认为妖孽</p></blockquote><p>汝不知夫螳螂乎？怒其臂以当车辙，不知其不胜任也，是其才之美者也。戒之，慎之，积伐而美者以犯之，几矣！</p><p>故未终其天年而中道之夭于斧斤，此材之患也。</p><p>支离其德</p><blockquote><p>阮云：支离是古人叫支离疏，长得奇形怪状的，然而却免遭各种劳役。这里讲的还是无用之用</p></blockquote><p>福轻乎羽，莫之知载。</p><blockquote><p>阮云：幸福这东西比羽毛还轻，不知道拿什么把它装起来。</p></blockquote><p>《人间世》全篇的宗旨：“世路难行”。并不是世路是不可行的，是可行的。人生要你自己善于处。那么归结起来告诉我们什么东西呢？三个字：守本份。人要守本份，在什么立场就做什么事，处什么态度。大家进了歌厅就要跟着唱歌，进了舞厅就要跟着跳舞，大家喝醉了你就要装醉，大家清醒起来你也要跟着清醒，大家都在做工你却在睡觉，那就不是疯而是蠢到极点了。</p><p>我们知道，春秋战国的文化，道跟德是分开的，道是体，就是内涵，是每个人修养学问的内涵；德是用，得了道体就能起用，即用世之道。</p><p>自其异者视之，肝胆楚越也；自其同者视之，万物皆一也。</p><p>吾所谓无情者，言人之不以好恶内伤其身，常因自然而不益生也。</p><p>尤其这一篇我们要了解什么是“命”，这个命不是算八字那个命，它在哲学的理论上叫天命，在实际的修证就是认清生命的来源。</p><p>这个“命”相当于佛学中讲的业，善的是善业，恶的是恶业，不善不恶的是无记业。</p><p>古书上的“天”字，大约概括了五类内涵：（一）天文学上物理世界的天体之天，如《周易》乾卦卦辞“天行健”的“天”。 （二）具有宗教色彩，信仰上的主宰之天，如《左传》所说的“昊天不吊”。（三）理性上的天，如《诗经》小节的“苍天苍天”。（四）心理性情上的天，如《泰誓》和《孟子》的“天视自我民视，天听自我民听”。（五）形而上的天，如《中庸》所谓“天命之谓性”。</p><p>那么这个道怎么来的呢？两个路线：一是抛弃了你的小聪明，而求那个“无知之知”的大道；另一个路线，把世间的聪明学问都通到了极点，最后归到“一无所知而无不知”，也就得道了。</p><blockquote><p>阮云：和禅宗所谓顿悟和渐修一个意思</p></blockquote><p>不要弄得像现在大学的史学系一样，自己好像比历史还高明，然后去分析历史批判历史，结果你不是历史，你是书呆子。现在研究历史同我们过去不同，我们过去研究历史，是使自己懂得如何作人做事，现在不然，现在是比历史都还要高。</p><blockquote><p>阮云：我们的历史课本常犯这种毛病，脱离时代来谈局限性</p></blockquote><p>“未死先学死，有生即杀生”，“生”就是心念一动，就要把心念通通去掉；这个“死”，不是自己吃安眠药去死，是要烦恼杂念妄想通通死光，就是杀的作用。也就是说，心中的烦恼杂念通通死光，生命的本能才会恢复，才会长生不死。</p><p>孔子讲得很彻底：“徒善不足以为敬，徒法不足以自刑”。</p><p>汉家自有制度，本以霸王道杂之</p><p>泉涸，鱼相与处于陆，相呴以湿，相濡以沫，不如相忘于江湖。与其誉尧而非桀也，不如两忘而化其道。</p><p>杀生者不死，生生者不生。其为物，无不将也，无不迎也，无不毁也，无不成也，其名为撄宁。撄宁也者，撄而后成者也。</p><p>孔子儒家所标榜的圣王之道，得了道才可以入世，“终日挥形”，他们虽然一天到晚看起来忙死了，但“神气无变”，内在修养神与气，并没有受忙碌的外界所影响。</p><p>“各有前因莫羡人”，每一个人都有各自的前因后果，你不要嫉妒羡慕人家。这些都是人生哲学的问题。</p><p>认为时代是进步的，这是站在物质文明立场上来讲。今后的人在物质的享受上，比我们现在还要进步，最后的形态，是物质文明一切一切都在进步；认为时代是退化退步的，这是站在精神文明来讲，这两种观念，必须要推论到宗教上面去。</p><p>你看其它国家的人，标榜人道，可见很不人道，所以才需要人道。</p><p>“其卧徐徐，其觉于于”，这两句话代表佛学禅宗讲的“梦觉一如”，人没有昏迷过，无所谓睡眠，睡眠也是清醒，醒了以后，也没有昏迷过，在清醒中“人生如梦”，本来是梦境，这没有什么两样。</p><blockquote><p>阮云：所谓色即是空，空即是色。</p></blockquote><p>“以己出经”，拿自己推理别人，就是儒家讲的推己及人的忠恕之道。</p><p>圣帝明王，就是动物园的园长，就养一些高明的动物。</p><blockquote><p>阮云：所以领导者并不是自己多强，是要能招到厉害的人，管好厉害的人。</p></blockquote><p>这个道理只可以悟不可以讲，讲出来就很讨厌的。</p><blockquote><p>阮云：就如鲁迅说的，“这人终究会死的”，虽然是实话，但是难听</p></blockquote><p>没有一个人会在妈妈肚子里问：我为什么要生出来？我生出来的目的是什么？没有一个人是问明白了才生出来的。所以人生就以人生为目的，本来如此，这个题目本身就是答案，还有什么好讲的！</p><p>我们人生只有十二个字：“看得破，忍不过；想得到，做不来。”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从高中接触庄子开始，就觉得太难懂了，无论原著还是翻译。直到大学发现南老师讲的这本，才算是勉强能看下去。&lt;/p&gt;
&lt;p&gt;从14年开始，晚上时不时看一点，到现在看完，正好六年。&lt;/p&gt;
&lt;p&gt;人生又有多少个六年呢&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://ponder.work/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://ponder.work/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="哲学" scheme="http://ponder.work/tags/%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
</feed>
